{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Alvin Chao Alvin Chao chaoaj [at] jmu.edu MSC 5734 Harrisonburg , VA 22807 USA 540-568-6206 This hCard created with the hCard creator . Courses: Current: CS 149 CS 159 Fall 2024 Fall 2024 ----------------------------------------------------------------------------------------------------------- Past Courses: CS 149 CS 159 - - CS149 Spring 2024 . CS149 Spring 2023 . CS 149 Fall 2022 . CS149 Spring 2022 . CS149 Fall 2021 . CS149 Spring 2021 . CS149 Fall 2020 . CS149 Spring 2020 . CS149 Fall 2019 . CS149 Spring 2019 . CS149 Fall 2018 . CS149 Spring 2018 . CS149 Fall 2017 . CS149 Spring 2017 . CS149 Fall 2016 . CS139 Spring 2016 . CS240 Fall 2015 . --------------------------------------------------------------------------------------------------- Contact Contact chaoaj[at]jmu.edu for more information about this page or Twitter: @chaoaj See my Resume My Blog My Personal Homepage: http://www.the-chaos.com/alvin","title":"Home"},{"location":"#alvin-chao","text":"Alvin Chao chaoaj [at] jmu.edu MSC 5734 Harrisonburg , VA 22807 USA 540-568-6206 This hCard created with the hCard creator .","title":"Alvin Chao"},{"location":"#courses","text":"Current: CS 149 CS 159 Fall 2024 Fall 2024 ----------------------------------------------------------------------------------------------------------- Past Courses: CS 149 CS 159 - - CS149 Spring 2024 . CS149 Spring 2023 . CS 149 Fall 2022 . CS149 Spring 2022 . CS149 Fall 2021 . CS149 Spring 2021 . CS149 Fall 2020 . CS149 Spring 2020 . CS149 Fall 2019 . CS149 Spring 2019 . CS149 Fall 2018 . CS149 Spring 2018 . CS149 Fall 2017 . CS149 Spring 2017 . CS149 Fall 2016 . CS139 Spring 2016 . CS240 Fall 2015 . ---------------------------------------------------------------------------------------------------","title":"Courses:"},{"location":"#contact","text":"Contact chaoaj[at]jmu.edu for more information about this page or Twitter: @chaoaj See my Resume My Blog My Personal Homepage: http://www.the-chaos.com/alvin","title":"Contact"},{"location":"about/","text":"About Me I am Alvin Chao. This website is a gathering of links that I like, my Computer Science course pages, Music I enjoy, Bible study material, and other things that interest me. I am an Adjunct Instructor for Computer Science, Collaborative Service Manager at JMU, member at Church of the Incarnation and a husband and father. You can find me here: Twitter YouTube Spotify Instagram","title":"About"},{"location":"about/#about-me","text":"I am Alvin Chao. This website is a gathering of links that I like, my Computer Science course pages, Music I enjoy, Bible study material, and other things that interest me. I am an Adjunct Instructor for Computer Science, Collaborative Service Manager at JMU, member at Church of the Incarnation and a husband and father. You can find me here: Twitter YouTube Spotify Instagram","title":"About Me"},{"location":"cs/","text":"CS PRESENTATION Slides Poll 1 - Places Poll 2 - Jobs Playlist: Music provided by Lofi Girl \u2013 Listen: bit.ly/lofigirI-playlists Asian Lo-Fi","title":"CS PRESENTATION"},{"location":"cs/#cs-presentation","text":"Slides Poll 1 - Places Poll 2 - Jobs Playlist: Music provided by Lofi Girl \u2013 Listen: bit.ly/lofigirI-playlists Asian Lo-Fi","title":"CS PRESENTATION"},{"location":"resources/","text":"Resources This page contains links to third-party resources that you may find helpful. If you have suggestions for other resources that your fellow students may find helpful, please let me know. PYTHON RESOURCES: Development Tools: Thonny Editor . Thonny Setup for CS149 Python Download: https://www.python.org/ JAVA RESOURCES: Development Tools OpenJDK Download jGRASP Download Java Downloads: Java 11 API: https://docs.oracle.com/en/java/javase/21/docs/api/index.html Official Java Tutorials: http://docs.oracle.com/javase/tutorial/ Linux/Unix Resources Guide to installing Linux Mint in a virtual machine. Unix Tutorial For Beginners Linux Text Editors UNIX/Linux/Comand Line Lifehacker Command line for beginners tutorial Unix for Mac OSX Users course on Lynda.jmu.edu Editor/IDE: Linux/Mac: Nano tutorial Interactive VIM Tutorial Mac OSX: BBEdit Lynda.jmu.edu Tutorials Series of tutorials on various tech subjects. freely available to JMU Students, Faculty/Staff. lynda.jmu.edu References Dr Java Download LaTeX LaTeX-Project.org - LaTeX home page ShareLaTeX - Web-based LaTeX collaborative editor Texmaker - Cross-platform LaTeX editor Lyx - Graphical semi-WYSIWYG LaTeX editor Miscellaneous OpenClipArt - Public domain images (clipart on this website comes from here) Wolfram Alpha - General purpose mathematical engine Music Tron Soundtracks - I Fight for the Users Songs to Code By MusicForProgramming.net Lights & Motion Reanimation Blade Runner Lucio - Synaesthesia Auditiva Explosions in the Sky - Wilderness Post Rock for Studying and Focusing Just Shapes and Beats OST Enter the Gungeon Celeste OST Cuphead 7 Billion Humans OST Human Resource Machine OST Little Inferno OST Best of Itro Best of Tobu OffWorld - Synthwave Thor Ragnarok OST Anthemic Instrumentals Upbeat Instrumental Work music Best Melodic Dubstep mix 2017 instrumental Artic Empire - ChillStep Monument Valley OST Alto's Adventure OST","title":"Resources"},{"location":"resources/#resources","text":"This page contains links to third-party resources that you may find helpful. If you have suggestions for other resources that your fellow students may find helpful, please let me know.","title":"Resources"},{"location":"resources/#python-resources","text":"Development Tools: Thonny Editor . Thonny Setup for CS149 Python Download: https://www.python.org/","title":"PYTHON RESOURCES:"},{"location":"resources/#java-resources","text":"","title":"JAVA RESOURCES:"},{"location":"resources/#java-downloads","text":"Java 11 API: https://docs.oracle.com/en/java/javase/21/docs/api/index.html Official Java Tutorials: http://docs.oracle.com/javase/tutorial/","title":"Java Downloads:"},{"location":"resources/#linuxunix-resources","text":"Guide to installing Linux Mint in a virtual machine. Unix Tutorial For Beginners Linux Text Editors","title":"Linux/Unix Resources"},{"location":"resources/#unixlinuxcomand-line","text":"Lifehacker Command line for beginners tutorial Unix for Mac OSX Users course on Lynda.jmu.edu","title":"UNIX/Linux/Comand Line"},{"location":"resources/#editoride","text":"Linux/Mac: Nano tutorial Interactive VIM Tutorial Mac OSX: BBEdit","title":"Editor/IDE:"},{"location":"resources/#lyndajmuedu-tutorials","text":"Series of tutorials on various tech subjects. freely available to JMU Students, Faculty/Staff. lynda.jmu.edu","title":"Lynda.jmu.edu Tutorials"},{"location":"resources/#references","text":"Dr Java Download","title":"References"},{"location":"resources/#latex","text":"LaTeX-Project.org - LaTeX home page ShareLaTeX - Web-based LaTeX collaborative editor Texmaker - Cross-platform LaTeX editor Lyx - Graphical semi-WYSIWYG LaTeX editor","title":"LaTeX"},{"location":"resources/#miscellaneous","text":"OpenClipArt - Public domain images (clipart on this website comes from here) Wolfram Alpha - General purpose mathematical engine","title":"Miscellaneous"},{"location":"resources/#music","text":"Tron Soundtracks - I Fight for the Users Songs to Code By MusicForProgramming.net Lights & Motion Reanimation Blade Runner Lucio - Synaesthesia Auditiva Explosions in the Sky - Wilderness Post Rock for Studying and Focusing Just Shapes and Beats OST Enter the Gungeon Celeste OST Cuphead 7 Billion Humans OST Human Resource Machine OST Little Inferno OST Best of Itro Best of Tobu OffWorld - Synthwave Thor Ragnarok OST Anthemic Instrumentals Upbeat Instrumental Work music Best Melodic Dubstep mix 2017 instrumental Artic Empire - ChillStep Monument Valley OST Alto's Adventure OST","title":"Music"},{"location":"syllabus/","text":"Syllabus for CS149 Spring 2023 Section 3 - Instructor: Chao Objectives and Expectations Official course description: Fundamental problem-solving techniques using a modern programming language. By the end of this course, you should be able to: *Explain fundamental programming concepts (e.g, variables, methods, decisions, loops, arrays, objects) using appropriate terminology. Describe basic elements of high-level programming languages, including expressions, statements, functions, modules, and libraries. Read and interpret software specifications and write source code from them. Use automated software tools and processes to test your programs thoroughly. Distinguish appropriate collaboration from cheating on assignments and exams. Evaluate your own work for compliance with requirements and style guidelines. Develop correct and efficient algorithms to solve problems using computation. Course Textbook Required Textbook Zybook: Purchase the text through the Buy Book assignment in Canvas. Grading Criteria You are responsible for all material discussed in lecture and discussion section and posted on the class web page, including announcements, deadlines, policies, etc. Your final course grade will be determined according to the following percentages: Item Percentage Zybook Readings 5% Participation/Labs 10% Homework / Programming Assignments 15% In Class Quizzes 45% Final Exam 25% Reading Quizzes, Labs, Homework / Programming Assignments This portion of your grade will be based on graded labs, reading quizzes, and homework problems assigned. I will drop a to be determined amount(probably 2-3) of reading quizzes and labs at the end of the semester to account for the 'bad day' or unforseen circumstances for missing a particular day. ** Quizzes(In Class)** Quizzes(In class) There will be 6 in-class quizzes on Thursdays. There will be practice quizzes one week then the following week will be the actual quiz for that section. Final Exam The final exam will be two hours: one for written problems, one for coding problems. If you must be absent during an exam for a legitimate reason, you must contact me at least one week beforehand to make special arrangements. Failure to make prior arrangements for a missed exam will result in a zero grade. The instructor reserves the right to give students who do not earn 60% of the points on the final exam no higher than a C for the course. Except in extraordinary situations, you will not be excused from exams. Your instructor will be the sole arbiter of whether a situation qualifies as extraordinary. Hence, you should behave as if you will not be excused from exams for any reason. Letter grades will be assigned on the scale A=90-100, B=80-89, C=70-79, D=60-69, F=0-59, with potential minor adjustments after considering the overall performance of the class and actual distribution of numeric scores. I will use \u201c+\u201d and \u201c-\u201d grades at my discretion. Final course letter grades may be curved if necessary at the end of the semester, based on each student's overall performance for all coursework. If you believe I have made an error while grading your work or calculating your final score, please bring it to my attention after class or during office hours. If I determine that there has been a simple mistake, I will fix it immediately and no formal request is necessary. If you believe an exam question or assignment has been graded unfairly, you must submit a verbal or written formal request for a regrade. Such requests must be submitted within one week of when the assignment in question is returned to you. Any coursework submitted for reconsideration may be regraded in its entirety, which could result in a lower score if warranted. Instructor Contact Info Please post generic questions to Piazza, where other students may answer and/or benefit from my answers. My email is chaoaj at the standard domain. My office is in ISAT 264, and my office hours are posted on the main course page . I am also sometimes available outside office hours by appointment; if you wish to make an appointment, send me an email. Course Policies Important announcements will be made in class and/or on the class website. Please make it a habit to check the web page daily. Although every effort has been made to be complete and accurate, unforeseen circumstances arising during the semester could require the adjustment of any material given here. Consequently, given due notice to students, I reserve the right to change any information on this syllabus or in other course materials. You are permitted to use course materials for your own personal use only. Course materials may not be distributed publicly or provided to others (excepting other students in the course), in any way or format unless explicitly allowed. Attendance and Participation Attendance is not mandatory, but participation will be used as a part of your lab/quiz grade portion. I strongly encourage you to attend every class session and participate fully in order to derive the maximum benefit of this course. If you believe that there is something I could change about the way I am handling the course in order to improve its effectiveness for you, please let me know via email or office hours. Please silence your cell phone while class is in session. If you have a laptop or tablet, you are encouraged to bring it to class and use it to work along with programming examples and exercises. Mute the volume to avoid unintended interruptions, and do not use any electronic devices for activities that may distract other students. Repeated violations of this policy may result in disciplinary action or a grade penalty in the course. I strongly encourage you to check the main website and the Piazza web forum regularly for important announcements (usually regarding programming projects). You may also use the Piazza forum to ask general questions of interest to the class as a whole (e.g., administrative issues or project clarification questions) as well as to offer each other general advice on class assignments. However, do not post any information that would violate the university academic integrity policy. If you are unsure about this, please email me for approval before you post. Homework Written and/or programming exercises will be assigned each week. These exercises are meant to give you a chance to practice the skills you need to develop in this course. You are welcome to discuss these assignments with your classmates and to use generative AI tools to help develop and understand solutions. Be careful! Being able to understand a friend's code, or code generated using an AI tool, is very different from being able to write code on your own. If you become over-reliant on outside assistance you won't develop the skills you need to succeed on quizzes and exams. Late Homework Policy Deadlines exist, in part, so that we can discuss solutions in class. Under normal circumstances, late work will not be accepted. Contact me if you are facing unavoidable circumstances that will prevent you from submitting an assignment on time. I will do my best to work with you to make appropriate accommodations. Please don't wait until the night before to get started! Programming Assignments(PA's) PA's must be submitted electronically following the instructions given in class and on the website. Assignments may not be submitted by any other means (e.g., do not email your projects to me unless I request that). It is your responsibility to test your program and verify that it works properly before submitting it. All assignments are due at 23:00 (11:00pm) on the day indicated on the assignment unless noted otherwise. Late assignments will not be accepted. Regardless of the any other late policy, I reserve the right to refuse to grade any programs submitted after the beginning of the second class period following the project deadline, because I may discuss the solution in class. Project extensions will not necessarily be granted due to server congestion, system problems, network problems, power outages, etc., so do not wait to submit a program until the night it is due. No consideration in grading will be made for errors made in transferring files or submitting the wrong version of your project. Having a working, non-submitted version will not count; only submitted code will be be counted. You will be responsible for developing your own techniques for testing your projects before submitting it. I will grade your assignment based on test cases not provided to you in advance. Because grading may be done automatically, you must follow the project specification exactly. Your code will be graded on a combination of correctness, completeness, documentation, and code style. Any \"hard coding\" in a project assignment will result in a score of zero for that assignment, and is considered a bad-faith effort. Hard coding refers to attempting to make a program appear as if it works correctly, when in fact it does not. One example of hard coding would be printing the desired output instead of computing it. If you have any questions as to what constitutes hard coding for a particular assignment, be sure to ask ahead of time. Academic Honesty You are expected to comply with the JMU Honor Code as stated in the Student Handbook and available from the Honor Council website on all assignments, projects, and exams. Honor Code Students who violate the Honor Code (https://www.jmu.edu/honorcode/code.shtml) will receive a reduced or failing grade in the course. Other penalties may be imposed, and all violations will be reported to the Honor Council. Representing someone else's work as your own, in any form, constitutes an honor code violation. It is also a violation of the honor code to \"render unauthorized assistance to another student by knowingly permitting him or her to see or copy all or a portion of an examination or any work to be submitted for academic credit.\" Automated tools may be used on any assignment, at any time, to detect inappropriate collaboration and the originality of submissions. Generative AI You are permitted to use AI technology in ways that support your learning. The use of AI is strictly prohibited during quizzes and exams, so make sure you can program independently. Refer to the Generative AI in Computing Education Student Guide for examples of appropriate use. Attribution A key component of academic integrity is giving credit where credit is due. If you receive assistance, either from another student, an online source, or an AI-enabled tool, you must provide a clear and explicit acknowledgment of that assistance in your submission. To that end, every homework assignment must include a statement describing your process for completing the work. Here is an example illustrating the format that I expect: \"I was able to complete questions one and two with no assistance after reading the zyBook chapter. I got stuck on question three, but TA Jamie talked me through the solution during office hours. My solution for that question is based on her advice. I had no idea how to get started on question four, so I put the prompt into ChatGPT and asked it for an annotated solution. I didn't understand the resulting code, so I talked it over with my friend Xavier. He explained how negative string indexing works, which helped me to understand the code. My final submission for that question is copied from the ChatGPT output.\" Any submission without such an acknowledgment statement will receive an automatic zero. Full credit for homework assignments is conditional on making a good-faith effort to develop the skills necessary to answer each question independently. Submissions like the following would result in a zero on the assignment. \"I was in a hurry so I just copied all of the prompts into ChatGPT and uploaded the resulting code.\" \"My friend Bill had already completed the assignment and sent me a copy of his solution. I submitted a copy of his code after reading it over and improving some variable names.\" If I find evidence of a violation of the honor code, I will bring the matter to the attention of the involved individuals via email and request a face-to-face meeting. As per section IV of the honor code, first time student offenders may agree that a violation has occurred and accept an appropriate penalty by submitting an \"Informal Resolution Agreement Form\" to the honor council. If the student is not a first-time offender or if there is disagreement about the violation or penalty, the matter will be refered to the honor council under section V of the honor code. Important Notes You must achieve a B\u2013 or better grade to continue on to CS 159. Adding and Dropping the Course Students are responsible for adding and dropping courses. Please consult the appropriate academic calendar for the exact deadlines. I will not give \"WP\" or \"WF\" grades to students requesting a drop after the deadline except in extraordinary circumstances. Disability Accommodations If you need an accommodation based on the impact of a disability, you must contact the Office of Disability Services if you have not previously done so. Disability Services will provide you with an Access Plan letter that will verify your need for services and make recommendations for accommodations to be used in the classroom. Once you have shown me this letter, we will sit down and review the course requirements, your disability characteristics, and your requested accommodations to develop an individualized plan appropriate for this course. I will not make any accommodations without the appropriate documentation, as I am not qualified to diagnose disabilities. Excused Absences Besides the policies in this syllabus, the University's policies apply during the semester. Various policies that may be relevant appear in the Undergraduate Catalog. Excused absences will be granted at my discretion and only with appropriate documentation. Please contact me as soon as possible if you wish to request an excused absence. Missing an exam for reasons such as illness, religious observance, participation in required university activities, or family or personal emergency (such as a serious automobile accident or the funeral of a close relative) all are circumstances that may qualify as an excused absence. Where possible you should attempt by all means necessary to attend and take exams at their regularly scheduled class period. Inclement Weather In case of inclement weather, we will hold class online via Zoom. A link will be available via an announcement in Canvas. Otherwise, this class will operate in accord with JMU's official cancellation policy . Catalog Description CS 149.Introduction to Programming. 3 credits. Fundamental problem-solving techniques using a modern programming language. Topics include variables, input/output, decisions, loops, functions, arrays, and objects. Students learn about algorithm development, testing strategies, and software tools. Students may not receive credit for both CS 139 and CS 149 .","title":"Syllabus for CS149 Spring 2023 Section 3 - Instructor: Chao"},{"location":"syllabus/#syllabus-for-cs149-spring-2023-section-3-instructor-chao","text":"","title":"Syllabus for CS149 Spring 2023 Section 3 - Instructor: Chao"},{"location":"syllabus/#objectives-and-expectations","text":"Official course description: Fundamental problem-solving techniques using a modern programming language. By the end of this course, you should be able to: *Explain fundamental programming concepts (e.g, variables, methods, decisions, loops, arrays, objects) using appropriate terminology. Describe basic elements of high-level programming languages, including expressions, statements, functions, modules, and libraries. Read and interpret software specifications and write source code from them. Use automated software tools and processes to test your programs thoroughly. Distinguish appropriate collaboration from cheating on assignments and exams. Evaluate your own work for compliance with requirements and style guidelines. Develop correct and efficient algorithms to solve problems using computation.","title":"Objectives and Expectations"},{"location":"syllabus/#course-textbook","text":"Required Textbook","title":"Course Textbook"},{"location":"syllabus/#zybook","text":"Purchase the text through the Buy Book assignment in Canvas.","title":"Zybook:"},{"location":"syllabus/#grading-criteria","text":"You are responsible for all material discussed in lecture and discussion section and posted on the class web page, including announcements, deadlines, policies, etc. Your final course grade will be determined according to the following percentages: Item Percentage Zybook Readings 5% Participation/Labs 10% Homework / Programming Assignments 15% In Class Quizzes 45% Final Exam 25% Reading Quizzes, Labs, Homework / Programming Assignments This portion of your grade will be based on graded labs, reading quizzes, and homework problems assigned. I will drop a to be determined amount(probably 2-3) of reading quizzes and labs at the end of the semester to account for the 'bad day' or unforseen circumstances for missing a particular day. ** Quizzes(In Class)** Quizzes(In class) There will be 6 in-class quizzes on Thursdays. There will be practice quizzes one week then the following week will be the actual quiz for that section. Final Exam The final exam will be two hours: one for written problems, one for coding problems. If you must be absent during an exam for a legitimate reason, you must contact me at least one week beforehand to make special arrangements. Failure to make prior arrangements for a missed exam will result in a zero grade. The instructor reserves the right to give students who do not earn 60% of the points on the final exam no higher than a C for the course. Except in extraordinary situations, you will not be excused from exams. Your instructor will be the sole arbiter of whether a situation qualifies as extraordinary. Hence, you should behave as if you will not be excused from exams for any reason. Letter grades will be assigned on the scale A=90-100, B=80-89, C=70-79, D=60-69, F=0-59, with potential minor adjustments after considering the overall performance of the class and actual distribution of numeric scores. I will use \u201c+\u201d and \u201c-\u201d grades at my discretion. Final course letter grades may be curved if necessary at the end of the semester, based on each student's overall performance for all coursework. If you believe I have made an error while grading your work or calculating your final score, please bring it to my attention after class or during office hours. If I determine that there has been a simple mistake, I will fix it immediately and no formal request is necessary. If you believe an exam question or assignment has been graded unfairly, you must submit a verbal or written formal request for a regrade. Such requests must be submitted within one week of when the assignment in question is returned to you. Any coursework submitted for reconsideration may be regraded in its entirety, which could result in a lower score if warranted.","title":"Grading Criteria"},{"location":"syllabus/#instructor-contact-info","text":"Please post generic questions to Piazza, where other students may answer and/or benefit from my answers. My email is chaoaj at the standard domain. My office is in ISAT 264, and my office hours are posted on the main course page . I am also sometimes available outside office hours by appointment; if you wish to make an appointment, send me an email.","title":"Instructor Contact Info"},{"location":"syllabus/#course-policies","text":"Important announcements will be made in class and/or on the class website. Please make it a habit to check the web page daily. Although every effort has been made to be complete and accurate, unforeseen circumstances arising during the semester could require the adjustment of any material given here. Consequently, given due notice to students, I reserve the right to change any information on this syllabus or in other course materials. You are permitted to use course materials for your own personal use only. Course materials may not be distributed publicly or provided to others (excepting other students in the course), in any way or format unless explicitly allowed.","title":"Course Policies"},{"location":"syllabus/#attendance-and-participation","text":"Attendance is not mandatory, but participation will be used as a part of your lab/quiz grade portion. I strongly encourage you to attend every class session and participate fully in order to derive the maximum benefit of this course. If you believe that there is something I could change about the way I am handling the course in order to improve its effectiveness for you, please let me know via email or office hours. Please silence your cell phone while class is in session. If you have a laptop or tablet, you are encouraged to bring it to class and use it to work along with programming examples and exercises. Mute the volume to avoid unintended interruptions, and do not use any electronic devices for activities that may distract other students. Repeated violations of this policy may result in disciplinary action or a grade penalty in the course. I strongly encourage you to check the main website and the Piazza web forum regularly for important announcements (usually regarding programming projects). You may also use the Piazza forum to ask general questions of interest to the class as a whole (e.g., administrative issues or project clarification questions) as well as to offer each other general advice on class assignments. However, do not post any information that would violate the university academic integrity policy. If you are unsure about this, please email me for approval before you post.","title":"Attendance and Participation"},{"location":"syllabus/#homework","text":"Written and/or programming exercises will be assigned each week. These exercises are meant to give you a chance to practice the skills you need to develop in this course. You are welcome to discuss these assignments with your classmates and to use generative AI tools to help develop and understand solutions. Be careful! Being able to understand a friend's code, or code generated using an AI tool, is very different from being able to write code on your own. If you become over-reliant on outside assistance you won't develop the skills you need to succeed on quizzes and exams. Late Homework Policy Deadlines exist, in part, so that we can discuss solutions in class. Under normal circumstances, late work will not be accepted. Contact me if you are facing unavoidable circumstances that will prevent you from submitting an assignment on time. I will do my best to work with you to make appropriate accommodations. Please don't wait until the night before to get started!","title":"Homework"},{"location":"syllabus/#programming-assignmentspas","text":"PA's must be submitted electronically following the instructions given in class and on the website. Assignments may not be submitted by any other means (e.g., do not email your projects to me unless I request that). It is your responsibility to test your program and verify that it works properly before submitting it. All assignments are due at 23:00 (11:00pm) on the day indicated on the assignment unless noted otherwise. Late assignments will not be accepted. Regardless of the any other late policy, I reserve the right to refuse to grade any programs submitted after the beginning of the second class period following the project deadline, because I may discuss the solution in class. Project extensions will not necessarily be granted due to server congestion, system problems, network problems, power outages, etc., so do not wait to submit a program until the night it is due. No consideration in grading will be made for errors made in transferring files or submitting the wrong version of your project. Having a working, non-submitted version will not count; only submitted code will be be counted. You will be responsible for developing your own techniques for testing your projects before submitting it. I will grade your assignment based on test cases not provided to you in advance. Because grading may be done automatically, you must follow the project specification exactly. Your code will be graded on a combination of correctness, completeness, documentation, and code style. Any \"hard coding\" in a project assignment will result in a score of zero for that assignment, and is considered a bad-faith effort. Hard coding refers to attempting to make a program appear as if it works correctly, when in fact it does not. One example of hard coding would be printing the desired output instead of computing it. If you have any questions as to what constitutes hard coding for a particular assignment, be sure to ask ahead of time.","title":"Programming Assignments(PA's)"},{"location":"syllabus/#academic-honesty","text":"You are expected to comply with the JMU Honor Code as stated in the Student Handbook and available from the Honor Council website on all assignments, projects, and exams.","title":"Academic Honesty"},{"location":"syllabus/#honor-code","text":"Students who violate the Honor Code (https://www.jmu.edu/honorcode/code.shtml) will receive a reduced or failing grade in the course. Other penalties may be imposed, and all violations will be reported to the Honor Council. Representing someone else's work as your own, in any form, constitutes an honor code violation. It is also a violation of the honor code to \"render unauthorized assistance to another student by knowingly permitting him or her to see or copy all or a portion of an examination or any work to be submitted for academic credit.\" Automated tools may be used on any assignment, at any time, to detect inappropriate collaboration and the originality of submissions.","title":"Honor Code"},{"location":"syllabus/#generative-ai","text":"You are permitted to use AI technology in ways that support your learning. The use of AI is strictly prohibited during quizzes and exams, so make sure you can program independently. Refer to the Generative AI in Computing Education Student Guide for examples of appropriate use.","title":"Generative AI"},{"location":"syllabus/#attribution","text":"A key component of academic integrity is giving credit where credit is due. If you receive assistance, either from another student, an online source, or an AI-enabled tool, you must provide a clear and explicit acknowledgment of that assistance in your submission. To that end, every homework assignment must include a statement describing your process for completing the work. Here is an example illustrating the format that I expect: \"I was able to complete questions one and two with no assistance after reading the zyBook chapter. I got stuck on question three, but TA Jamie talked me through the solution during office hours. My solution for that question is based on her advice. I had no idea how to get started on question four, so I put the prompt into ChatGPT and asked it for an annotated solution. I didn't understand the resulting code, so I talked it over with my friend Xavier. He explained how negative string indexing works, which helped me to understand the code. My final submission for that question is copied from the ChatGPT output.\" Any submission without such an acknowledgment statement will receive an automatic zero. Full credit for homework assignments is conditional on making a good-faith effort to develop the skills necessary to answer each question independently. Submissions like the following would result in a zero on the assignment. \"I was in a hurry so I just copied all of the prompts into ChatGPT and uploaded the resulting code.\" \"My friend Bill had already completed the assignment and sent me a copy of his solution. I submitted a copy of his code after reading it over and improving some variable names.\" If I find evidence of a violation of the honor code, I will bring the matter to the attention of the involved individuals via email and request a face-to-face meeting. As per section IV of the honor code, first time student offenders may agree that a violation has occurred and accept an appropriate penalty by submitting an \"Informal Resolution Agreement Form\" to the honor council. If the student is not a first-time offender or if there is disagreement about the violation or penalty, the matter will be refered to the honor council under section V of the honor code. Important Notes You must achieve a B\u2013 or better grade to continue on to CS 159. Adding and Dropping the Course Students are responsible for adding and dropping courses. Please consult the appropriate academic calendar for the exact deadlines. I will not give \"WP\" or \"WF\" grades to students requesting a drop after the deadline except in extraordinary circumstances.","title":"Attribution"},{"location":"syllabus/#disability-accommodations","text":"If you need an accommodation based on the impact of a disability, you must contact the Office of Disability Services if you have not previously done so. Disability Services will provide you with an Access Plan letter that will verify your need for services and make recommendations for accommodations to be used in the classroom. Once you have shown me this letter, we will sit down and review the course requirements, your disability characteristics, and your requested accommodations to develop an individualized plan appropriate for this course. I will not make any accommodations without the appropriate documentation, as I am not qualified to diagnose disabilities.","title":"Disability Accommodations"},{"location":"syllabus/#excused-absences","text":"Besides the policies in this syllabus, the University's policies apply during the semester. Various policies that may be relevant appear in the Undergraduate Catalog. Excused absences will be granted at my discretion and only with appropriate documentation. Please contact me as soon as possible if you wish to request an excused absence. Missing an exam for reasons such as illness, religious observance, participation in required university activities, or family or personal emergency (such as a serious automobile accident or the funeral of a close relative) all are circumstances that may qualify as an excused absence. Where possible you should attempt by all means necessary to attend and take exams at their regularly scheduled class period.","title":"Excused Absences"},{"location":"syllabus/#inclement-weather","text":"In case of inclement weather, we will hold class online via Zoom. A link will be available via an announcement in Canvas. Otherwise, this class will operate in accord with JMU's official cancellation policy .","title":"Inclement Weather"},{"location":"syllabus/#catalog-description","text":"CS 149.Introduction to Programming. 3 credits. Fundamental problem-solving techniques using a modern programming language. Topics include variables, input/output, decisions, loops, functions, arrays, and objects. Students learn about algorithm development, testing strategies, and software tools. Students may not receive credit for both CS 139 and CS 149 .","title":"Catalog Description"},{"location":"cs149fall2023/","text":"Welcome! This is the website for the Fall 2023 offering of CS149 (Intro to Programming Fundamentals) at James Madison University. Specifically, this is the website for section taught by Alvin Chao Announcements: In person TA support TAs are available in King ISAT/CS room 248 for in-person support at the following times: Sunday 3 pm - 9 pm Monday/Tuesday/Thursday 5 pm - 9 in person, 9-11 pm online Wednesday 6 pm - 9 pm in person then online 9-11pm TA Hours 9 pm to 11 pm via Microsoft Teams(See Canvas for links) TAs are available for virtual online support from 9 pm to 11 pm Sunday through Thursday. Week 13/14/15 TUE NOV 28 11pm Chp 12 Reading[Canvas/Zybook] WED Nov 29 11pm PA 3A Readiness Quiz[Canvas] THU Nov 30 8am Quiz 6A Nesting and Recursion[IN CLASS] 11pm PA 3B code [Canvas/Gradescope] WED Dec 6 11pm PA 3C code [Canvas/Gradescope] THU Dec 7 8am Quiz 6B Nesting and Recursion[IN CLASS] Week 13 TUE NOV 14 11pm Chp 11 Reading[Canvas/Zybook] WED Nov 15 11pm PA2C - Words [Canvas/Gradescope] THU Nov 16 8am Quiz 5B[IN CLASS] Week 12 MON NOV 6 11pm PA2 Readiness quiz TUE NOV 7 11pm Chp 10 Reading[Canvas/Zybook] THU Nov 9 8am Quiz 5A[IN CLASS] FRI Nov 10 11pm PA2B - words_game_utils.py words_file_utils.py and tests[Canvas/Gradescope] Week 11 TUE Oct 31 11pm Chp 9 Reading[Canvas/Zybook] WED Nov 1 11pm PA1B - test_score_dice.py and score_dice.py[Canvas/Gradescope] THU Nov 2 8am Quiz 4B[IN CLASS] Week 9/10 TUE Oct 17 11pm Chp8 Reading[Canvas/Zybook] WED Oct 18 Fall Break TUE Oct 24 11pm Chp 6 Reading(Canvas/Zybook - made up from previously missed assignment) WED Oct 25th 11pm PA1A - Readiness Quiz and PA1A dice.py[Canvas/Gradescope] THU OCt 26th 8am Quiz 4A[IN CLASS] Week 8 TUE Oct 10 11pm Chp7 Reading[Canvas/Zybook] WED Oct 11 11pm HW 7.1-7.5 [C/G] THU Oct 12 8am QUIZ 3 Retake[IN CLASS] Week 7 TUE Oct 3 11pm Chp6 Reading[Canvas/Zybook] WED Oct 4 11pm HW 6.1-6.5 [C/G] THU Oct 5 8am QUIZ 3[IN CLASS] Week 6 TUE Sep 26 11pm Chp5 Reading[Canvas/Zybook] WED Sep 27 11pm HW 5.1-5.5 [C/G] THU Sep 28 8am QUIZ 2 retake [IN CLASS] Week 5 TUE Sep 19 11pm Chp4 Reading[Canvas/Zybook] WED Sep 20 11pm HW 4.1-4.5 [C/G] THU Sep 21 8am QUIZ 2 [IN CLASS] Week 4 TUE Sep 12 11pm Chp3 Reading[Canvas/Zybook] WED Sep 13 11pm Lab 6[C/G] HW 3.1-3.5 [C/G] THU Sep 14 8am QUIZ 1 RETAKE[IN CLASS] Week 3 TUE Sep 4 11pm Practice Quiz 0 for Thu in class quiz 1[Canvas/Gradescope] + Class 4 word Chp2 Reading[Canvas/Zybook] WED Sep 5 11pm HW 2.1-2.5 [C/G] THU Sep 7 8am QUIZ 1[IN CLASS] Week 2 WED Aug 30 11pm Lab 3[Canvas/Gradescope] + Class 2 word FRI Sep 1 11pm Lab 4[C/G] MON Sep 4 11pm Chp2 Reading[Canvas/Zybook] TUE Sep 5 11pm HW 2.1-2.5 [C/G] Week 1 THU Aug 24 8am [CANVAS] Course Intro Survey Purchase book through Buy Book assignment link. FRI Aug 25 11pm Lab 2[Canvas/Gradescope] Mon Aug 28 11pm Chp1.2-1.8 Reading[Zybook] The class meets Tuesdays and Thursdays. Class meets in person. Please visit the calendar for the week-to-week assignments. My Office Locations Office hours (KING 248): Tues 9:15-9:45 Thu 9:15-9:45 You may schedule an appointment for other times that are not listed to visit my Massanutten 167 office(540)-568-6206 or online via Zoom. Please use the links to the left to navigate the website. Important announcements will be posted on this front page. Other course content will appear on the subpages linked above. Please check this website (especially the front page and calendar) regularly for updates. This semester, we will be using Piazza for class discussions. If you have a question that may be of general interest to your fellow students, please post it on Piazza rather than emailing me directly. This allows others to answer your question or benefit from my answer. I will check the Piazza forum regularly and respond as quickly as I can. To access Piazza, log into Canvas and click the \"Piazza\" link in the navigation bar on the left. Class grades will be accessible via Canvas , and online quizzes will be administered using Canvas as well. Other resources: Connecting to Stu.cs.jmu.edu instructions","title":"Index"},{"location":"cs149fall2023/#welcome","text":"This is the website for the Fall 2023 offering of CS149 (Intro to Programming Fundamentals) at James Madison University. Specifically, this is the website for section taught by Alvin Chao","title":"Welcome!"},{"location":"cs149fall2023/#announcements","text":"In person TA support TAs are available in King ISAT/CS room 248 for in-person support at the following times: Sunday 3 pm - 9 pm Monday/Tuesday/Thursday 5 pm - 9 in person, 9-11 pm online Wednesday 6 pm - 9 pm in person then online 9-11pm TA Hours 9 pm to 11 pm via Microsoft Teams(See Canvas for links) TAs are available for virtual online support from 9 pm to 11 pm Sunday through Thursday. Week 13/14/15 TUE NOV 28 11pm Chp 12 Reading[Canvas/Zybook] WED Nov 29 11pm PA 3A Readiness Quiz[Canvas] THU Nov 30 8am Quiz 6A Nesting and Recursion[IN CLASS] 11pm PA 3B code [Canvas/Gradescope] WED Dec 6 11pm PA 3C code [Canvas/Gradescope] THU Dec 7 8am Quiz 6B Nesting and Recursion[IN CLASS] Week 13 TUE NOV 14 11pm Chp 11 Reading[Canvas/Zybook] WED Nov 15 11pm PA2C - Words [Canvas/Gradescope] THU Nov 16 8am Quiz 5B[IN CLASS] Week 12 MON NOV 6 11pm PA2 Readiness quiz TUE NOV 7 11pm Chp 10 Reading[Canvas/Zybook] THU Nov 9 8am Quiz 5A[IN CLASS] FRI Nov 10 11pm PA2B - words_game_utils.py words_file_utils.py and tests[Canvas/Gradescope] Week 11 TUE Oct 31 11pm Chp 9 Reading[Canvas/Zybook] WED Nov 1 11pm PA1B - test_score_dice.py and score_dice.py[Canvas/Gradescope] THU Nov 2 8am Quiz 4B[IN CLASS] Week 9/10 TUE Oct 17 11pm Chp8 Reading[Canvas/Zybook] WED Oct 18 Fall Break TUE Oct 24 11pm Chp 6 Reading(Canvas/Zybook - made up from previously missed assignment) WED Oct 25th 11pm PA1A - Readiness Quiz and PA1A dice.py[Canvas/Gradescope] THU OCt 26th 8am Quiz 4A[IN CLASS] Week 8 TUE Oct 10 11pm Chp7 Reading[Canvas/Zybook] WED Oct 11 11pm HW 7.1-7.5 [C/G] THU Oct 12 8am QUIZ 3 Retake[IN CLASS] Week 7 TUE Oct 3 11pm Chp6 Reading[Canvas/Zybook] WED Oct 4 11pm HW 6.1-6.5 [C/G] THU Oct 5 8am QUIZ 3[IN CLASS] Week 6 TUE Sep 26 11pm Chp5 Reading[Canvas/Zybook] WED Sep 27 11pm HW 5.1-5.5 [C/G] THU Sep 28 8am QUIZ 2 retake [IN CLASS] Week 5 TUE Sep 19 11pm Chp4 Reading[Canvas/Zybook] WED Sep 20 11pm HW 4.1-4.5 [C/G] THU Sep 21 8am QUIZ 2 [IN CLASS] Week 4 TUE Sep 12 11pm Chp3 Reading[Canvas/Zybook] WED Sep 13 11pm Lab 6[C/G] HW 3.1-3.5 [C/G] THU Sep 14 8am QUIZ 1 RETAKE[IN CLASS] Week 3 TUE Sep 4 11pm Practice Quiz 0 for Thu in class quiz 1[Canvas/Gradescope] + Class 4 word Chp2 Reading[Canvas/Zybook] WED Sep 5 11pm HW 2.1-2.5 [C/G] THU Sep 7 8am QUIZ 1[IN CLASS] Week 2 WED Aug 30 11pm Lab 3[Canvas/Gradescope] + Class 2 word FRI Sep 1 11pm Lab 4[C/G] MON Sep 4 11pm Chp2 Reading[Canvas/Zybook] TUE Sep 5 11pm HW 2.1-2.5 [C/G] Week 1 THU Aug 24 8am [CANVAS] Course Intro Survey Purchase book through Buy Book assignment link. FRI Aug 25 11pm Lab 2[Canvas/Gradescope] Mon Aug 28 11pm Chp1.2-1.8 Reading[Zybook] The class meets Tuesdays and Thursdays. Class meets in person. Please visit the calendar for the week-to-week assignments. My Office Locations Office hours (KING 248): Tues 9:15-9:45 Thu 9:15-9:45 You may schedule an appointment for other times that are not listed to visit my Massanutten 167 office(540)-568-6206 or online via Zoom. Please use the links to the left to navigate the website. Important announcements will be posted on this front page. Other course content will appear on the subpages linked above. Please check this website (especially the front page and calendar) regularly for updates.","title":"Announcements:"},{"location":"cs149fall2023/calendar/","text":"CS149 Section 009 Calendar // <![CDATA[ dttest1 = new Date(2023,7,17); dttest2 = new Date(2023,0,24); function diff_weeks(dt2, dt1) { var diff =(dt2.getTime() - dt1.getTime()) / 1000; // diff in secs diff /= (60 * 60 * 24 * 7); // convert seconds to weeks return Math.abs(Math.round(diff)); } // Start of semester - remember JS date month is one less than current. var dt1 = new Date(2023, 7, 17); // new Date(2023, 7, 17); // January 1 = (2021, 0, 1) // document.write(\"dt1\" + dt1); var dt2 = new Date(); // document.write(\"d2\" + dt2); wk = diff_weeks(dt2,dt1); // document.write(\"Week: \" + wk); if (wk >= 16) { wk = 16; } else if (wk <= 0) { wk = 1; } document.write(\"<a href=\\\"#Week\"+wk+\"\\\">Current Week</a>\"); document.write(\"<!-- wk \" + wk + \"-->\"); // ]]> Python and Config Resources: Python 3 Standard Library Python Tutor Show Me Your Code Unicode Character List print formatting reference Math Module Thonny-Pep8 List Methods Dictionary Methods . Set Methods Docstring Style Guide Main program: if __name__ == \"__main__\": ( Note: This schedule is tentative and is subject to change during the semester ) Week Date Reading Topic HW / Programming Assignment Events Week 1 8/22/23 No class 8/24/23 Thonny Video Intro to CS149 Intro Python Lecture 2 Lab 2 - Thonny C1 Obtain Book assignment Week 2 8/29/23 Chp 1 Reading (Canvas/Zybook)Mon 11pm 8/28/23 Lecture 3 HW1.1-1.2 in class Lab 3 - Style . Lab 3 Video C2 Start HW 1(due Wed 8-30-23 11pm) 8/31/23 Statements: Lecture 3B Lab 4 C3 Week 3 9/5/23 Chp 2 Reading (Canvas/Zybook)Mon 11pm 9/11/23 Practice Quiz for Quiz 1 in class Lecture 4 Interpret Gradescope errors video Practice variables lab referenced in Gradescope errors video C4 HW 2(Wed 9-6-23 11pm) 9/7/23 Expressions: Lecture 6 Circle Math Conditionals Lecture 5 Quiz1 - In Class C5 Week 4 9/12/23 Branching/Conditionals/Assert: Chp 3 Reading (Canvas/Zybook) Mon 11pm 9-14-23 Conditionals Lecture 7 Lab 6 If Then C6 HW3 (Wed 9-13-23 11pm) 9/14/23 Functions Lecture 8 Quiz1B retake Honor Code Case Studies(pdf) Honor Code Videos Honor Code Sheet C7 Week 5 9/19/23 Chp 4 Reading Tue 9-19-23 11pm Time Management Functions: Lecture 9 Functions . Lab 7 Circle Lab C8 HW4 (Wed 9-20-23 11pm) 9/21/23 Chp4 C9 Quiz 2 Lecture 10 Containers Family Weekend 9-29-10-1 Week 6 9/26/23 Chp5 Reading due 9-26-23 11pm Types including lists, sets, dicts Lecture 11 Lab 8 List - Tuples C10 HW5 (Wed 9-27-23 11pm) 9/28/23 C11 Quiz 2 retake Lecture 12 - For loops Week 7 10/3/23 Chp6 Lecture Unit Testing Lab 9 Haiku Lab C12 HW6 (Wed 10-4-23 11pm) 10/5/23 C13 Quiz 3 [Coding Bat Loops Lab - not graded] Lecture 13 While loops Week 8 10/10/23 Chp7 While Loops Lab 11 Eight Ball Lab C14 HW7 (Wed 10-11-23 11pm) 10/12/23 C15 Lecture Modules Quiz 3 retake Week 9 10/17/23 Chp8 Modules Tests for PA1 and PyTest 10/19/23 - No class Fall Break Oct 18-20 C17 Week 10 10/24/23 Review Chp 1-8 Lab 13 List Play - Not graded PA1A due 10/25 10/25 Withdraw W deadline 10/26/23 Lecture 16 - File IO Quiz 4A Homecoming weekend Week 11 10/31/23 Halloween Chp9 File I/O Lecture 17 Command line PA1B due 11/1 11/2/23 Lecture Sequences/Strings Quiz 4B PA2A Readiness Quiz due Monday 11-6 11pm Week 12 11/7/23 Election Day Chp10 Sequences Lab 15 FileI/O VS Code PA2B due Fri 11-10 11pm 11/9/23 Quiz 5A Week 13 11/14/23 Chp 11 Nested Data Lecture 19 Nested Loops PA2C due Wed 11-15 11pm 11/16/23 Quiz 5B Week 14 11/21/23 Thanksgiving Break Thanksgiving Break 11/23/23 Thanksgiving Break Thanksgiving Break Week 15 11/28/23 Chp 12 Recursion Recursion lecture PA3A due 11/29 11/30/23 Quiz 6A PA3B due Thu 11/30 Week 16 12/5/23 Stars Lab PA3C due Wed 12/6 12/7/23 Quiz 6B /Final Review Last day of classes Week 17 12/12/23 Final Exam - Tue 8-10am Exam Schedule Exam Week 12/14/23 Exam Week Exam Week Back to Top Back to Top // <![CDATA[ $(window).load(function(){ // using window load function instead of document ready function /* Animated scroll to top by @NickLa, Web Designer Wall (http://webdesignerwall.com/tutorials/animated-scroll-to-top) with modifications by johns2ja */ // hide #back-top first $(\"#back-top\").hide(); // fade in #back-top //$(function () { /* remove containing function to ensure it works cross-browser - johns2ja */ $(window).scroll(function () { if ($(this).scrollTop() > 100) { $('#back-top').fadeIn(); } else { $('#back-top').fadeOut(); } }); // scroll body to 0px on click $('#back-top a').click(function () { $('body,html').animate({ scrollTop: 0 }, 800); return false; }); // }); /* remove containing function to ensure it works cross-browser */ }); // ]]> <!-- #back-top { bottom: 130px; left: 5%; /* instead of margin-left - johns2ja */ position: fixed; } #back-top a { color: #bbb !important; display: block; font-size: 11px; height: 75px; text-align: center; text-decoration: none !important; text-transform: uppercase; transition: all 1s ease 0s; width: 75px; } #back-top span { background: #ddd url(\"//www.jmu.edu/jmucmsfiles/images/up-arrow.png\") no-repeat scroll center center; border-radius: 15px; display: block; height: 75px; margin-bottom: 7px; transition: all 1s ease 0s; width: 75px; } @media all and (max-width:768px){ /* RWD by johns2ja */ #back-top { bottom: 3%; left: 1%; } #back-top a { height: 32px; width: 32px; font-size: 0px; } #back-top span { width: 32px; height: 32px; background-size: 32px; } } -->","title":"CS149 Section 009 Calendar"},{"location":"cs149fall2023/calendar/#cs149-section-009-calendar","text":"","title":"CS149 Section 009 Calendar"},{"location":"cs149fall2023/pa1_draft/","text":"Programming Assignment(PA) 1: Poker Dice Introduction Poker dice is a dice game similar to Yahtzee played with 5 six sided dice with face values 9, 10, J, Q, K , A. The following table represents a summary of the rules for Poker Dice scores: Type# Category Description Scoring 1 One Pair A pair of the same face value 9, 9, 10, J, K Sum of Matched Values 2 Two Pair Two unique pairs of face values 9, 9, 10, 10 K Sum of both pair values 3 Three of a Kind At least Three of the same face value Sum of three Similar Dice + 10) 4 Four of a Kind At least Four of the same face value Sum of four similar Dice + 20 5 Five of a Kind All five face values are the same 100 points 6 Full House 3 of a kind and a pair 9, 9, 9, A, A (unique face values) 50 points + sum of dice face values 7 Small Straight 4 or more face values in a row 70 points 8 Large Straight All 5 dice sequential 9,10,J,Q,K or 10, J, Q, K, A 95 points 9 Chance Any roll Sum of dice face values The final column in the table describes the score if the player chooses the corresponding score type. For example, if a player selects one pair and the roll is ['9', '9', 'J','Q','A'], the score will be 18 because score is twice the pair value. If the dice rolled are ['9', '9', 'Q', 'A', '9'], then the payout will still be 18, because no extra points are given for a three of a kind because one pair was the selected score type. Your goal for this assignment is to create a dice module and develop and test a function for determining scoring in Poker Dice. Provided Code Start with the following source files: dice.py -- NEED TO CREATE poker_dice.py -- DO NOT EDIT score_dice.py -- UNFINISHED test_score_dice.py -- UNFINISHED dice.py The dice module will work with a list of 5 string die face values. This module will need to work with not just our Poker Dice number of dice (5) but with any number from 1--10 dice. The module will contain five functions: roll_dice -- This function will take two parameters. The first will be an int for the number of dice in the list. The second parameter will be a random seed integer, with a default value of 0. Note it is possible to pass None as a parameter, which should result in a random seed value. This function will return a list of n dice values (each die has a string face value between '9' - 'A'). If the number of dice is out of range 1--10 then a single die of value '9' will be returned as a list of 1 item. If no parameters are provided, then a list of 5 dice values should be returned (having been generated using a seed of 0). are_valid -- This function takes a dice parameter which is a list of from 1--10 dice rolls. This function will check the length of the list to make sure it is between 1 and 10 and check if the values of all dice in the list are between '9' and 'A'. Return True if all these conditions are met, False otherwise. get_value -- This function takes a string argument and gets the scoring numerical point value of a die face value. Face values are: 9 and 10 for the numerical string values, 10 for 'J', 'Q', 'K', and 11 for 'A'. num_faces -- This function takes a dice_list parameter which is a list of from 1--10 dice rolls. It will also take a second parameter for the face value being counted, with a default of None. The function returns a count of the number of times a particular face value shows on the dice in the list. For example, if the dice are ['9', '9','9', 'A', 'K'], dice.num_faces(dice, 9) will return 3 (since the value '9' occurs three times). If no parameter is passed (i.e., None) then count should return 0. Also, if an invalid list or face value of None is passed the function should return -1. add_values -- This function takes a dice parameter which is a list of from 1--10 dice rolls. It will calculate and return the sum of the face values of the dice in the list. Make sure you use the validation function for dice and return a -1 for an invalid list of dice. poker_dice.py This module contains a simple terminal-based Poker Dice game. Once you have completed calculate_score.py you can use this driver to try out your code. This driver will call the dice.py module and use the roll_dice function to return dice rolls. It may not be very useful for systematically testing your solution. The main mechanism for running your code for this project will be the test_calculate_score.py file described below. score_dice.py Your main task for this assignment is to implement the score_dice.calculate_score function according to the provided documentation string. For full credit, your finished function must satisfy the following requirements: A nested conditional should be used to distinguish between the different scorign types Appropriate helper functions must be used to break the problem into smaller and more manageable pieces. The add_values and num_faces functions from the dice module should be used. Your code must make use of the named constants(FACES, FACES_LIST) declared at the top of the dice program. Avoid the use of hard-coded literal values in your solution. Your score_dice.calculate_score function must have only one return statement. test_score_dice.py You must write unit tests for score_dice.py . Rather than writing one very long test_score_dice function, you should write several smaller tests to handle distinct cases. The provided file contains two testing functions to get you started. Notice that the names of these functions describe the situations they are designed to test. For example, the name test_calculate_score_one_pair_no_match : test - This makes it clear that this is a testing function calculate_score - this is the function being tested one_pair_no_match - this is the situation being tested. You should properly document your tests and your score_dice.py file. Docstrings for test functions are generally not required. Categories that you should test include (this is a template for your test_score_dice.py file): Test score one pair no match Test score one pair one match Test score two pair no match Test score two pair one match Test score three of a kind match Test score three of a kind no match Test score four of a kind match Test score four of a kind no match Test score five of a kind match Test score five of a kind no match Test score small straight match Test score small straight no match Test score large straight match Test score large straight no match Test score chance match Part A - Readiness Quiz and dice.py (30 points) 1) Readiness Quiz (10 points) in Canvas. Before the deadline for Part A you should read this document carefully, then look at the starter code provided above. Once you have a clear understanding of the expectations for this assignment, complete the readiness quiz in Canvas (10 points). The grading for this quiz will be all or nothing: your score on the quiz will be 0 if you miss any questions. If you do not successfully complete the readiness quiz, you cannot receive any credit for Part A or Part B. 2) You should also complete the dice.py file (20 pts) and submit this to Gradescope by the deadline for your section. Be sure to test your dice module carefully for correctness AND style before submitting into gradescope; You will be limited to 10 submissions for Part A code. Part B - Code (70 points) Upload only your score_dice.py file to Gradescope. You should not include poker_dice.py or test_score_dice.py in your submission. Before uploading your submission to Gradescope, be sure to complete the following steps: Test your solution carefully. Make sure that poker_dice.py works as expected with your finished code. Review the course style guide to ensure that your code meets the style requirements. Run flake8 and eliminate all warnings. Review and update comments as needed. You are limited to a maximum of 10 submissions into Gradescope for Part B. Programming Assignment Attribution Provide a short statement describing any assistance that you received on this assignment, either from another student, an online source, an AI-enabled tool, or any other source. Acknowledgments This assignment was created by Alvin Chao. Some parts of the Poker dice description above are borrowed from the Poker Dice Wikipedia page. The Wikipedia article, and this assignment page, are licensed under the Creative Commons Attribution-Share-Alike License 3.0.","title":"Programming Assignment(PA) 1: Poker Dice"},{"location":"cs149fall2023/pa1_draft/#programming-assignmentpa-1-poker-dice","text":"","title":"Programming Assignment(PA) 1: Poker Dice"},{"location":"cs149fall2023/pa1_draft/#introduction","text":"Poker dice is a dice game similar to Yahtzee played with 5 six sided dice with face values 9, 10, J, Q, K , A. The following table represents a summary of the rules for Poker Dice scores: Type# Category Description Scoring 1 One Pair A pair of the same face value 9, 9, 10, J, K Sum of Matched Values 2 Two Pair Two unique pairs of face values 9, 9, 10, 10 K Sum of both pair values 3 Three of a Kind At least Three of the same face value Sum of three Similar Dice + 10) 4 Four of a Kind At least Four of the same face value Sum of four similar Dice + 20 5 Five of a Kind All five face values are the same 100 points 6 Full House 3 of a kind and a pair 9, 9, 9, A, A (unique face values) 50 points + sum of dice face values 7 Small Straight 4 or more face values in a row 70 points 8 Large Straight All 5 dice sequential 9,10,J,Q,K or 10, J, Q, K, A 95 points 9 Chance Any roll Sum of dice face values The final column in the table describes the score if the player chooses the corresponding score type. For example, if a player selects one pair and the roll is ['9', '9', 'J','Q','A'], the score will be 18 because score is twice the pair value. If the dice rolled are ['9', '9', 'Q', 'A', '9'], then the payout will still be 18, because no extra points are given for a three of a kind because one pair was the selected score type. Your goal for this assignment is to create a dice module and develop and test a function for determining scoring in Poker Dice.","title":"Introduction"},{"location":"cs149fall2023/pa1_draft/#provided-code","text":"Start with the following source files: dice.py -- NEED TO CREATE poker_dice.py -- DO NOT EDIT score_dice.py -- UNFINISHED test_score_dice.py -- UNFINISHED","title":"Provided Code"},{"location":"cs149fall2023/pa1_draft/#dicepy","text":"The dice module will work with a list of 5 string die face values. This module will need to work with not just our Poker Dice number of dice (5) but with any number from 1--10 dice. The module will contain five functions: roll_dice -- This function will take two parameters. The first will be an int for the number of dice in the list. The second parameter will be a random seed integer, with a default value of 0. Note it is possible to pass None as a parameter, which should result in a random seed value. This function will return a list of n dice values (each die has a string face value between '9' - 'A'). If the number of dice is out of range 1--10 then a single die of value '9' will be returned as a list of 1 item. If no parameters are provided, then a list of 5 dice values should be returned (having been generated using a seed of 0). are_valid -- This function takes a dice parameter which is a list of from 1--10 dice rolls. This function will check the length of the list to make sure it is between 1 and 10 and check if the values of all dice in the list are between '9' and 'A'. Return True if all these conditions are met, False otherwise. get_value -- This function takes a string argument and gets the scoring numerical point value of a die face value. Face values are: 9 and 10 for the numerical string values, 10 for 'J', 'Q', 'K', and 11 for 'A'. num_faces -- This function takes a dice_list parameter which is a list of from 1--10 dice rolls. It will also take a second parameter for the face value being counted, with a default of None. The function returns a count of the number of times a particular face value shows on the dice in the list. For example, if the dice are ['9', '9','9', 'A', 'K'], dice.num_faces(dice, 9) will return 3 (since the value '9' occurs three times). If no parameter is passed (i.e., None) then count should return 0. Also, if an invalid list or face value of None is passed the function should return -1. add_values -- This function takes a dice parameter which is a list of from 1--10 dice rolls. It will calculate and return the sum of the face values of the dice in the list. Make sure you use the validation function for dice and return a -1 for an invalid list of dice.","title":"dice.py"},{"location":"cs149fall2023/pa1_draft/#poker_dicepy","text":"This module contains a simple terminal-based Poker Dice game. Once you have completed calculate_score.py you can use this driver to try out your code. This driver will call the dice.py module and use the roll_dice function to return dice rolls. It may not be very useful for systematically testing your solution. The main mechanism for running your code for this project will be the test_calculate_score.py file described below.","title":"poker_dice.py"},{"location":"cs149fall2023/pa1_draft/#score_dicepy","text":"Your main task for this assignment is to implement the score_dice.calculate_score function according to the provided documentation string. For full credit, your finished function must satisfy the following requirements: A nested conditional should be used to distinguish between the different scorign types Appropriate helper functions must be used to break the problem into smaller and more manageable pieces. The add_values and num_faces functions from the dice module should be used. Your code must make use of the named constants(FACES, FACES_LIST) declared at the top of the dice program. Avoid the use of hard-coded literal values in your solution. Your score_dice.calculate_score function must have only one return statement.","title":"score_dice.py"},{"location":"cs149fall2023/pa1_draft/#test_score_dicepy","text":"You must write unit tests for score_dice.py . Rather than writing one very long test_score_dice function, you should write several smaller tests to handle distinct cases. The provided file contains two testing functions to get you started. Notice that the names of these functions describe the situations they are designed to test. For example, the name test_calculate_score_one_pair_no_match : test - This makes it clear that this is a testing function calculate_score - this is the function being tested one_pair_no_match - this is the situation being tested. You should properly document your tests and your score_dice.py file. Docstrings for test functions are generally not required. Categories that you should test include (this is a template for your test_score_dice.py file): Test score one pair no match Test score one pair one match Test score two pair no match Test score two pair one match Test score three of a kind match Test score three of a kind no match Test score four of a kind match Test score four of a kind no match Test score five of a kind match Test score five of a kind no match Test score small straight match Test score small straight no match Test score large straight match Test score large straight no match Test score chance match","title":"test_score_dice.py"},{"location":"cs149fall2023/pa1_draft/#part-a-readiness-quiz-and-dicepy-30-points","text":"1) Readiness Quiz (10 points) in Canvas. Before the deadline for Part A you should read this document carefully, then look at the starter code provided above. Once you have a clear understanding of the expectations for this assignment, complete the readiness quiz in Canvas (10 points). The grading for this quiz will be all or nothing: your score on the quiz will be 0 if you miss any questions. If you do not successfully complete the readiness quiz, you cannot receive any credit for Part A or Part B. 2) You should also complete the dice.py file (20 pts) and submit this to Gradescope by the deadline for your section. Be sure to test your dice module carefully for correctness AND style before submitting into gradescope; You will be limited to 10 submissions for Part A code.","title":"Part A - Readiness Quiz and dice.py (30 points)"},{"location":"cs149fall2023/pa1_draft/#part-b-code-70-points","text":"Upload only your score_dice.py file to Gradescope. You should not include poker_dice.py or test_score_dice.py in your submission. Before uploading your submission to Gradescope, be sure to complete the following steps: Test your solution carefully. Make sure that poker_dice.py works as expected with your finished code. Review the course style guide to ensure that your code meets the style requirements. Run flake8 and eliminate all warnings. Review and update comments as needed. You are limited to a maximum of 10 submissions into Gradescope for Part B.","title":"Part B - Code (70 points)"},{"location":"cs149fall2023/pa1_draft/#programming-assignment-attribution","text":"Provide a short statement describing any assistance that you received on this assignment, either from another student, an online source, an AI-enabled tool, or any other source.","title":"Programming Assignment Attribution"},{"location":"cs149fall2023/pa1_draft/#acknowledgments","text":"This assignment was created by Alvin Chao. Some parts of the Poker dice description above are borrowed from the Poker Dice Wikipedia page. The Wikipedia article, and this assignment page, are licensed under the Creative Commons Attribution-Share-Alike License 3.0.","title":"Acknowledgments"},{"location":"cs149fall2023/labs/10_pa1-tests%20copy/","text":"Lab12 - PA1 Unit Tests Here is a starting point for Part A of the project. Two example assert statements are provided for each test function. You should add at least three more to each function, so that every requirement of the project is tested. Note: Docstrings are generally not required for test functions. But you should still have a module docstring with your name and date. test_dice.py \"\"\"Test the dice module. Name: YOUR NAME Date: THE DATE \"\"\" from dice import roll_dice from dice import are_valid from dice import add_values from dice import num_faces def test_roll_dice(): assert roll_dice(5) == ['Q', 'Q', '9', 'J', 'K'] assert roll_dice(0, 1) == ['9'] def test_are_valid(): assert are_valid(['A', 'K']) assert not are_valid(['1', '2', '3']) def test_add_values(): assert add_values(['10', '10', '10', '10']) == 40 assert add_values([]) == -1 def test_num_faces(): assert num_faces(['Q', '9', 'Q', '9'], 'Q') == 2 assert num_faces(None) == -1 On Part B, you will need to define a test function for each of the nine categories. Each test function should have at least five assert statements. (The autograder has over ten assert statements in each category!) Don't just add assert statements for the sake of having five or more. Make sure you test each situation required by the project. Note: The following code abbreviates score_dice as sd, rather than import every constant. test_score_dice.py \"\"\"Test the score_dice module. Name: YOUR NAME Date: THE DATE \"\"\" import score_dice as sd def test_one_pair(): assert sd.calculate_score(['9', '9', '10', 'J', 'K'], sd.PAIR) == 18 assert sd.calculate_score(['9', '10', 'J', 'Q', 'K'], sd.PAIR) == 0","title":"Lab12 - PA1 Unit Tests"},{"location":"cs149fall2023/labs/10_pa1-tests%20copy/#lab12-pa1-unit-tests","text":"Here is a starting point for Part A of the project. Two example assert statements are provided for each test function. You should add at least three more to each function, so that every requirement of the project is tested. Note: Docstrings are generally not required for test functions. But you should still have a module docstring with your name and date. test_dice.py \"\"\"Test the dice module. Name: YOUR NAME Date: THE DATE \"\"\" from dice import roll_dice from dice import are_valid from dice import add_values from dice import num_faces def test_roll_dice(): assert roll_dice(5) == ['Q', 'Q', '9', 'J', 'K'] assert roll_dice(0, 1) == ['9'] def test_are_valid(): assert are_valid(['A', 'K']) assert not are_valid(['1', '2', '3']) def test_add_values(): assert add_values(['10', '10', '10', '10']) == 40 assert add_values([]) == -1 def test_num_faces(): assert num_faces(['Q', '9', 'Q', '9'], 'Q') == 2 assert num_faces(None) == -1 On Part B, you will need to define a test function for each of the nine categories. Each test function should have at least five assert statements. (The autograder has over ten assert statements in each category!) Don't just add assert statements for the sake of having five or more. Make sure you test each situation required by the project. Note: The following code abbreviates score_dice as sd, rather than import every constant. test_score_dice.py \"\"\"Test the score_dice module. Name: YOUR NAME Date: THE DATE \"\"\" import score_dice as sd def test_one_pair(): assert sd.calculate_score(['9', '9', '10', 'J', 'K'], sd.PAIR) == 18 assert sd.calculate_score(['9', '10', 'J', 'Q', 'K'], sd.PAIR) == 0","title":"Lab12 - PA1 Unit Tests"},{"location":"cs149fall2023/labs/11_lab13-list-play/","text":"Lab13 - List Play - Processing list elements Background You will write today's program from scratch. Create a new Python program named list_play with a main method. For each step below, you should add code to the program without replacing prior code. When you are finished, this program will provide you with a reference for working with lists/arrays including initializing, printing, and comparing. Objectives - Use a list to store a sequence of values. - Display the contents of an list with a loop. - Practice manipulating various types of lists. Key Terms initializer list list of values used to instantiate and initialize an array in one step len(list) Returns the number of elements in a list subscript integer value in brackets [ ] that specifies an element of an array/list ArrayIndexOutOfBoundsException error raised when trying to access A[i] where i < 0 or i >= A.length Part 1: Sequentially accessing an array Whenever you are asked to do something to your array and then print it, you should finish the update step first and then have a separate loop to do the printing. 1. Create a function called part_one() that creates a single array of integers that is 6 elements long you can initialize zero values for the initial array. 2. Initialize each of the array elements to the value -1 using a loop of your choice. 3. In another loop, save each element of the array into a string with newlines at the end as shown: array[0] = -1 array[1] = -1 ... Add code to change the value of each element of the array to its subscript. For example, array[3] should hold the value 3. Store the new contents of the array into the return string. You may copy and paste the code from step 3. If you have not seen a list index out of range error, make one by causing a loop to read past the end of the array. What happens? Fix the code that causes the list index out of range. Then add code to re-initialize Your function should return the final return string value(see expected FINAL OUTPUT section below for how this will look if you print the contents of part_one return string. Part 2: Randomly accessing an array Create a function called dice_roll(seed). This function will take in a see value for the random module and return a dice roll value of 1-6. Don't forget to import random at the top of your program to use the random module. You should check that your seed is not None as well. Create a function called part_two(). This should: Create an array of 6 int values [0, 0, 0, 0 ,0 , 0] Create a loop that will iterate at least 25 times. In the loop body: Roll the die. (using the dice_roll method in #1 above where the seed value sent is the index value of the loop for the 25 time 0-24) Based on the result of the roll, add up the corresponding cell of your array. The value of each array element should be the number of times that roll is made. After the loop finishes, print the results of the simulation. For example, the final array should be: [2, 8, 4, 4, 4, 3] you would output: 1 was rolled 2 times. 2 was rolled 8 times. ... see the FINAL OUTPUT below for how this should be formatted with double return statements at the end and return this output as a return string for the function. Part 3: Working with multiple arrays For this exercise, you will need two arrays of double values. Create a main section that sets up the two arrays like this: print(\"Before\") a1 = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0] a2 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] print(store_array_values(a1, a2)) change_array(a1, a2) print(\"After\") print(store_array_values(a1, a2)) Write the first function store_array_values(a1, a2) which will take the two arrays as input then return an return string of the values of the arrays. See the FINAL OUTPUT section below for how this is formatted. Write a second function change_array(a1, a2): This will change the values of the array as follows: Write a loop to change all values of a2 to those in a1. Finally, change the index 0 element of the first array(a1) to 99.0 and the index 5 element of the second array(a2) to 99.0. Check that the contents of the two arrays are indeed different after calling your change_array function. If not, make the appropriate corrections. Check all output with the lab14.exp expected output below. FINAL OUTPUT Here is the expected output file for lab13.exp Submit your final list_play file to https://gradescope.com.","title":"Lab13 - List Play - Processing list elements"},{"location":"cs149fall2023/labs/11_lab13-list-play/#lab13-list-play-processing-list-elements","text":"","title":"Lab13 - List Play - Processing list elements"},{"location":"cs149fall2023/labs/11_lab13-list-play/#background","text":"You will write today's program from scratch. Create a new Python program named list_play with a main method. For each step below, you should add code to the program without replacing prior code. When you are finished, this program will provide you with a reference for working with lists/arrays including initializing, printing, and comparing.","title":"Background"},{"location":"cs149fall2023/labs/11_lab13-list-play/#objectives","text":"- Use a list to store a sequence of values. - Display the contents of an list with a loop. - Practice manipulating various types of lists.","title":"Objectives"},{"location":"cs149fall2023/labs/11_lab13-list-play/#key-terms","text":"initializer list list of values used to instantiate and initialize an array in one step len(list) Returns the number of elements in a list subscript integer value in brackets [ ] that specifies an element of an array/list ArrayIndexOutOfBoundsException error raised when trying to access A[i] where i < 0 or i >= A.length","title":"Key Terms"},{"location":"cs149fall2023/labs/11_lab13-list-play/#part-1-sequentially-accessing-an-array","text":"Whenever you are asked to do something to your array and then print it, you should finish the update step first and then have a separate loop to do the printing. 1. Create a function called part_one() that creates a single array of integers that is 6 elements long you can initialize zero values for the initial array. 2. Initialize each of the array elements to the value -1 using a loop of your choice. 3. In another loop, save each element of the array into a string with newlines at the end as shown: array[0] = -1 array[1] = -1 ... Add code to change the value of each element of the array to its subscript. For example, array[3] should hold the value 3. Store the new contents of the array into the return string. You may copy and paste the code from step 3. If you have not seen a list index out of range error, make one by causing a loop to read past the end of the array. What happens? Fix the code that causes the list index out of range. Then add code to re-initialize Your function should return the final return string value(see expected FINAL OUTPUT section below for how this will look if you print the contents of part_one return string.","title":"Part 1: Sequentially accessing an array"},{"location":"cs149fall2023/labs/11_lab13-list-play/#part-2-randomly-accessing-an-array","text":"Create a function called dice_roll(seed). This function will take in a see value for the random module and return a dice roll value of 1-6. Don't forget to import random at the top of your program to use the random module. You should check that your seed is not None as well. Create a function called part_two(). This should: Create an array of 6 int values [0, 0, 0, 0 ,0 , 0] Create a loop that will iterate at least 25 times. In the loop body: Roll the die. (using the dice_roll method in #1 above where the seed value sent is the index value of the loop for the 25 time 0-24) Based on the result of the roll, add up the corresponding cell of your array. The value of each array element should be the number of times that roll is made. After the loop finishes, print the results of the simulation. For example, the final array should be: [2, 8, 4, 4, 4, 3] you would output: 1 was rolled 2 times. 2 was rolled 8 times. ... see the FINAL OUTPUT below for how this should be formatted with double return statements at the end and return this output as a return string for the function.","title":"Part 2: Randomly accessing an array"},{"location":"cs149fall2023/labs/11_lab13-list-play/#part-3-working-with-multiple-arrays","text":"For this exercise, you will need two arrays of double values. Create a main section that sets up the two arrays like this: print(\"Before\") a1 = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0] a2 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] print(store_array_values(a1, a2)) change_array(a1, a2) print(\"After\") print(store_array_values(a1, a2)) Write the first function store_array_values(a1, a2) which will take the two arrays as input then return an return string of the values of the arrays. See the FINAL OUTPUT section below for how this is formatted. Write a second function change_array(a1, a2): This will change the values of the array as follows: Write a loop to change all values of a2 to those in a1. Finally, change the index 0 element of the first array(a1) to 99.0 and the index 5 element of the second array(a2) to 99.0. Check that the contents of the two arrays are indeed different after calling your change_array function. If not, make the appropriate corrections. Check all output with the lab14.exp expected output below.","title":"Part 3: Working with multiple arrays"},{"location":"cs149fall2023/labs/11_lab13-list-play/#final-output","text":"Here is the expected output file for lab13.exp Submit your final list_play file to https://gradescope.com.","title":"FINAL OUTPUT"},{"location":"cs149fall2023/labs/12_lab15-files/","text":"Lab15 - Files Introduction Pygame is a Python library that makes it possible to program simple 2-D games and animations. In this lab we will modify a simple bouncing ball simulator to add file load and save functionality. On your home computer you may need to install the module pygame via: python3 -m pip install pygame A second goal for today\u2019s lab is to practice working on the Linux command line. DON\u2019T START THONNY. For today, we\u2019ll be using nano as our text editor and we will run our code from the terminal. Bounce Download the following file and open it in nano. (Pay close attention to where the file is being saved!) bounce.py When you start nano, make sure to use the -ET4 flag. This tells nano to insert four spaces when you hit the tab key. Otherwise it will introduce tab characters into your Python code, which is bad. For example: spragunr@l25002:~/bounce_lab$ nano -ET4 bounce.py Take a few minutes to look over the existing code to get a feel for how it works. Assuming you are in the same folder, you should be able to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py Try editing the file to change the initial position, size or color of the bouncing ball. File Loading The next step is to add functionality to bounce.py enabling it to read a file containing ball descriptions. The name of the file will be provided as a command line argument. For, example, the file three_balls.dat contains the following three lines: 100 20 5 100 0 0 200 20 10 0 150 0 400 20 15 0 0 200 Each line describes a single ball with the format: x_position y_position radius red green blue You\u2019ll need to complete the load_game method in the BounceGame class. That method should then be called from the existing main function. In order to read the command line argument you\u2019ll need to import the sys module from the Python standard libraries: import sys After the necessary modifications, it should be possible to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat If everything is working correctly, three balls should appear on the screen with the appropriate sizes and colors. Here is another data file that you can try: many_balls.dat . ============ File Save (If Time) We also want to be able to save the state of the game so that when the program is restarted, all of the balls will appear at the same locations as they were when the game was saved. Add a save_gamemethod to BounceGame and modify the run method so that the save method will be called when the user presses s. By default, the file created should be named saved.dat. Once this is working, modify the program so that saved.dat is opened by default if no command line argument is provided. In other words, this would open three_balls.dat: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat This would open saved.dat: spragunr@l25002:~/bounce_lab$ python bounce.py There is nothing to submit for this lab.","title":"Lab15 - Files"},{"location":"cs149fall2023/labs/12_lab15-files/#lab15-files","text":"","title":"Lab15 - Files"},{"location":"cs149fall2023/labs/12_lab15-files/#introduction","text":"Pygame is a Python library that makes it possible to program simple 2-D games and animations. In this lab we will modify a simple bouncing ball simulator to add file load and save functionality. On your home computer you may need to install the module pygame via: python3 -m pip install pygame A second goal for today\u2019s lab is to practice working on the Linux command line. DON\u2019T START THONNY. For today, we\u2019ll be using nano as our text editor and we will run our code from the terminal.","title":"Introduction"},{"location":"cs149fall2023/labs/12_lab15-files/#bounce","text":"Download the following file and open it in nano. (Pay close attention to where the file is being saved!) bounce.py When you start nano, make sure to use the -ET4 flag. This tells nano to insert four spaces when you hit the tab key. Otherwise it will introduce tab characters into your Python code, which is bad. For example: spragunr@l25002:~/bounce_lab$ nano -ET4 bounce.py Take a few minutes to look over the existing code to get a feel for how it works. Assuming you are in the same folder, you should be able to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py Try editing the file to change the initial position, size or color of the bouncing ball.","title":"Bounce"},{"location":"cs149fall2023/labs/12_lab15-files/#file-loading","text":"The next step is to add functionality to bounce.py enabling it to read a file containing ball descriptions. The name of the file will be provided as a command line argument. For, example, the file three_balls.dat contains the following three lines: 100 20 5 100 0 0 200 20 10 0 150 0 400 20 15 0 0 200 Each line describes a single ball with the format: x_position y_position radius red green blue You\u2019ll need to complete the load_game method in the BounceGame class. That method should then be called from the existing main function. In order to read the command line argument you\u2019ll need to import the sys module from the Python standard libraries: import sys After the necessary modifications, it should be possible to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat If everything is working correctly, three balls should appear on the screen with the appropriate sizes and colors. Here is another data file that you can try: many_balls.dat . ============","title":"File Loading"},{"location":"cs149fall2023/labs/12_lab15-files/#file-save-if-time","text":"We also want to be able to save the state of the game so that when the program is restarted, all of the balls will appear at the same locations as they were when the game was saved. Add a save_gamemethod to BounceGame and modify the run method so that the save method will be called when the user presses s. By default, the file created should be named saved.dat. Once this is working, modify the program so that saved.dat is opened by default if no command line argument is provided. In other words, this would open three_balls.dat: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat This would open saved.dat: spragunr@l25002:~/bounce_lab$ python bounce.py There is nothing to submit for this lab.","title":"File Save (If Time)"},{"location":"cs149fall2023/labs/13_lab16-stars/","text":"Lab16 - Nested Loops (Stars) Background In the good old days, we didn't have fancy computer graphics. So we had to rely on ASCII artLinks to an external site. and the user's imagination. Today's lab will take you back in time! Your task is to draw various pictures of stars ( '*' ) that require the creative use of iteration and decisions. Objectives Write nested for loops and decisions. Solve counting problems with loops. Instructions Download stars.py open it in Thonny. Write your name and today's date in the docstring comment. Run the program. What shape does this pattern produce? Notice the relationship between the row (outer loop) and the number of stars that are printed. Notice the relationship between the col (inner loop) and the place where we move to a new line. Add code to your program to create functions for Patterns A, B, and C as shown below. The functions should include a parameter max_rows that will give the number of rows to output. Pattern A ********** ********* ******** ******* ****** ***** **** *** ** * The leftmost stars are in the leftmost output column. Test your code with an odd number of stars and an even number of stars. HINT : While developing the code, replace each space with another character that is visible. Pattern B * ** *** **** ***** ****** ******* ******** ********* ********** The leftmost star of the last row is in the first position of the output column. HINT : You used star_count in the original example and Pattern A. You should think about using a blank_count variable as well. Pattern C ********** ********* ******** ******* ****** ***** **** *** ** * The top row, leftmost star is in the first position of the output. HINT : It should be the same as Pattern B, except for the way you calculate blank_count and star_count. Generalization Finish the functions patterns A, B, and C. If you finish early, work on the following pattern D. Pattern D (challenge) * *** ***** ******* ********* ******* ***** *** * For an odd number of rows, you would only have one middle line. The middle row leftmost star is in the first position of the output. HINT : Consider writing two loops: one for the top half, and another for the bottom half. You may also want to increment and decrement star_count and blank_count, rather than calculate them directly based on the row number.","title":"Lab16 - Nested Loops (Stars)"},{"location":"cs149fall2023/labs/13_lab16-stars/#lab16-nested-loops-stars","text":"","title":"Lab16 - Nested Loops (Stars)"},{"location":"cs149fall2023/labs/13_lab16-stars/#background","text":"In the good old days, we didn't have fancy computer graphics. So we had to rely on ASCII artLinks to an external site. and the user's imagination. Today's lab will take you back in time! Your task is to draw various pictures of stars ( '*' ) that require the creative use of iteration and decisions.","title":"Background"},{"location":"cs149fall2023/labs/13_lab16-stars/#objectives","text":"Write nested for loops and decisions. Solve counting problems with loops.","title":"Objectives"},{"location":"cs149fall2023/labs/13_lab16-stars/#instructions","text":"Download stars.py open it in Thonny. Write your name and today's date in the docstring comment. Run the program. What shape does this pattern produce? Notice the relationship between the row (outer loop) and the number of stars that are printed. Notice the relationship between the col (inner loop) and the place where we move to a new line. Add code to your program to create functions for Patterns A, B, and C as shown below. The functions should include a parameter max_rows that will give the number of rows to output.","title":"Instructions"},{"location":"cs149fall2023/labs/13_lab16-stars/#pattern-a","text":"********** ********* ******** ******* ****** ***** **** *** ** * The leftmost stars are in the leftmost output column. Test your code with an odd number of stars and an even number of stars. HINT : While developing the code, replace each space with another character that is visible.","title":"Pattern A"},{"location":"cs149fall2023/labs/13_lab16-stars/#pattern-b","text":"* ** *** **** ***** ****** ******* ******** ********* ********** The leftmost star of the last row is in the first position of the output column. HINT : You used star_count in the original example and Pattern A. You should think about using a blank_count variable as well.","title":"Pattern B"},{"location":"cs149fall2023/labs/13_lab16-stars/#pattern-c","text":"********** ********* ******** ******* ****** ***** **** *** ** * The top row, leftmost star is in the first position of the output. HINT : It should be the same as Pattern B, except for the way you calculate blank_count and star_count.","title":"Pattern C"},{"location":"cs149fall2023/labs/13_lab16-stars/#generalization","text":"Finish the functions patterns A, B, and C. If you finish early, work on the following pattern D.","title":"Generalization"},{"location":"cs149fall2023/labs/13_lab16-stars/#pattern-d-challenge","text":"* *** ***** ******* ********* ******* ***** *** * For an odd number of rows, you would only have one middle line. The middle row leftmost star is in the first position of the output. HINT : Consider writing two loops: one for the top half, and another for the bottom half. You may also want to increment and decrement star_count and blank_count, rather than calculate them directly based on the row number.","title":"Pattern D (challenge)"},{"location":"cs149fall2023/labs/1_lab2-thonny/","text":"Lab02: Python Comand Line and Thonny Introduction The goal for this lab is to gain experience editing, compiling and executing Python programs in the terminal and through the Thonny IDE. You may work on this lab individually or in a group of no more than three people. Executing Python in the Terminal Each of the steps below should be completed entirely inside the terminal : no GUI applications allowed. Refer to the Unix Tutorial for Beginners if you need to learn more about Unix commands. Create a cs149 folder on your desktop mkdir cs149 Move into the cs149 directory: cd cs149 Create a folder inside your home directory named lab02 . mkdir lab02 Move into the lab02 directory: cd lab02 Copy the file welcome.py by doing a Right-Click Save-As and saving it to your lab02 folder. OR here is the code: print (\"Welcome to CS149!\") print(\"It's fun.\") cut and paste this into a file called welcome.py and save it in the lab02 folder. 6. Run welcome.py: $ python3 welcome.py Congratulations! You've successfully executed your first Python program. Editing Files in the Terminal Normally, we will be using an Integrated Development Environment (IDE) to edit and compile Python programs. However, it can sometimes be convenient to edit a file directly in the terminal. There are many terminal-based editors. Today we'll try nano because it is easy to use for beginners. Open welcome.py using nano : $ nano welcome.py You should see something like the following: The two lines of text at the bottom show the set of actions available in the editor. The \"^\" symbol indicates the \"Ctrl\" key. For example, pressing Ctrl-O will \"WriteOut\" (save) any changes you have made to the file. Edit the file so that the welcome message says \"It's REALLY fun.\" instead of \"It's fun.\" . Save your changes and exit. Try executing your program again: $ python3 welcome.py You should see the following output Welcome to CS149! It's REALLY fun. Thonny IDE Objectives Use an IDE (Integrated Development Environment). Edit, save, compile, and run a simple Python program. Recognize and correct syntax errors in a Python program. Key Terms source file the Python program as written by the programmer syntax error mistake in the source code that prevents compilation logic error mistake in the program that causes incorrect behavior execute the process of running a program on a computer Part 1: Thonny Editor Thonny is a text editor designed to simplify the process of editing, debugging and executing Python programs. Open Thonny and click \"File \u2013> Open\" from the menu and select your welcome.py file from above. Press the Green play button on the toolbar to execute the Python file(this is the same thing as running the >>python welcome.py in the terminal. >>> %Run welcome.py Welcome to CS149! It's REALLY fun. Edit the file in Thonny to print another line that prints I have edited a file in Thonny. Save your results by pressing the Floppy disk icon then run the program again by pressing the Green play button. You have just run and edited a program using Thonny. Submission for Lab2 Via https://www.gradescope.com submit the Word of the Day in Canvas and your welcome.py file to Gradescope. Acknowledgments This activity is based on a lab developed by Nathan Sprague based on a lab originally developed by Chris Mayfield.","title":"Lab02: Python Comand Line and Thonny"},{"location":"cs149fall2023/labs/1_lab2-thonny/#lab02-python-comand-line-and-thonny","text":"","title":"Lab02: Python Comand Line and Thonny"},{"location":"cs149fall2023/labs/1_lab2-thonny/#introduction","text":"The goal for this lab is to gain experience editing, compiling and executing Python programs in the terminal and through the Thonny IDE. You may work on this lab individually or in a group of no more than three people.","title":"Introduction"},{"location":"cs149fall2023/labs/1_lab2-thonny/#executing-python-in-the-terminal","text":"Each of the steps below should be completed entirely inside the terminal : no GUI applications allowed. Refer to the Unix Tutorial for Beginners if you need to learn more about Unix commands. Create a cs149 folder on your desktop mkdir cs149 Move into the cs149 directory: cd cs149 Create a folder inside your home directory named lab02 . mkdir lab02 Move into the lab02 directory: cd lab02 Copy the file welcome.py by doing a Right-Click Save-As and saving it to your lab02 folder. OR here is the code: print (\"Welcome to CS149!\") print(\"It's fun.\") cut and paste this into a file called welcome.py and save it in the lab02 folder. 6. Run welcome.py: $ python3 welcome.py Congratulations! You've successfully executed your first Python program.","title":"Executing Python in the Terminal"},{"location":"cs149fall2023/labs/1_lab2-thonny/#editing-files-in-the-terminal","text":"Normally, we will be using an Integrated Development Environment (IDE) to edit and compile Python programs. However, it can sometimes be convenient to edit a file directly in the terminal. There are many terminal-based editors. Today we'll try nano because it is easy to use for beginners. Open welcome.py using nano : $ nano welcome.py You should see something like the following: The two lines of text at the bottom show the set of actions available in the editor. The \"^\" symbol indicates the \"Ctrl\" key. For example, pressing Ctrl-O will \"WriteOut\" (save) any changes you have made to the file. Edit the file so that the welcome message says \"It's REALLY fun.\" instead of \"It's fun.\" . Save your changes and exit. Try executing your program again: $ python3 welcome.py You should see the following output Welcome to CS149! It's REALLY fun.","title":"Editing Files in the Terminal"},{"location":"cs149fall2023/labs/1_lab2-thonny/#thonny-ide","text":"","title":"Thonny IDE"},{"location":"cs149fall2023/labs/1_lab2-thonny/#objectives","text":"Use an IDE (Integrated Development Environment). Edit, save, compile, and run a simple Python program. Recognize and correct syntax errors in a Python program.","title":"Objectives"},{"location":"cs149fall2023/labs/1_lab2-thonny/#key-terms","text":"source file the Python program as written by the programmer syntax error mistake in the source code that prevents compilation logic error mistake in the program that causes incorrect behavior execute the process of running a program on a computer","title":"Key Terms"},{"location":"cs149fall2023/labs/1_lab2-thonny/#part-1-thonny-editor","text":"Thonny is a text editor designed to simplify the process of editing, debugging and executing Python programs. Open Thonny and click \"File \u2013> Open\" from the menu and select your welcome.py file from above. Press the Green play button on the toolbar to execute the Python file(this is the same thing as running the >>python welcome.py in the terminal. >>> %Run welcome.py Welcome to CS149! It's REALLY fun. Edit the file in Thonny to print another line that prints I have edited a file in Thonny. Save your results by pressing the Floppy disk icon then run the program again by pressing the Green play button. You have just run and edited a program using Thonny.","title":"Part 1: Thonny Editor"},{"location":"cs149fall2023/labs/1_lab2-thonny/#submission-for-lab2","text":"Via https://www.gradescope.com submit the Word of the Day in Canvas and your welcome.py file to Gradescope. Acknowledgments This activity is based on a lab developed by Nathan Sprague based on a lab originally developed by Chris Mayfield.","title":"Submission for Lab2"},{"location":"cs149fall2023/labs/2_lab3-style/","text":"Lab03: Style guide and pep8 Source: https://xkcd.com/1513/ Background PEP8 - Python Style When writing in English, readability can be impacted by the way the text is laid out on the page. We use conventions, like indenting the first sentence of a paragraph, to make it easier to understand written text. Programming languages are the same. Programs are easier to read if we agree on a set of conventions for how the code should be formatted. PEP 8 is the official document that describes the standard formatting conventions for Python code. (Here is a prettier version: https://pep8.org/ .) You don\u2019t need to read and understand the full PEP 8 document now, but you may want to look it over to get a feel for the issues that it addresses. Instructions for installing Thonny and flake8 configuration Comments When writing your programs it is helpful for us if you include the assignment name, a description of the assignment, your name, the due date and an Honor Code statement to let us know where you got help from on the assignment. These should be done in a block at the top of your program that looks like this: \"\"\" Lab 03- Style lab - fixing styles and testing online grading tool submission. Author: Alvin Chao Version: 1-26-22 Honor Code: I got help on the output statements for the lab from TA John \"\"\" Part 1 Running flake8 Through Thonny When you submit homework assignments for CS 149 they will automatically be checked against the PEP 8 formatting requirements using a tool named flake8 . You will only receive full credit if you pass all of these automated style checks. You can install flake8 in Thonny by selecting Tools -> Manage Packages\u2026 and then finding and installing flake8 as well as pep8-naming . After installation, you should be able to check your file by typing the following into the Thonny shell: >>> !flake8 payroll.py The exclamation point tells the Python interpreter the command should not be interpreted as Python code. Note that the Gradescope autograder is configured to be slightly more lenient than the default settings for flake8 . We allow line lengths up to 100 and disable checks for some errors and warnings. If you want to run flake8 with exactly the same settings as Gradescope, you can copy the following file into the same directory as your python code: setup.cfg Part 2 Example Program If you haven't already, you should create a top-level CS149 folder to organize all your labs and other assignments for the semester. Then create a lab03 folder for today's lab. (If you logged in as student today, please log out and log back in with your own account.) Download: payroll.py >>> !flake8 payroll.py You should see the following errors: payroll.py:1:27: E231 missing whitespace after ',' payroll.py:5:43: E251 unexpected spaces around keyword / parameter equals payroll.py:6:2: N816 variable 'payRate' in global scope should not be mixedCase payroll.py:7:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:9: E225 missing whitespace around operator payroll.py:11:39: W292 no newline at end of file Fix all style errors by repeatedly running flake8 and submit to Gradescope when your file checks all style issues. Submission: At the end of class today, or by 11:00 PM tomorrow if you would like more time, submit a corrected version of payroll.py via Gradescope . Your code must pass flake8 style without any warnings AND meet all the requirements outlined below. (It must also compile and run correctly; don't change the program's behavior.) If you cannot get this working in Gradescope you may upload to Canvas, but points will be deducted. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the program. It's okay if your files are similar or identical, as long as both of your names are present at the top. A. Comments # An inline comment must contain only one # and a space after it. \"\"\" *Block comments should end with the closing statement on its own line. \"\"\" B. Names All names should be descriptive and readable. ( sub_total rather than s , grade rather than grd ) Multiple-word names should use underscores to separate words. ( sub_total not subTotal ) Variable and method names should begin with a lowercase letter, and: Variable names should be nouns or noun phrases. ( student_name or sub_total ) Function names should be verbs or verb phrases. ( print_line or add_column ) Class names should begin with a capital letter and use title or CapWords case. ( HelloWorld ) Constant names should be all caps with an underscore separator. ( PI or INTEREST_RATE ) C. Declarations CENTIMETERS\\_PER\\_INCH = 2.54 centimeters = inches \\* CENTIMETERS\\_PER\\_INCH // NOT inches \\* 2.54 All constants should be named and initialized at the top of the function in which they are used. All variables should also be declared at the top of the function, directly after any constant declaraions. D. Literals Numeric literals should be of the correct type for the context in which they are used. # integer expressions should use integer literals like a a = 2 # double expressions should use double literals like b b = 2.0 average = (x + y) / 2.0 # NOT 2, which is an integer E. Indentation Subsections of code should be indented consistently with four spaces per Python requirements. Always use four space characters, not tab characters, for indentation. Statements too long for one line should be indented on subsequent lines. F. Whitespace There should be a space after commas, and #'s. Use whitespace to separate logical segments of code. There should be a blank line after variable declarations. Lines should be kept to a short length (< 80 - 100 chars). You should be able to see the full line in your text editor. Binary operators should be separated from their operands by a single space. ( sum = my_grade + your_grade ) Unary operators should not be separated by a space. ( my_grade++ )","title":"2 lab3 style"},{"location":"cs149fall2023/labs/2_lab3-style/#lab03-style-guide-and-pep8","text":"Source: https://xkcd.com/1513/","title":"Lab03: Style guide and pep8"},{"location":"cs149fall2023/labs/2_lab3-style/#background","text":"","title":"Background"},{"location":"cs149fall2023/labs/2_lab3-style/#pep8-python-style","text":"When writing in English, readability can be impacted by the way the text is laid out on the page. We use conventions, like indenting the first sentence of a paragraph, to make it easier to understand written text. Programming languages are the same. Programs are easier to read if we agree on a set of conventions for how the code should be formatted. PEP 8 is the official document that describes the standard formatting conventions for Python code. (Here is a prettier version: https://pep8.org/ .) You don\u2019t need to read and understand the full PEP 8 document now, but you may want to look it over to get a feel for the issues that it addresses. Instructions for installing Thonny and flake8 configuration","title":"PEP8 - Python Style"},{"location":"cs149fall2023/labs/2_lab3-style/#comments","text":"When writing your programs it is helpful for us if you include the assignment name, a description of the assignment, your name, the due date and an Honor Code statement to let us know where you got help from on the assignment. These should be done in a block at the top of your program that looks like this: \"\"\" Lab 03- Style lab - fixing styles and testing online grading tool submission. Author: Alvin Chao Version: 1-26-22 Honor Code: I got help on the output statements for the lab from TA John \"\"\"","title":"Comments"},{"location":"cs149fall2023/labs/2_lab3-style/#part-1","text":"","title":"Part 1"},{"location":"cs149fall2023/labs/2_lab3-style/#running-flake8-through-thonny","text":"When you submit homework assignments for CS 149 they will automatically be checked against the PEP 8 formatting requirements using a tool named flake8 . You will only receive full credit if you pass all of these automated style checks. You can install flake8 in Thonny by selecting Tools -> Manage Packages\u2026 and then finding and installing flake8 as well as pep8-naming . After installation, you should be able to check your file by typing the following into the Thonny shell: >>> !flake8 payroll.py The exclamation point tells the Python interpreter the command should not be interpreted as Python code. Note that the Gradescope autograder is configured to be slightly more lenient than the default settings for flake8 . We allow line lengths up to 100 and disable checks for some errors and warnings. If you want to run flake8 with exactly the same settings as Gradescope, you can copy the following file into the same directory as your python code: setup.cfg","title":"Running flake8 Through Thonny"},{"location":"cs149fall2023/labs/2_lab3-style/#part-2","text":"","title":"Part 2"},{"location":"cs149fall2023/labs/2_lab3-style/#example-program","text":"If you haven't already, you should create a top-level CS149 folder to organize all your labs and other assignments for the semester. Then create a lab03 folder for today's lab. (If you logged in as student today, please log out and log back in with your own account.) Download: payroll.py >>> !flake8 payroll.py You should see the following errors: payroll.py:1:27: E231 missing whitespace after ',' payroll.py:5:43: E251 unexpected spaces around keyword / parameter equals payroll.py:6:2: N816 variable 'payRate' in global scope should not be mixedCase payroll.py:7:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:9: E225 missing whitespace around operator payroll.py:11:39: W292 no newline at end of file Fix all style errors by repeatedly running flake8 and submit to Gradescope when your file checks all style issues. Submission: At the end of class today, or by 11:00 PM tomorrow if you would like more time, submit a corrected version of payroll.py via Gradescope . Your code must pass flake8 style without any warnings AND meet all the requirements outlined below. (It must also compile and run correctly; don't change the program's behavior.) If you cannot get this working in Gradescope you may upload to Canvas, but points will be deducted. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the program. It's okay if your files are similar or identical, as long as both of your names are present at the top.","title":"Example Program"},{"location":"cs149fall2023/labs/2_lab3-style/#a-comments","text":"# An inline comment must contain only one # and a space after it. \"\"\" *Block comments should end with the closing statement on its own line. \"\"\"","title":"A. Comments"},{"location":"cs149fall2023/labs/2_lab3-style/#b-names","text":"All names should be descriptive and readable. ( sub_total rather than s , grade rather than grd ) Multiple-word names should use underscores to separate words. ( sub_total not subTotal ) Variable and method names should begin with a lowercase letter, and: Variable names should be nouns or noun phrases. ( student_name or sub_total ) Function names should be verbs or verb phrases. ( print_line or add_column ) Class names should begin with a capital letter and use title or CapWords case. ( HelloWorld ) Constant names should be all caps with an underscore separator. ( PI or INTEREST_RATE )","title":"B. Names"},{"location":"cs149fall2023/labs/2_lab3-style/#c-declarations","text":"CENTIMETERS\\_PER\\_INCH = 2.54 centimeters = inches \\* CENTIMETERS\\_PER\\_INCH // NOT inches \\* 2.54 All constants should be named and initialized at the top of the function in which they are used. All variables should also be declared at the top of the function, directly after any constant declaraions.","title":"C. Declarations"},{"location":"cs149fall2023/labs/2_lab3-style/#d-literals","text":"Numeric literals should be of the correct type for the context in which they are used. # integer expressions should use integer literals like a a = 2 # double expressions should use double literals like b b = 2.0 average = (x + y) / 2.0 # NOT 2, which is an integer","title":"D. Literals"},{"location":"cs149fall2023/labs/2_lab3-style/#e-indentation","text":"Subsections of code should be indented consistently with four spaces per Python requirements. Always use four space characters, not tab characters, for indentation. Statements too long for one line should be indented on subsequent lines.","title":"E. Indentation"},{"location":"cs149fall2023/labs/2_lab3-style/#f-whitespace","text":"There should be a space after commas, and #'s. Use whitespace to separate logical segments of code. There should be a blank line after variable declarations. Lines should be kept to a short length (< 80 - 100 chars). You should be able to see the full line in your text editor. Binary operators should be separated from their operands by a single space. ( sum = my_grade + your_grade ) Unary operators should not be separated by a space. ( my_grade++ )","title":"F. Whitespace"},{"location":"cs149fall2023/labs/3_lab4-variables/","text":"Lab 4 - Variables Introduction ============ This activity will help you practice some of the concepts from this week and prepare for the homework problems next week. Specifically you will practice: Converting user input to either a floating point number (float), like 3.14159, or an integer (int), like 314159. Using floating point division (/), integer division (//), and the remainder, or mod, operator (%) in the appropriate situations. Problem: Splitting feet into miles, furlongs, and feet. ============ For this problem you are going to write a program called feet_conversion.py to use integer division and remainders to take a total number of feet and split it into miles, furlongs, and feet. 1 mile is 5280 feet and 1 furlong is 660 feet (it\u2019s some old English measure nobody uses anymore, but let\u2019s do it anyways!). Enter a total number of feet: 12345 12345 total feet is 2 mile(s), 2 furlong(s), and 465 feet. Hint 1: Figure out how to solve the problem yourself by hand on paper. You can\u2019t code something you don\u2019t know how to solve. Hint 2: You need to use integer division // and the mod/remainder % operators. Hint 3: You probably want a variable for the remaining feet. For instance, before you\u2019ve figured out the answer above, the remaining feet is 12345. But once you figure out that there are two full miles in 12345 feet (2 full miles is 10560 feet), then the remaining feet you have to deal with in your calculation is 1785 feet. Then how many full furlongs are in 1785 feet? Well, 2 again, since 660\u00d72\\=1320. And finally after we remove those 1320 from 1785 the remaining feet is 465. Hint 4: Notice how close the words remaining and remainder are. Submission: Submit this to https://canvas.jmu.edu","title":"Lab 4 - Variables"},{"location":"cs149fall2023/labs/3_lab4-variables/#lab-4-variables","text":"","title":"Lab 4 - Variables"},{"location":"cs149fall2023/labs/3_lab4-variables/#introduction","text":"============ This activity will help you practice some of the concepts from this week and prepare for the homework problems next week. Specifically you will practice: Converting user input to either a floating point number (float), like 3.14159, or an integer (int), like 314159. Using floating point division (/), integer division (//), and the remainder, or mod, operator (%) in the appropriate situations.","title":"Introduction"},{"location":"cs149fall2023/labs/3_lab4-variables/#problem-splitting-feet-into-miles-furlongs-and-feet","text":"============ For this problem you are going to write a program called feet_conversion.py to use integer division and remainders to take a total number of feet and split it into miles, furlongs, and feet. 1 mile is 5280 feet and 1 furlong is 660 feet (it\u2019s some old English measure nobody uses anymore, but let\u2019s do it anyways!). Enter a total number of feet: 12345 12345 total feet is 2 mile(s), 2 furlong(s), and 465 feet. Hint 1: Figure out how to solve the problem yourself by hand on paper. You can\u2019t code something you don\u2019t know how to solve. Hint 2: You need to use integer division // and the mod/remainder % operators. Hint 3: You probably want a variable for the remaining feet. For instance, before you\u2019ve figured out the answer above, the remaining feet is 12345. But once you figure out that there are two full miles in 12345 feet (2 full miles is 10560 feet), then the remaining feet you have to deal with in your calculation is 1785 feet. Then how many full furlongs are in 1785 feet? Well, 2 again, since 660\u00d72\\=1320. And finally after we remove those 1320 from 1785 the remaining feet is 465. Hint 4: Notice how close the words remaining and remainder are.","title":"Problem: Splitting feet into miles, furlongs, and feet."},{"location":"cs149fall2023/labs/3_lab4-variables/#submission","text":"Submit this to https://canvas.jmu.edu","title":"Submission:"},{"location":"cs149fall2023/labs/4_lab6-if-then/","text":"Lab 6 If-then-else CSCard Lab Introduction ============ We will be expanding on the use of submissions and testing via https://gradescope.com. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the code. It's okay if your files are similar or identical, as long as both of your names are present at the top. Objectives Practice validation and if-else-if statements. More gradescope submission practice. Part 1: Understand the Problem Write a program to prepare the monthly charge account statement for a customer of CS Card International, a credit card company. The program should take as input the previous balance on the account and the total amount of additional charges during the month. It should then compute the interest for the month, the total new balance (i.e., the previous balance plus additional charges plus interest), and the minimum payment due. The interest is $0 if the previous balance was $0.00 or less. If the previous balance was greater than $0, the interest is 2% of the total owed (i.e., previous balance plus additional charges).EXAMPLE: If the previous balance is $50.00 and the additional charges are $50.00, the interest would be $2.00. But if the previous balance is $0.00, the interest is $0 no matter what. The minimum payment based on the table below: $0.00 for new balance less than $0 new balance for new balance between $0 and $49.99 (inclusive) $50.00 for new balance between $50 and $300 (inclusiive) 20% of the new balance for new balance over $300 EXAMPLE: If the new balance is $38.00 then the person must pay the whole $38.00; if the balance is $128 then the person must pay $50; if the balance is $350 the minimum payment is $70. Make sure you understand the calculations before trying to program. Write the algorithm in pseudocode on paper, and test your algorithm with some examples to see how it works. ============ Part 2: Program the Solution Much of the solution including output formatting has already been done for you. Use the variables provided and keep all output statements exactly as they are. Download a copy of credit_card.py as a starting point. Fill in the Docstring comment for credit_card.py. Get the provided code to run. Write the calculation portion and min payment portion, returning bogus values for interest and minimum payments for now. Using the variables provided, code the input statements as described in credit_card.py. You must ensure that the program will not crash if the user enters a bad value.(values must be greater than -5000 and less than 5000 or it should return a 0) Code the rest of the program as if the two calculations were finished, and then test your program. You should see that the code properly reads in a value for the balance and additional charges and outputs the values in the correct format. (The numbers should be wrong until you finish your coding.) For each calculation (interest and minimum payment), you should code the proper solution. Think about test cases. Test the program with a variety of data. Include positive balance, negative balance, and 0 balance. When you are sure that your code is working properly. Make sure the output still looks okay.","title":"Lab 6  If-then-else CSCard Lab"},{"location":"cs149fall2023/labs/4_lab6-if-then/#lab-6-if-then-else-cscard-lab","text":"","title":"Lab 6  If-then-else CSCard Lab"},{"location":"cs149fall2023/labs/4_lab6-if-then/#introduction","text":"============ We will be expanding on the use of submissions and testing via https://gradescope.com. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the code. It's okay if your files are similar or identical, as long as both of your names are present at the top.","title":"Introduction"},{"location":"cs149fall2023/labs/4_lab6-if-then/#objectives","text":"Practice validation and if-else-if statements. More gradescope submission practice.","title":"Objectives"},{"location":"cs149fall2023/labs/4_lab6-if-then/#part-1-understand-the-problem","text":"Write a program to prepare the monthly charge account statement for a customer of CS Card International, a credit card company. The program should take as input the previous balance on the account and the total amount of additional charges during the month. It should then compute the interest for the month, the total new balance (i.e., the previous balance plus additional charges plus interest), and the minimum payment due. The interest is $0 if the previous balance was $0.00 or less. If the previous balance was greater than $0, the interest is 2% of the total owed (i.e., previous balance plus additional charges).EXAMPLE: If the previous balance is $50.00 and the additional charges are $50.00, the interest would be $2.00. But if the previous balance is $0.00, the interest is $0 no matter what. The minimum payment based on the table below: $0.00 for new balance less than $0 new balance for new balance between $0 and $49.99 (inclusive) $50.00 for new balance between $50 and $300 (inclusiive) 20% of the new balance for new balance over $300 EXAMPLE: If the new balance is $38.00 then the person must pay the whole $38.00; if the balance is $128 then the person must pay $50; if the balance is $350 the minimum payment is $70. Make sure you understand the calculations before trying to program. Write the algorithm in pseudocode on paper, and test your algorithm with some examples to see how it works. ============","title":"Part 1: Understand the Problem"},{"location":"cs149fall2023/labs/4_lab6-if-then/#part-2-program-the-solution","text":"Much of the solution including output formatting has already been done for you. Use the variables provided and keep all output statements exactly as they are. Download a copy of credit_card.py as a starting point. Fill in the Docstring comment for credit_card.py. Get the provided code to run. Write the calculation portion and min payment portion, returning bogus values for interest and minimum payments for now. Using the variables provided, code the input statements as described in credit_card.py. You must ensure that the program will not crash if the user enters a bad value.(values must be greater than -5000 and less than 5000 or it should return a 0) Code the rest of the program as if the two calculations were finished, and then test your program. You should see that the code properly reads in a value for the balance and additional charges and outputs the values in the correct format. (The numbers should be wrong until you finish your coding.) For each calculation (interest and minimum payment), you should code the proper solution. Think about test cases. Test the program with a variety of data. Include positive balance, negative balance, and 0 balance. When you are sure that your code is working properly. Make sure the output still looks okay.","title":"Part 2: Program the Solution"},{"location":"cs149fall2023/labs/5_lab7-circle/","text":"Lab 7 - Circle Lab - Writing and Calling functions Introduction ============ We will be expanding on the use of submissions and testing via https://gradescope.com. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the code. It's okay if your files are similar or identical, as long as both of your names are present at the top. Objectives Create a program with only functions. Stub out so the functions can be written and tested incrementally. Become more familiar with the math module in Python. Document return types Key Terms return type The data type the function returns. return value The value that the function returns via the return statement. function stub An empty or incomplete function that returns 0, \"\", false, etc. Part 1: Creating Stubs We are going to create a small program to carry out some geometric operations. Note that Python is a loosely typed language so return value types should be specified in :return docstring comments. It will include a couple of utility functions to make input and printing easier, as well as the calculation of the area of a circle and the volume of a sphere. (Normally, you would design one program to do the geometry and another one to deal with the utility functions, but for today's lab we are putting them together in one program.) Download and open the circle_driver.py program. Do not be concerned with what it contains just yet. Create a new source file, circle_play.py. Create the top level docstring comment including your name and today's date and honor code statement. Define each of the following functions: print_greeting will simply print some lines to greet the user upon running the application. Create a function stub using the following header: def print_greeting() This header says that the function is named print_greeting, and accepts no parameters. Create function documentation. In this case you only need to describe what this function will do. enter_radius - create a function header that looks like this: def enter_radius() This header says the function is named enter_radius, and accepts no parameters. Add function documentation for this function as follows: (note the use of the :return label) \"\"\" Displays a prompt to the user, then reads in a float value that the user has entered. Returns: (float): a float value representing a radius \"\"\" Create the function block, and add in a single return statement, return -999.0 This is a \"stubbed\" return statement that returns a value of the correct type, but is not the value we will eventually need. calculate_area - This function will calculate the area of a circle with a given radius. Create a function header named calculate_area and has a single parameter, a float value representing a radius. Create the function block with a return statement to return the value -888.0. (These ar meaningless values, but if we call the function and its not done, we'll know that by the return value.) Add your documentation including a :param tag. calculate_volume - This function will calculate the volume of a sphere with a given radius. Create a function header, function block, return statement, and documentation. The stubbed return value should be -777.0. Save your work at this point, before implementing any of the functions . You should not have any errors. If you do, check to make sure that each function in circle_play is created exactly as described above. Run circle_driver from Thonny or using the command line. What output do you see? Does it make any sense? Now we will begin to fill in our stubbed functions. ============ Part 2: Creating a Void function With No Parameters Begin with print_greeting, which should print the following. (Note that < blank line > just means that you should print a newline there.) Welcome to the CS149 Circle Calculator < blank line > This application will calculate the area of a circle and/or volume of a sphere. < blank line > Create the code to print these four lines. Run it from the command line. You are currently testing the 1st function, so pass the argument 1 to the main function as follows: python3 circle_driver.py 1 Does your greeting print correctly? Make any corrections that you need before moving on. Explanation : The circle_driver is designed to let you test each of your functions separately. In this case, you have built a single function, so you are testing just that function. The function stubs enable you to run the entire program, but then just fill in the parts that you are ready to complete and test. By testing individual functions, you can focus on getting that function written correctly before moving on to the next one. Part 3: Creating a Value Returning function With No Parameters Next you'll fill in the enter_radius function. This function displays a standard prompt, \"Enter the radius: \" and then reads in the radius from the user input. Output the prompt \"Enter the radius: \". The cursor should remain on the same line, one space to the right of the colon and read the value the user enters into a radius variable. Change the return statement to return the value that the user enters. Test your program on the command line running python3 circle_driver.py 2. This time enter the number 2 as the command line argument. What happens? Part 4: Creating Value-Returning functions With Parameters Finally, you will fill in each of the calculation functions. You are going to calculate the area of a circle and the volume of a sphere. The area of a circle is defined as A = \u03c0 r 2. The volume of a sphere is V = 4/3 \u03c0 r 3. Use these formulas to come up with a few test cases for each function. Write down your examples on a piece of paper, so you can be sure your code works as expected. Begin with the calculate_area function. You may find that the math module is helpful for this step. First, there is a constant defined in that module called pi. Since the constant is in another module, we must use the qualified name math.pi to access it. Define the variables that you will need. Create the calculation, using math.pi for \u03c0. Instead of the stub value in your return statement, return the area that you calculate. Test your work passing the number 3 in for the command line argument. Check your area values against the ones that you calculated by hand. Work with your function until it runs correctly. Create the calculate_volume function and test as before using command line argument 4 to test your volume function. Finally, test the entire application running the application with no arguments. It should run each function in turn. Upload your completed circle_play.py program to Gradescope . To receive full credit for this assignment, all 4 functions must work correctly. You will not receive full credit for this lab unless your code passes all of the automated formatting tests. Testing Greeting Welcome to the CS149 Circle Calculator This application will calculate the area of a circle and/or volume of a sphere. Testing Input Enter the radius: 5 Enter the radius: 10 Enter the radius: 15 The values you entered were: 5.0 10.0 15.0 A circle of radius 5.0 has area of 78.53981633974483 A circle of radius 10.0 has area of 314.1592653589793 A circle of radius 15.0 has area of 706.8583470577034 A sphere of radius 5.0 has volume of 523.5987755982989 A sphere of radius 10.0 has volume of 4188.790204786391 A sphere of radius 15.0 has volume of 14137.166941154068 This lab was originally created by Nancy Harris and modified by Nathan Sprague.","title":"Lab 7 - Circle Lab - Writing and Calling functions"},{"location":"cs149fall2023/labs/5_lab7-circle/#lab-7-circle-lab-writing-and-calling-functions","text":"","title":"Lab 7 - Circle Lab - Writing and Calling functions"},{"location":"cs149fall2023/labs/5_lab7-circle/#introduction","text":"============ We will be expanding on the use of submissions and testing via https://gradescope.com. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the code. It's okay if your files are similar or identical, as long as both of your names are present at the top.","title":"Introduction"},{"location":"cs149fall2023/labs/5_lab7-circle/#objectives","text":"Create a program with only functions. Stub out so the functions can be written and tested incrementally. Become more familiar with the math module in Python. Document return types","title":"Objectives"},{"location":"cs149fall2023/labs/5_lab7-circle/#key-terms","text":"return type The data type the function returns. return value The value that the function returns via the return statement. function stub An empty or incomplete function that returns 0, \"\", false, etc.","title":"Key Terms"},{"location":"cs149fall2023/labs/5_lab7-circle/#part-1-creating-stubs","text":"We are going to create a small program to carry out some geometric operations. Note that Python is a loosely typed language so return value types should be specified in :return docstring comments. It will include a couple of utility functions to make input and printing easier, as well as the calculation of the area of a circle and the volume of a sphere. (Normally, you would design one program to do the geometry and another one to deal with the utility functions, but for today's lab we are putting them together in one program.) Download and open the circle_driver.py program. Do not be concerned with what it contains just yet. Create a new source file, circle_play.py. Create the top level docstring comment including your name and today's date and honor code statement. Define each of the following functions: print_greeting will simply print some lines to greet the user upon running the application. Create a function stub using the following header: def print_greeting() This header says that the function is named print_greeting, and accepts no parameters. Create function documentation. In this case you only need to describe what this function will do. enter_radius - create a function header that looks like this: def enter_radius() This header says the function is named enter_radius, and accepts no parameters. Add function documentation for this function as follows: (note the use of the :return label) \"\"\" Displays a prompt to the user, then reads in a float value that the user has entered. Returns: (float): a float value representing a radius \"\"\" Create the function block, and add in a single return statement, return -999.0 This is a \"stubbed\" return statement that returns a value of the correct type, but is not the value we will eventually need. calculate_area - This function will calculate the area of a circle with a given radius. Create a function header named calculate_area and has a single parameter, a float value representing a radius. Create the function block with a return statement to return the value -888.0. (These ar meaningless values, but if we call the function and its not done, we'll know that by the return value.) Add your documentation including a :param tag. calculate_volume - This function will calculate the volume of a sphere with a given radius. Create a function header, function block, return statement, and documentation. The stubbed return value should be -777.0. Save your work at this point, before implementing any of the functions . You should not have any errors. If you do, check to make sure that each function in circle_play is created exactly as described above. Run circle_driver from Thonny or using the command line. What output do you see? Does it make any sense? Now we will begin to fill in our stubbed functions. ============","title":"Part 1: Creating Stubs"},{"location":"cs149fall2023/labs/5_lab7-circle/#part-2-creating-a-void-function-with-no-parameters","text":"Begin with print_greeting, which should print the following. (Note that < blank line > just means that you should print a newline there.) Welcome to the CS149 Circle Calculator < blank line > This application will calculate the area of a circle and/or volume of a sphere. < blank line > Create the code to print these four lines. Run it from the command line. You are currently testing the 1st function, so pass the argument 1 to the main function as follows: python3 circle_driver.py 1 Does your greeting print correctly? Make any corrections that you need before moving on. Explanation : The circle_driver is designed to let you test each of your functions separately. In this case, you have built a single function, so you are testing just that function. The function stubs enable you to run the entire program, but then just fill in the parts that you are ready to complete and test. By testing individual functions, you can focus on getting that function written correctly before moving on to the next one.","title":"Part 2: Creating a Void function With No Parameters"},{"location":"cs149fall2023/labs/5_lab7-circle/#part-3-creating-a-value-returning-function-with-no-parameters","text":"Next you'll fill in the enter_radius function. This function displays a standard prompt, \"Enter the radius: \" and then reads in the radius from the user input. Output the prompt \"Enter the radius: \". The cursor should remain on the same line, one space to the right of the colon and read the value the user enters into a radius variable. Change the return statement to return the value that the user enters. Test your program on the command line running python3 circle_driver.py 2. This time enter the number 2 as the command line argument. What happens?","title":"Part 3: Creating a Value Returning function With No Parameters"},{"location":"cs149fall2023/labs/5_lab7-circle/#part-4-creating-value-returning-functions-with-parameters","text":"Finally, you will fill in each of the calculation functions. You are going to calculate the area of a circle and the volume of a sphere. The area of a circle is defined as A = \u03c0 r 2. The volume of a sphere is V = 4/3 \u03c0 r 3. Use these formulas to come up with a few test cases for each function. Write down your examples on a piece of paper, so you can be sure your code works as expected. Begin with the calculate_area function. You may find that the math module is helpful for this step. First, there is a constant defined in that module called pi. Since the constant is in another module, we must use the qualified name math.pi to access it. Define the variables that you will need. Create the calculation, using math.pi for \u03c0. Instead of the stub value in your return statement, return the area that you calculate. Test your work passing the number 3 in for the command line argument. Check your area values against the ones that you calculated by hand. Work with your function until it runs correctly. Create the calculate_volume function and test as before using command line argument 4 to test your volume function. Finally, test the entire application running the application with no arguments. It should run each function in turn. Upload your completed circle_play.py program to Gradescope . To receive full credit for this assignment, all 4 functions must work correctly. You will not receive full credit for this lab unless your code passes all of the automated formatting tests. Testing Greeting Welcome to the CS149 Circle Calculator This application will calculate the area of a circle and/or volume of a sphere. Testing Input Enter the radius: 5 Enter the radius: 10 Enter the radius: 15 The values you entered were: 5.0 10.0 15.0 A circle of radius 5.0 has area of 78.53981633974483 A circle of radius 10.0 has area of 314.1592653589793 A circle of radius 15.0 has area of 706.8583470577034 A sphere of radius 5.0 has volume of 523.5987755982989 A sphere of radius 10.0 has volume of 4188.790204786391 A sphere of radius 15.0 has volume of 14137.166941154068 This lab was originally created by Nancy Harris and modified by Nathan Sprague.","title":"Part 4: Creating Value-Returning functions With Parameters"},{"location":"cs149fall2023/labs/6_lab8-list-tuple/","text":"Lab 8 - List-Tuple Lab Introduction In this lab you will gain some practice with lists and tuples. Docstring Guide ============ Problem: ASCII Art Roses Long ago, before computers could display high resolution graphics on 4K monitors with 300 dpi pixel density and churn out stunning real-time 3D graphics at 60 frames per second, many people spent a lot of time making art on computers out of text using the ASCII character set. Like this: ......................................... ...####...####....###...##..##...####.... ..##.....##........##...##..##..##..##... ..##......###......##...######...#####... ..##........##.....##.......##......##... ...####..####.....####......##....###.... ......................................... You are going to write a program to output five ASCII art roses. Like this: @-->---->--- @----->->-- @----->------->-- @->->---------- @->->- Each rose starts with an @ followed by a section of dashes - before the first thorn >, followed by a second section of dashes to a second thorn, followed by a final section of dashes -. For your first pass at this algorithm, you should have five variables: rose1, rose2, rose3, rose4, and rose5. Each variable should refer to a tuple with 3 integers denoting the number of dashes ('-') in each of the rose\u2019s sections. For example, the first rose in the figure above has two dashes in the first section, four dashes in the second section, and three dashes in the final section, so its tuple representation is (2, 4, 3). Your code should use the variables rose1, rose2, rose3, rose4, and rose5 to output each rose, one per line. The roses should be aligned so that their right-hand sides line up and the longest rose has no spaces before its petals (the '@'). Any rose shorter than the longest rose should have an appropriate number of spaces before the '@'. Here is starter code: \"\"\" Rose Variables \"\"\" rose1 = ( 2 , 4 , 3 ) rose2 = ( 5 , 1 , 2 ) rose3 = ( 5 , 7 , 2 ) rose4 = ( 1 , 1 , 10 ) rose5 = ( 1 , 1 , 1 ) \"\"\" Your code here \"\"\" Hints Can you calculate the length of rose 1 using the data in rose1? Can you put the lengths of all five roses into a list? If so, can you use list functions to find the length of the longest rose? Remember that you can multiply a string by an integer to duplicate it. So \"abc\" * 3 is \"abcabcabc\". To right justify a string you can use the rjust method. Submit your roses.py file to Gradescope. This lab was originally created by Nathan Sprague.","title":"Lab 8 - List-Tuple Lab"},{"location":"cs149fall2023/labs/6_lab8-list-tuple/#lab-8-list-tuple-lab","text":"","title":"Lab 8 - List-Tuple Lab"},{"location":"cs149fall2023/labs/6_lab8-list-tuple/#introduction","text":"In this lab you will gain some practice with lists and tuples. Docstring Guide ============","title":"Introduction"},{"location":"cs149fall2023/labs/6_lab8-list-tuple/#problem-ascii-art-roses","text":"Long ago, before computers could display high resolution graphics on 4K monitors with 300 dpi pixel density and churn out stunning real-time 3D graphics at 60 frames per second, many people spent a lot of time making art on computers out of text using the ASCII character set. Like this: ......................................... ...####...####....###...##..##...####.... ..##.....##........##...##..##..##..##... ..##......###......##...######...#####... ..##........##.....##.......##......##... ...####..####.....####......##....###.... ......................................... You are going to write a program to output five ASCII art roses. Like this: @-->---->--- @----->->-- @----->------->-- @->->---------- @->->- Each rose starts with an @ followed by a section of dashes - before the first thorn >, followed by a second section of dashes to a second thorn, followed by a final section of dashes -. For your first pass at this algorithm, you should have five variables: rose1, rose2, rose3, rose4, and rose5. Each variable should refer to a tuple with 3 integers denoting the number of dashes ('-') in each of the rose\u2019s sections. For example, the first rose in the figure above has two dashes in the first section, four dashes in the second section, and three dashes in the final section, so its tuple representation is (2, 4, 3). Your code should use the variables rose1, rose2, rose3, rose4, and rose5 to output each rose, one per line. The roses should be aligned so that their right-hand sides line up and the longest rose has no spaces before its petals (the '@'). Any rose shorter than the longest rose should have an appropriate number of spaces before the '@'. Here is starter code: \"\"\" Rose Variables \"\"\" rose1 = ( 2 , 4 , 3 ) rose2 = ( 5 , 1 , 2 ) rose3 = ( 5 , 7 , 2 ) rose4 = ( 1 , 1 , 10 ) rose5 = ( 1 , 1 , 1 ) \"\"\" Your code here \"\"\"","title":"Problem: ASCII Art Roses"},{"location":"cs149fall2023/labs/6_lab8-list-tuple/#hints","text":"Can you calculate the length of rose 1 using the data in rose1? Can you put the lengths of all five roses into a list? If so, can you use list functions to find the length of the longest rose? Remember that you can multiply a string by an integer to duplicate it. So \"abc\" * 3 is \"abcabcabc\". To right justify a string you can use the rjust method. Submit your roses.py file to Gradescope. This lab was originally created by Nathan Sprague.","title":"Hints"},{"location":"cs149fall2023/labs/7_lab9-haiku-lab/","text":"Lab - Haiku lab Background Haiku's are a form of Japanese poetry. They consist of 3 lines of text. The first line of the haiku must contain 5 syllables. The second line must have 7 syllables. Finally, the third line again contains 5 syllables. Here is an example of a valid haiku: An old silent pond A frog jumps into the pond\u2014 Splash! Silence again. by Matsuo Basho ============ Objectives Practice if-else and conditionals. Practice with functions Practice using a helper function Practice with loops More practice with lists Program the Solution - First Function: Write a program called haiku_checker.py that contains two functions. The first function will be a helper function that is called check_n_syllables. This function must take input of a list of words on a line and an int number of syllables to validate. You may use the pysyllables library to make this easier https://pypi.org/project/pysyllables/](https://pypi.org/project/pysyllables/). You will need to install the pysyllables package through the Thonny package manager. Make sure you also do an import at the top of your file: from pysyllables import get_syllable_count You can then use the get_syllable_count(word) function to get the number of syllables in a word. The return value of the function should be as follows: This function should return either a -1 if the total syllables is less than the given number n to validate, 0 if the total syllables is equal to the number n, and 1 if the total syllables is greater than n. Second Function: The second function should be called validate_haiku. It will take a single parameter of a list of lists. The list will contain 3 lines for the haiku. Each line will be a sub list of the words in the line. The function will return a String value. The return values should follow these rules: It should be set to \"Valid haiku.\" if this is a valid haiku that has a first line with 5 syllables, second line with 7 syllables, and third line with 5 syllables. If it has more or less than 3 lines it should return: \"Invalid haiku, not 3 lines.\". Otherwise it will return a message with the type of error for each line. For example: if the first line has 7 syllables it would return: \"Line 1 too short. \"[note the space after the period]. If the second line has 3 syllables it would return \"Line 2 too short. \". If the third line is too long it would return: \"Line 3 too long. \". Your program should allow multiple comments, for instance 1 for each line that is wrong. The overall message should be on a single line of output. Do not return an error if a line is valid. Note: You should have a return at the end of each error message and only return one continuous String with all error messages as the final return String. Submission: Submit your program called haiku_checker.py to https://gradescope.com by tomorrow evening.","title":"Lab - Haiku lab"},{"location":"cs149fall2023/labs/7_lab9-haiku-lab/#lab-haiku-lab","text":"","title":"Lab - Haiku lab"},{"location":"cs149fall2023/labs/7_lab9-haiku-lab/#background","text":"Haiku's are a form of Japanese poetry. They consist of 3 lines of text. The first line of the haiku must contain 5 syllables. The second line must have 7 syllables. Finally, the third line again contains 5 syllables. Here is an example of a valid haiku: An old silent pond A frog jumps into the pond\u2014 Splash! Silence again. by Matsuo Basho ============","title":"Background"},{"location":"cs149fall2023/labs/7_lab9-haiku-lab/#objectives","text":"Practice if-else and conditionals. Practice with functions Practice using a helper function Practice with loops More practice with lists","title":"Objectives"},{"location":"cs149fall2023/labs/7_lab9-haiku-lab/#program-the-solution-first-function","text":"Write a program called haiku_checker.py that contains two functions. The first function will be a helper function that is called check_n_syllables. This function must take input of a list of words on a line and an int number of syllables to validate. You may use the pysyllables library to make this easier https://pypi.org/project/pysyllables/](https://pypi.org/project/pysyllables/). You will need to install the pysyllables package through the Thonny package manager. Make sure you also do an import at the top of your file: from pysyllables import get_syllable_count You can then use the get_syllable_count(word) function to get the number of syllables in a word. The return value of the function should be as follows: This function should return either a -1 if the total syllables is less than the given number n to validate, 0 if the total syllables is equal to the number n, and 1 if the total syllables is greater than n.","title":"Program the Solution - First Function:"},{"location":"cs149fall2023/labs/7_lab9-haiku-lab/#second-function","text":"The second function should be called validate_haiku. It will take a single parameter of a list of lists. The list will contain 3 lines for the haiku. Each line will be a sub list of the words in the line. The function will return a String value. The return values should follow these rules: It should be set to \"Valid haiku.\" if this is a valid haiku that has a first line with 5 syllables, second line with 7 syllables, and third line with 5 syllables. If it has more or less than 3 lines it should return: \"Invalid haiku, not 3 lines.\". Otherwise it will return a message with the type of error for each line. For example: if the first line has 7 syllables it would return: \"Line 1 too short. \"[note the space after the period]. If the second line has 3 syllables it would return \"Line 2 too short. \". If the third line is too long it would return: \"Line 3 too long. \". Your program should allow multiple comments, for instance 1 for each line that is wrong. The overall message should be on a single line of output. Do not return an error if a line is valid. Note: You should have a return at the end of each error message and only return one continuous String with all error messages as the final return String.","title":"Second Function:"},{"location":"cs149fall2023/labs/7_lab9-haiku-lab/#submission","text":"Submit your program called haiku_checker.py to https://gradescope.com by tomorrow evening.","title":"Submission:"},{"location":"cs149fall2023/labs/8_lab10-codingbat-loops/","text":"Lab9 - Coding bat practice with loops Background Part 1: Account Setup(ignore if you did this in previous coding bat lab) Go to codingbat.com and create an account (click the link on the upper right). Please use your JMU email when setting up your account. After logging in, click the \"prefs\" link (upper right) and \"share to\" your professor's JMU e-mail for example: chaoaj@jmu.edu so you will get credit. Also make sure your name is entered as shown: Last, First ============ Part 2 Problem Solving Solve as many of the List-2 problems as you can today. Solve the following: count_evens , big_diff , centered_average , sum13 . Submission Package up the 4 solutions above into a program called batlist2.py and submit it to https://gradescope.com https://gradescope.com by midnight tomorrow evening.","title":"Lab9 - Coding bat practice with loops"},{"location":"cs149fall2023/labs/8_lab10-codingbat-loops/#lab9-coding-bat-practice-with-loops","text":"","title":"Lab9 - Coding bat practice with loops"},{"location":"cs149fall2023/labs/8_lab10-codingbat-loops/#background","text":"","title":"Background"},{"location":"cs149fall2023/labs/8_lab10-codingbat-loops/#part-1-account-setupignore-if-you-did-this-in-previous-coding-bat-lab","text":"Go to codingbat.com and create an account (click the link on the upper right). Please use your JMU email when setting up your account. After logging in, click the \"prefs\" link (upper right) and \"share to\" your professor's JMU e-mail for example: chaoaj@jmu.edu so you will get credit. Also make sure your name is entered as shown: Last, First ============","title":"Part 1: Account Setup(ignore if you did this in previous coding bat lab)"},{"location":"cs149fall2023/labs/8_lab10-codingbat-loops/#part-2-problem-solving","text":"Solve as many of the List-2 problems as you can today. Solve the following: count_evens , big_diff , centered_average , sum13 .","title":"Part 2 Problem Solving"},{"location":"cs149fall2023/labs/8_lab10-codingbat-loops/#submission","text":"Package up the 4 solutions above into a program called batlist2.py and submit it to https://gradescope.com https://gradescope.com by midnight tomorrow evening.","title":"Submission"},{"location":"cs149fall2023/labs/9_lab11-8ball/","text":"Lab11 - While loops - Magic 8-Ball Background We have already worked with if statements to detect invalid input. But in some cases users will repeatedly enter the wrong value. In addition, some problems lend themselves to executing the program repeatedly. This lab will explore these uses of loops in Python. Obectives Use a loop structure for error correction. Use a loop structure for execution control. Part 1: The Magic 8-Ball The Magic 8-Ball is a toy produced by Tyco Toys (now Mattel) and consists of a ball filled with a blue fluid. Suspended in the fluid is a icosahedron (a 20-sided polyhedron with each side consisting of an equilateral triangle). Each face has an answer to a yes/no question. Download the eightball.py program then implement the required helper functions: input_yes_no(prompt) This function is simpler than the previous input functions you have written. Display the prompt (followed by \"[yes/no]: \"), read the next line of user input, and return true if it's \"y\" or \"yes\" ignoring case. get_question(prompt) This function should keep prompting the user to enter a question until they enter a valid one. Question strings must be between 1 and 60 characters, and they must end with a question mark. If the question is invalid, display the applicable error message: - \"Your question is blank\" - \"Your question is too long\" - \"Your question must end with a ?\" After completing the helper functions, be sure to test the program multiple times with different inputs. Here is an example of what it will look like: Magic 8-Ball Do you want to ask a question? [yes/no]: yes What is your question? Will I win the lottery Your question must end with a ? What is your question? Will I win the lottery? Question: Will I win the lottery? Answer: Signs point to yes. Do you want to ask a question? [yes/no]: no Goodbye! Your final version should allow you to keep asking questions until you enter the word no, and it should verify that each question is at most 60 chars ending with a question mark. ============ Submission Submit your completed eightball.py file to https://gradescope.com https://gradescope.com by tomorrow evening.","title":"Lab11 - While loops - Magic 8-Ball"},{"location":"cs149fall2023/labs/9_lab11-8ball/#lab11-while-loops-magic-8-ball","text":"","title":"Lab11 - While loops - Magic 8-Ball"},{"location":"cs149fall2023/labs/9_lab11-8ball/#background","text":"We have already worked with if statements to detect invalid input. But in some cases users will repeatedly enter the wrong value. In addition, some problems lend themselves to executing the program repeatedly. This lab will explore these uses of loops in Python.","title":"Background"},{"location":"cs149fall2023/labs/9_lab11-8ball/#obectives","text":"Use a loop structure for error correction. Use a loop structure for execution control.","title":"Obectives"},{"location":"cs149fall2023/labs/9_lab11-8ball/#part-1-the-magic-8-ball","text":"The Magic 8-Ball is a toy produced by Tyco Toys (now Mattel) and consists of a ball filled with a blue fluid. Suspended in the fluid is a icosahedron (a 20-sided polyhedron with each side consisting of an equilateral triangle). Each face has an answer to a yes/no question. Download the eightball.py program then implement the required helper functions: input_yes_no(prompt) This function is simpler than the previous input functions you have written. Display the prompt (followed by \"[yes/no]: \"), read the next line of user input, and return true if it's \"y\" or \"yes\" ignoring case. get_question(prompt) This function should keep prompting the user to enter a question until they enter a valid one. Question strings must be between 1 and 60 characters, and they must end with a question mark. If the question is invalid, display the applicable error message: - \"Your question is blank\" - \"Your question is too long\" - \"Your question must end with a ?\" After completing the helper functions, be sure to test the program multiple times with different inputs. Here is an example of what it will look like: Magic 8-Ball Do you want to ask a question? [yes/no]: yes What is your question? Will I win the lottery Your question must end with a ? What is your question? Will I win the lottery? Question: Will I win the lottery? Answer: Signs point to yes. Do you want to ask a question? [yes/no]: no Goodbye! Your final version should allow you to keep asking questions until you enter the word no, and it should verify that each question is at most 60 chars ending with a question mark. ============","title":"Part 1: The Magic 8-Ball"},{"location":"cs149fall2023/labs/9_lab11-8ball/#submission","text":"Submit your completed eightball.py file to https://gradescope.com https://gradescope.com by tomorrow evening.","title":"Submission"},{"location":"cs149fall2024/","text":"Welcome! This is the website for the Fall 2024 offering of CS149 (Intro to Programming Fundamentals) at James Madison University. Specifically, this is the website for sections taught by Alvin Chao Announcements: In person TA support TAs are available in King ISAT/CS room 248 for in-person support at the following times: Sunday 3 pm - 9 pm Monday/Tuesday/Thursday 5 pm - 9 in person, 9-11 pm online Wednesday 6 pm - 9 pm in person then online 9-11pm TA Hours 9 pm to 11 pm via Microsoft Teams(See Canvas for links) TAs are available for virtual online support from 9 pm to 11 pm Sunday through Thursday. Week 1 THU 8am [CANVAS] Course Intro Survey Purchase book through Buy Book assignment link. FRI 11pm Lab 2[Canvas/Gradescope] Tue 11pm Chp1.2-1.8 Reading[Zybook] Wed 11pm Chap 1 HW[Canvas/Gradescope] Lab 3[canvas] The class meets Tuesdays and Thursdays. Class meets in person. Please visit the calendar for the week-to-week assignments. My Office Locations Office hours (KING 248): Tues 9:15-9:45 Thu 9:15-9:45 You may schedule an appointment for other times that are not listed to visit my Massanutten 167 office(540)-568-6206 or online via Zoom. Please use the links to the left to navigate the website. Important announcements will be posted on this front page. Other course content will appear on the subpages linked above. Please check this website (especially the front page and calendar) regularly for updates. This semester, we will be using Piazza for class discussions. If you have a question that may be of general interest to your fellow students, please post it on Piazza rather than emailing me directly. This allows others to answer your question or benefit from my answer. I will check the Piazza forum regularly and respond as quickly as I can. To access Piazza, log into Canvas and click the \"Piazza\" link in the navigation bar on the left. Class grades will be accessible via Canvas , and online quizzes will be administered using Canvas as well. Other resources: Connecting to Stu.cs.jmu.edu instructions","title":"CS149 Fall 2024"},{"location":"cs149fall2024/#welcome","text":"This is the website for the Fall 2024 offering of CS149 (Intro to Programming Fundamentals) at James Madison University. Specifically, this is the website for sections taught by Alvin Chao","title":"Welcome!"},{"location":"cs149fall2024/#announcements","text":"In person TA support TAs are available in King ISAT/CS room 248 for in-person support at the following times: Sunday 3 pm - 9 pm Monday/Tuesday/Thursday 5 pm - 9 in person, 9-11 pm online Wednesday 6 pm - 9 pm in person then online 9-11pm TA Hours 9 pm to 11 pm via Microsoft Teams(See Canvas for links) TAs are available for virtual online support from 9 pm to 11 pm Sunday through Thursday. Week 1 THU 8am [CANVAS] Course Intro Survey Purchase book through Buy Book assignment link. FRI 11pm Lab 2[Canvas/Gradescope] Tue 11pm Chp1.2-1.8 Reading[Zybook] Wed 11pm Chap 1 HW[Canvas/Gradescope] Lab 3[canvas] The class meets Tuesdays and Thursdays. Class meets in person. Please visit the calendar for the week-to-week assignments. My Office Locations Office hours (KING 248): Tues 9:15-9:45 Thu 9:15-9:45 You may schedule an appointment for other times that are not listed to visit my Massanutten 167 office(540)-568-6206 or online via Zoom. Please use the links to the left to navigate the website. Important announcements will be posted on this front page. Other course content will appear on the subpages linked above. Please check this website (especially the front page and calendar) regularly for updates.","title":"Announcements:"},{"location":"cs149fall2024/calendar/","text":"CS149 Section 003 Calendar // <![CDATA[ dttest1 = new Date(2024,0,16); dttest2 = new Date(2024,4,24); function diff_weeks(dt2, dt1) { var diff =(dt2.getTime() - dt1.getTime()) / 1000; // diff in secs diff /= (60 * 60 * 24 * 7); // convert seconds to weeks return Math.abs(Math.round(diff)); } // Start of semester - remember JS date month is one less than current. var dt1 = new Date(2024, 0, 12); // new Date(2023, 7, 17); // January 1 = (2021, 0, 1) // document.write(\"dt1\" + dt1); var dt2 = new Date(); // document.write(\"d2\" + dt2); wk = diff_weeks(dt2,dt1); // document.write(\"Week: \" + wk); if (wk >= 16) { wk = 16; } else if (wk <= 0) { wk = 1; } document.write(\"<a href=\\\"#Week\"+wk+\"\\\">Current Week</a>\"); document.write(\"<!-- wk \" + wk + \"-->\"); // ]]> Python and Config Resources: Python 3 Standard Library Python Tutor Show Me Your Code Unicode Character List print formatting reference Math Module Thonny-Pep8 List Methods Dictionary Methods . Set Methods Docstring Style Guide Main program: if __name__ == \"__main__\": ( Note: This schedule is tentative and is subject to change during the semester ) Week / Topic Reading Tue in class Thu in class HW / Programming Assignment Events 1 Intro Obtain book - c1 8/22 2 Intro Chp 1 - c1 8/29 3 Intro Chp 2 - c1 9/5 4 Intro Chp 3 - Practice Quiz 1 9/12 5 Intro Chp 4 - Actual Quiz 1 9/19 6 Intro Chp 5 - Practice Quiz 2 c1 9/26 7 Intro Chp 6 - Actual Quiz 2 c1 10/3 8 Intro Chp 7 - Practice Quiz 3 c1 10/10 9 Intro Chp 8 Actual Quiz 3 c c1 10/17 Fall Break 16-20 10 Intro Chp 9 - Practice Quiz 4 c1 10/24 11 Intro Chp 10 - Actual Quiz 4 c1 10/31 12 Intro Chp 11 - Practice Quiz 5 c1 11/7 13 Intro Chp 12 - Actual Quiz 5 c1 11/14 14 Intro Chp 13 - Practice Quiz 6 c1 11/21 15 Intro Thanksgiving break - c1 11/28 Thanksgiving Break 11/25 to 11/29 16 Intro Review - Actual Quiz 6 c1 12/5 Dec 6 last day of class 17 Exam week Exam Schedule c1 12/12 Week Date Reading Topic HW / Programming Assignment Events Week 1 1/16/24 Intro to CS149 Intro Python Lecture 2 C1 Obtain Book assignment 1/18/24 Thonny Video Lab 2 - Thonny lab2-video C2 Week 2 1/23/24 Chp 1 Reading (Canvas/Zybook)Tue 11pm 1/23/24 Lecture 3 HW1.1-1.2 in class Lab 3 - Style . Lab 3 Video C2 Start HW 1(due Wed 1-24-24 11pm) 1/25/24 Statements: Lecture 3B Lab 4 C3 Week 3 1/30/24 Chp 2 Reading (Canvas/Zybook)Tue 11pm 1/30/24 Lecture 4 Interpret Gradescope errors video Practice variables lab referenced in Gradescope errors video C4 HW 2(Wed 1-31-24 11pm) 2/2/24 Expressions: Lecture 6 Circle Math Conditionals Lecture 5 Practice Quiz1 - In Class C5 Week 4 2/6/24 Branching/Conditionals/Assert: Chp 3 Reading (Canvas/Zybook) Mon 11pm 2-5-24 Assessment Day No Class C6 Lab 6 If Then HW3 (Wed 2-7-23 11pm) 2/8/24 Conditionals Lecture 7 Functions Lecture 8 Actual Quiz1 C7 Week 5 2/13/24 Chp 4 Reading Tue 2-13-24 11pm Time Management Functions: Lecture 9 Functions Lab 7 Circle Lab Coding Bat logic1 practice C8 HW4 (Wed 2-14-24 11pm) 2/15/24 Chp 4 Lecture 10 Containers Practice Quiz2 C9 - Week 6 2/20/24 Chp 5 Reading due Tue 2-20-24 11pm Types including lists, sets, dicts Lecture 11 more containers Lab 8 List - Tuples C10 HW5 (Wed 2-21-24 11pm) 2/22/24 Honor Code Case Studies(pdf) Honor Code Videos Honor Code Sheet C11 Actual Quiz 2 Lecture 12 - For loops Week 7 2/27/24 Chp 6 Reading due Tue 2-27-24 11pm Coding Bat Loops Lab recommend first_last6 to sum3 - not graded Lab 9 Haiku Lab C12 HW6 (Wed 2-28-24 11pm) 2/29/24 Lecture 13 While loops C13 Practice Quiz 3 Week 8 3/5/24 Chp7 While Loops due Tue 3-5-24 11pm Lecture Unit Testing Lab 11 Eight Ball Lab C14 HW7 (Wed 3-6-24 11pm) 3/7/24 C15 Lecture Modules Actual Quiz 3 Week 9 3/12/24 - No class - Spring Break 3/14/24 - No class Spring Break March 11-15 C17 Week 10 3/19/24 Chp8 Modules reading due 3-19-24 11pm Tests for PA1 and PyTest PA1-Readiness Quiz in Canvas due Thu 3/21/24 PA1A Dice due Sun 3/24/24 3/22/24 Withdraw W deadline 3/21/24 Lecture 16 - File IO Practice Quiz 4 - Week 11 3/26/24 Chp9 File I/O reading due 3-26-24 11pm Lecture 17 Command line Lab 13 List Play PA1B due 4-1-24 3/28/24 Lecture Sequences/Strings Actual Quiz 4 Week 12 4/2/24 Chp10 Sequences Lab 14 FileI/O VS Code 4/4/24 Practice Quiz 5 Week 13 4/9/24 Chp 11 Nested Data Lecture 19 Nested Loops 4/11/24 Actual Quiz 5 Recursion lecture PA2 Readiness Quiz due 4/11 11pm Week 14 4/16/24 Chp 12 Recursion Lab 15 - Recursion PA2A word_files due Sun 4/14 11pm 4/18/24 JSON examples Practice Quiz 6 C26 PA2B boxed.py due Tue 4/23 11pm Week 15 4/23/24 Stars Lab - 4/25/24 Actual Quiz 6 - Week 16 4/30/24 PA3 work day PA3 due Tue 4/30 5/2/24 Final Review Last day of classes Week 17 5/7/24 Exam Week Exam Schedule Exam Week 5/9/24 Final Exam - Thu 5/9 8-10am Exam Week Back to Top Back to Top // <![CDATA[ $(window).load(function(){ // using window load function instead of document ready function /* Animated scroll to top by @NickLa, Web Designer Wall (http://webdesignerwall.com/tutorials/animated-scroll-to-top) with modifications by johns2ja */ // hide #back-top first $(\"#back-top\").hide(); // fade in #back-top //$(function () { /* remove containing function to ensure it works cross-browser - johns2ja */ $(window).scroll(function () { if ($(this).scrollTop() > 100) { $('#back-top').fadeIn(); } else { $('#back-top').fadeOut(); } }); // scroll body to 0px on click $('#back-top a').click(function () { $('body,html').animate({ scrollTop: 0 }, 800); return false; }); // }); /* remove containing function to ensure it works cross-browser */ }); // ]]> <!-- #back-top { bottom: 130px; left: 5%; /* instead of margin-left - johns2ja */ position: fixed; } #back-top a { color: #bbb !important; display: block; font-size: 11px; height: 75px; text-align: center; text-decoration: none !important; text-transform: uppercase; transition: all 1s ease 0s; width: 75px; } #back-top span { background: #ddd url(\"//www.jmu.edu/jmucmsfiles/images/up-arrow.png\") no-repeat scroll center center; border-radius: 15px; display: block; height: 75px; margin-bottom: 7px; transition: all 1s ease 0s; width: 75px; } @media all and (max-width:768px){ /* RWD by johns2ja */ #back-top { bottom: 3%; left: 1%; } #back-top a { height: 32px; width: 32px; font-size: 0px; } #back-top span { width: 32px; height: 32px; background-size: 32px; } } -->","title":"CS149 Section 003 Calendar"},{"location":"cs149fall2024/calendar/#cs149-section-003-calendar","text":"","title":"CS149 Section 003 Calendar"},{"location":"cs149fall2024/pa1_draft/","text":"Programming Assignment(PA) 1: Poker Dice Introduction Poker dice is a dice game similar to Yahtzee played with 5 six sided dice with face values 9, 10, J, Q, K , A. The following table represents a summary of the rules for Poker Dice scores: Type# Category Description Scoring 1 One Pair A pair of the same face value 9, 9, 10, J, K Sum of Matched Values 2 Two Pair Two unique pairs of face values 9, 9, 10, 10 K Sum of both pair values 3 Three of a Kind At least Three of the same face value Sum of three Similar Dice + 10) 4 Four of a Kind At least Four of the same face value Sum of four similar Dice + 20 5 Five of a Kind All five face values are the same 100 points 6 Full House 3 of a kind and a pair 9, 9, 9, A, A (unique face values) 50 points + sum of dice face values 7 Small Straight 4 or more face values in a row 70 points 8 Large Straight All 5 dice sequential 9,10,J,Q,K or 10, J, Q, K, A 95 points 9 Chance Any roll Sum of dice face values The final column in the table describes the score if the player chooses the corresponding score type. For example, if a player selects one pair and the roll is ['9', '9', 'J','Q','A'], the score will be 18 because score is twice the pair value. If the dice rolled are ['9', '9', 'Q', 'A', '9'], then the payout will still be 18, because no extra points are given for a three of a kind because one pair was the selected score type. Your goal for this assignment is to create a dice module and develop and test a function for determining scoring in Poker Dice. Provided Code Start with the following source files: dice.py -- NEED TO CREATE poker_dice.py -- DO NOT EDIT score_dice.py -- UNFINISHED test_score_dice.py -- UNFINISHED dice.py The dice module will work with a list of 5 string die face values. This module will need to work with not just our Poker Dice number of dice (5) but with any number from 1--10 dice. The module will contain five functions: roll_dice -- This function will take two parameters. The first will be an int for the number of dice in the list. The second parameter will be a random seed integer, with a default value of 0. Note it is possible to pass None as a parameter, which should result in a random seed value. This function will return a list of n dice values (each die has a string face value between '9' - 'A'). If the number of dice is out of range 1--10 then a single die of value '9' will be returned as a list of 1 item. If no parameters are provided, then a list of 5 dice values should be returned (having been generated using a seed of 0). are_valid -- This function takes a dice parameter which is a list of from 1--10 dice rolls. This function will check the length of the list to make sure it is between 1 and 10 and check if the values of all dice in the list are between '9' and 'A'. Return True if all these conditions are met, False otherwise. get_value -- This function takes a string argument and gets the scoring numerical point value of a die face value. Face values are: 9 and 10 for the numerical string values, 10 for 'J', 'Q', 'K', and 11 for 'A'. num_faces -- This function takes a dice_list parameter which is a list of from 1--10 dice rolls. It will also take a second parameter for the face value being counted, with a default of None. The function returns a count of the number of times a particular face value shows on the dice in the list. For example, if the dice are ['9', '9','9', 'A', 'K'], dice.num_faces(dice, 9) will return 3 (since the value '9' occurs three times). If no parameter is passed (i.e., None) then count should return 0. Also, if an invalid list or face value of None is passed the function should return -1. add_values -- This function takes a dice parameter which is a list of from 1--10 dice rolls. It will calculate and return the sum of the face values of the dice in the list. Make sure you use the validation function for dice and return a -1 for an invalid list of dice. poker_dice.py This module contains a simple terminal-based Poker Dice game. Once you have completed calculate_score.py you can use this driver to try out your code. This driver will call the dice.py module and use the roll_dice function to return dice rolls. It may not be very useful for systematically testing your solution. The main mechanism for running your code for this project will be the test_calculate_score.py file described below. score_dice.py Your main task for this assignment is to implement the score_dice.calculate_score function according to the provided documentation string. For full credit, your finished function must satisfy the following requirements: A nested conditional should be used to distinguish between the different scorign types Appropriate helper functions must be used to break the problem into smaller and more manageable pieces. The add_values and num_faces functions from the dice module should be used. Your code must make use of the named constants(FACES, FACES_LIST) declared at the top of the dice program. Avoid the use of hard-coded literal values in your solution. Your score_dice.calculate_score function must have only one return statement. test_score_dice.py You must write unit tests for score_dice.py . Rather than writing one very long test_score_dice function, you should write several smaller tests to handle distinct cases. The provided file contains two testing functions to get you started. Notice that the names of these functions describe the situations they are designed to test. For example, the name test_calculate_score_one_pair_no_match : test - This makes it clear that this is a testing function calculate_score - this is the function being tested one_pair_no_match - this is the situation being tested. You should properly document your tests and your score_dice.py file. Docstrings for test functions are generally not required. Categories that you should test include (this is a template for your test_score_dice.py file): Test score one pair no match Test score one pair one match Test score two pair no match Test score two pair one match Test score three of a kind match Test score three of a kind no match Test score four of a kind match Test score four of a kind no match Test score five of a kind match Test score five of a kind no match Test score small straight match Test score small straight no match Test score large straight match Test score large straight no match Test score chance match Part A - Readiness Quiz and dice.py (30 points) 1) Readiness Quiz (10 points) in Canvas. Before the deadline for Part A you should read this document carefully, then look at the starter code provided above. Once you have a clear understanding of the expectations for this assignment, complete the readiness quiz in Canvas (10 points). The grading for this quiz will be all or nothing: your score on the quiz will be 0 if you miss any questions. If you do not successfully complete the readiness quiz, you cannot receive any credit for Part A or Part B. 2) You should also complete the dice.py file (20 pts) and submit this to Gradescope by the deadline for your section. Be sure to test your dice module carefully for correctness AND style before submitting into gradescope; You will be limited to 10 submissions for Part A code. Part B - Code (70 points) Upload only your score_dice.py file to Gradescope. You should not include poker_dice.py or test_score_dice.py in your submission. Before uploading your submission to Gradescope, be sure to complete the following steps: Test your solution carefully. Make sure that poker_dice.py works as expected with your finished code. Review the course style guide to ensure that your code meets the style requirements. Run flake8 and eliminate all warnings. Review and update comments as needed. You are limited to a maximum of 10 submissions into Gradescope for Part B. Programming Assignment Attribution Provide a short statement describing any assistance that you received on this assignment, either from another student, an online source, an AI-enabled tool, or any other source. Acknowledgments This assignment was created by Alvin Chao. Some parts of the Poker dice description above are borrowed from the Poker Dice Wikipedia page. The Wikipedia article, and this assignment page, are licensed under the Creative Commons Attribution-Share-Alike License 3.0.","title":"Programming Assignment(PA) 1: Poker Dice"},{"location":"cs149fall2024/pa1_draft/#programming-assignmentpa-1-poker-dice","text":"","title":"Programming Assignment(PA) 1: Poker Dice"},{"location":"cs149fall2024/pa1_draft/#introduction","text":"Poker dice is a dice game similar to Yahtzee played with 5 six sided dice with face values 9, 10, J, Q, K , A. The following table represents a summary of the rules for Poker Dice scores: Type# Category Description Scoring 1 One Pair A pair of the same face value 9, 9, 10, J, K Sum of Matched Values 2 Two Pair Two unique pairs of face values 9, 9, 10, 10 K Sum of both pair values 3 Three of a Kind At least Three of the same face value Sum of three Similar Dice + 10) 4 Four of a Kind At least Four of the same face value Sum of four similar Dice + 20 5 Five of a Kind All five face values are the same 100 points 6 Full House 3 of a kind and a pair 9, 9, 9, A, A (unique face values) 50 points + sum of dice face values 7 Small Straight 4 or more face values in a row 70 points 8 Large Straight All 5 dice sequential 9,10,J,Q,K or 10, J, Q, K, A 95 points 9 Chance Any roll Sum of dice face values The final column in the table describes the score if the player chooses the corresponding score type. For example, if a player selects one pair and the roll is ['9', '9', 'J','Q','A'], the score will be 18 because score is twice the pair value. If the dice rolled are ['9', '9', 'Q', 'A', '9'], then the payout will still be 18, because no extra points are given for a three of a kind because one pair was the selected score type. Your goal for this assignment is to create a dice module and develop and test a function for determining scoring in Poker Dice.","title":"Introduction"},{"location":"cs149fall2024/pa1_draft/#provided-code","text":"Start with the following source files: dice.py -- NEED TO CREATE poker_dice.py -- DO NOT EDIT score_dice.py -- UNFINISHED test_score_dice.py -- UNFINISHED","title":"Provided Code"},{"location":"cs149fall2024/pa1_draft/#dicepy","text":"The dice module will work with a list of 5 string die face values. This module will need to work with not just our Poker Dice number of dice (5) but with any number from 1--10 dice. The module will contain five functions: roll_dice -- This function will take two parameters. The first will be an int for the number of dice in the list. The second parameter will be a random seed integer, with a default value of 0. Note it is possible to pass None as a parameter, which should result in a random seed value. This function will return a list of n dice values (each die has a string face value between '9' - 'A'). If the number of dice is out of range 1--10 then a single die of value '9' will be returned as a list of 1 item. If no parameters are provided, then a list of 5 dice values should be returned (having been generated using a seed of 0). are_valid -- This function takes a dice parameter which is a list of from 1--10 dice rolls. This function will check the length of the list to make sure it is between 1 and 10 and check if the values of all dice in the list are between '9' and 'A'. Return True if all these conditions are met, False otherwise. get_value -- This function takes a string argument and gets the scoring numerical point value of a die face value. Face values are: 9 and 10 for the numerical string values, 10 for 'J', 'Q', 'K', and 11 for 'A'. num_faces -- This function takes a dice_list parameter which is a list of from 1--10 dice rolls. It will also take a second parameter for the face value being counted, with a default of None. The function returns a count of the number of times a particular face value shows on the dice in the list. For example, if the dice are ['9', '9','9', 'A', 'K'], dice.num_faces(dice, 9) will return 3 (since the value '9' occurs three times). If no parameter is passed (i.e., None) then count should return 0. Also, if an invalid list or face value of None is passed the function should return -1. add_values -- This function takes a dice parameter which is a list of from 1--10 dice rolls. It will calculate and return the sum of the face values of the dice in the list. Make sure you use the validation function for dice and return a -1 for an invalid list of dice.","title":"dice.py"},{"location":"cs149fall2024/pa1_draft/#poker_dicepy","text":"This module contains a simple terminal-based Poker Dice game. Once you have completed calculate_score.py you can use this driver to try out your code. This driver will call the dice.py module and use the roll_dice function to return dice rolls. It may not be very useful for systematically testing your solution. The main mechanism for running your code for this project will be the test_calculate_score.py file described below.","title":"poker_dice.py"},{"location":"cs149fall2024/pa1_draft/#score_dicepy","text":"Your main task for this assignment is to implement the score_dice.calculate_score function according to the provided documentation string. For full credit, your finished function must satisfy the following requirements: A nested conditional should be used to distinguish between the different scorign types Appropriate helper functions must be used to break the problem into smaller and more manageable pieces. The add_values and num_faces functions from the dice module should be used. Your code must make use of the named constants(FACES, FACES_LIST) declared at the top of the dice program. Avoid the use of hard-coded literal values in your solution. Your score_dice.calculate_score function must have only one return statement.","title":"score_dice.py"},{"location":"cs149fall2024/pa1_draft/#test_score_dicepy","text":"You must write unit tests for score_dice.py . Rather than writing one very long test_score_dice function, you should write several smaller tests to handle distinct cases. The provided file contains two testing functions to get you started. Notice that the names of these functions describe the situations they are designed to test. For example, the name test_calculate_score_one_pair_no_match : test - This makes it clear that this is a testing function calculate_score - this is the function being tested one_pair_no_match - this is the situation being tested. You should properly document your tests and your score_dice.py file. Docstrings for test functions are generally not required. Categories that you should test include (this is a template for your test_score_dice.py file): Test score one pair no match Test score one pair one match Test score two pair no match Test score two pair one match Test score three of a kind match Test score three of a kind no match Test score four of a kind match Test score four of a kind no match Test score five of a kind match Test score five of a kind no match Test score small straight match Test score small straight no match Test score large straight match Test score large straight no match Test score chance match","title":"test_score_dice.py"},{"location":"cs149fall2024/pa1_draft/#part-a-readiness-quiz-and-dicepy-30-points","text":"1) Readiness Quiz (10 points) in Canvas. Before the deadline for Part A you should read this document carefully, then look at the starter code provided above. Once you have a clear understanding of the expectations for this assignment, complete the readiness quiz in Canvas (10 points). The grading for this quiz will be all or nothing: your score on the quiz will be 0 if you miss any questions. If you do not successfully complete the readiness quiz, you cannot receive any credit for Part A or Part B. 2) You should also complete the dice.py file (20 pts) and submit this to Gradescope by the deadline for your section. Be sure to test your dice module carefully for correctness AND style before submitting into gradescope; You will be limited to 10 submissions for Part A code.","title":"Part A - Readiness Quiz and dice.py (30 points)"},{"location":"cs149fall2024/pa1_draft/#part-b-code-70-points","text":"Upload only your score_dice.py file to Gradescope. You should not include poker_dice.py or test_score_dice.py in your submission. Before uploading your submission to Gradescope, be sure to complete the following steps: Test your solution carefully. Make sure that poker_dice.py works as expected with your finished code. Review the course style guide to ensure that your code meets the style requirements. Run flake8 and eliminate all warnings. Review and update comments as needed. You are limited to a maximum of 10 submissions into Gradescope for Part B.","title":"Part B - Code (70 points)"},{"location":"cs149fall2024/pa1_draft/#programming-assignment-attribution","text":"Provide a short statement describing any assistance that you received on this assignment, either from another student, an online source, an AI-enabled tool, or any other source.","title":"Programming Assignment Attribution"},{"location":"cs149fall2024/pa1_draft/#acknowledgments","text":"This assignment was created by Alvin Chao. Some parts of the Poker dice description above are borrowed from the Poker Dice Wikipedia page. The Wikipedia article, and this assignment page, are licensed under the Creative Commons Attribution-Share-Alike License 3.0.","title":"Acknowledgments"},{"location":"cs149fall2024/python-setup/","text":"CS149 Python Setup The purpose of this document is to walk you through the process of setting up your computer for Python development and code submission in CS 149. Downloading and Installing Thonny The officially supported Integrated Development Environment (IDE) for this semester will be Thonny. Download and run the appropriate installer for your operating system from https://thonny.org/ . You should accept all of the default options during installation. Revealing File Extensions When naming files, there is a longstanding convention of using file extensions to indicate the type of information that the file contains. For example, a Windows executable might be named installer.exe , while a Word document might be named FinalReport.docx . In this case .exe and .docx are the file extensions indicating the file types. In the good old days, these file exertions were visible by default, and they were often helpful in figuring out file types. Unfortunately, file extensions could also be confusing and intimidating for non-technical users. For example, .avi , .mp4 , .mpg , .divx , .mov (among many others) are all file extensions that represent different kinds of video files. Understanding the differences between them is crucial to someone involved in video production, but irrelevant to someone who just wants to watch the video. In the interest of not confusing people, modern operating systems generally hide file extensions by default. Now that you are a computer scientist, you have become the kind of person who needs to pay attention to file extensions. Congratulation! This means that you should modify the settings on your computer to show file extensions by default. Follow the instructions in the following links to change the appropriate settings on your computer: Windows: https://fileinfo.com/help/windows_10_show_file_extensions OSX: https://www.howtogeek.com/714021/how-to-show-all-filename-extensions-on-the-mac/ Saving Files in Thonny and Submitting Through Gradescope You will save yourself some trouble this semester if you get into the habit of organizing your Python files into folders organized by assignment. I suggest creating a top-level folder named CS149 that you can use to store each individual assignment folder. Watch the video below for an example of how this can be accomplished. PEP8 - Python Style When writing in English, readability can be impacted by the way the text is laid out on the page. We use conventions, like indenting the first sentence of a paragraph, to make it easier to understand written text. Programming languages are the same. Programs are easier to read if we agree on a set of conventions for how the code should be formatted. PEP 8 is the official document that describes the standard formatting conventions for Python code. (Here is a prettier version: https://pep8.org/ .) You don\u2019t need to read and understand the full PEP 8 document now, but you may want to look it over to get a feel for the issues that it addresses. When you submit homework assignments for CS 149 they will automatically be checked against the PEP 8 formatting requirements using a tool named flake8 . You will only receive full credit if you pass all of these automated style checks. You can install flake8 in Thonny by selecting Tools -> Manage Packages\u2026 and then finding and installing flake8 as well as pep8-naming . After installation, you should be able to check your file by typing the following into the Thonny shell: >>> !flake8 hello_world.py The exclamation point tells the Python interpreter the command should not be interpreted as Python code. Note that the Gradescope autograder is configured to be slightly more lenient than the default settings for flake8 . We allow line lengths up to 100 and disable checks for some errors and warnings. If you want to run flake8 with exactly the same settings as Gradescope, you can copy the following file into the same directory as your python code: setup.cfg Video Watch this short video for a demonstration of the steps required to create a new Python file, store it in a reasonable location, and submit it through Gradescope.","title":"Python setup"},{"location":"cs149fall2024/python-setup/#cs149-python-setup","text":"The purpose of this document is to walk you through the process of setting up your computer for Python development and code submission in CS 149.","title":"CS149 Python Setup"},{"location":"cs149fall2024/syllabus/","text":"Syllabus for CS149 Spring 2023 Section 3 - Instructor: Chao Objectives and Expectations Official course description: Fundamental problem-solving techniques using a modern programming language. By the end of this course, you should be able to: *Explain fundamental programming concepts (e.g, variables, methods, decisions, loops, arrays, objects) using appropriate terminology. Describe basic elements of high-level programming languages, including expressions, statements, functions, modules, and libraries. Read and interpret software specifications and write source code from them. Use automated software tools and processes to test your programs thoroughly. Distinguish appropriate collaboration from cheating on assignments and exams. Evaluate your own work for compliance with requirements and style guidelines. Develop correct and efficient algorithms to solve problems using computation. Course Textbook Required Textbook Zybook: Purchase the text through the Buy Book assignment in Canvas. Grading Criteria You are responsible for all material discussed in lecture and discussion section and posted on the class web page, including announcements, deadlines, policies, etc. Your final course grade will be determined according to the following percentages: Item Percentage Zybook Readings 5% Participation/Labs 10% Homework / Programming Assignments 15% In Class Quizzes 45% Final Exam 25% Reading Quizzes, Labs, Homework / Programming Assignments This portion of your grade will be based on graded labs, reading quizzes, and homework problems assigned. I will drop a to be determined amount(probably 2-3) of reading quizzes and labs at the end of the semester to account for the 'bad day' or unforseen circumstances for missing a particular day. ** Quizzes(In Class)** Quizzes(In class) There will be 6 in-class quizzes on Thursdays. There will be practice quizzes one week then the following week will be the actual quiz for that section. Final Exam The final exam will be two hours: one for written problems, one for coding problems. If you must be absent during an exam for a legitimate reason, you must contact me at least one week beforehand to make special arrangements. Failure to make prior arrangements for a missed exam will result in a zero grade. The instructor reserves the right to give students who do not earn 60% of the points on the final exam no higher than a C for the course. Except in extraordinary situations, you will not be excused from exams. Your instructor will be the sole arbiter of whether a situation qualifies as extraordinary. Hence, you should behave as if you will not be excused from exams for any reason. Letter grades will be assigned on the scale A=90-100, B=80-89, C=70-79, D=60-69, F=0-59, with potential minor adjustments after considering the overall performance of the class and actual distribution of numeric scores. I will use \u201c+\u201d and \u201c-\u201d grades at my discretion. Final course letter grades may be curved if necessary at the end of the semester, based on each student's overall performance for all coursework. If you believe I have made an error while grading your work or calculating your final score, please bring it to my attention after class or during office hours. If I determine that there has been a simple mistake, I will fix it immediately and no formal request is necessary. If you believe an exam question or assignment has been graded unfairly, you must submit a verbal or written formal request for a regrade. Such requests must be submitted within one week of when the assignment in question is returned to you. Any coursework submitted for reconsideration may be regraded in its entirety, which could result in a lower score if warranted. Instructor Contact Info Please post generic questions to Piazza, where other students may answer and/or benefit from my answers. My email is chaoaj at the standard domain. My office is in ISAT 264, and my office hours are posted on the main course page . I am also sometimes available outside office hours by appointment; if you wish to make an appointment, send me an email. Course Policies Important announcements will be made in class and/or on the class website. Please make it a habit to check the web page daily. Although every effort has been made to be complete and accurate, unforeseen circumstances arising during the semester could require the adjustment of any material given here. Consequently, given due notice to students, I reserve the right to change any information on this syllabus or in other course materials. You are permitted to use course materials for your own personal use only. Course materials may not be distributed publicly or provided to others (excepting other students in the course), in any way or format unless explicitly allowed. Attendance and Participation Attendance is not mandatory, but participation will be used as a part of your lab/quiz grade portion. I strongly encourage you to attend every class session and participate fully in order to derive the maximum benefit of this course. If you believe that there is something I could change about the way I am handling the course in order to improve its effectiveness for you, please let me know via email or office hours. Please silence your cell phone while class is in session. If you have a laptop or tablet, you are encouraged to bring it to class and use it to work along with programming examples and exercises. Mute the volume to avoid unintended interruptions, and do not use any electronic devices for activities that may distract other students. Repeated violations of this policy may result in disciplinary action or a grade penalty in the course. I strongly encourage you to check the main website and the Piazza web forum regularly for important announcements (usually regarding programming projects). You may also use the Piazza forum to ask general questions of interest to the class as a whole (e.g., administrative issues or project clarification questions) as well as to offer each other general advice on class assignments. However, do not post any information that would violate the university academic integrity policy. If you are unsure about this, please email me for approval before you post. Homework Written and/or programming exercises will be assigned each week. These exercises are meant to give you a chance to practice the skills you need to develop in this course. You are welcome to discuss these assignments with your classmates and to use generative AI tools to help develop and understand solutions. Be careful! Being able to understand a friend's code, or code generated using an AI tool, is very different from being able to write code on your own. If you become over-reliant on outside assistance you won't develop the skills you need to succeed on quizzes and exams. Late Homework Policy Deadlines exist, in part, so that we can discuss solutions in class. Under normal circumstances, late work will not be accepted. Contact me if you are facing unavoidable circumstances that will prevent you from submitting an assignment on time. I will do my best to work with you to make appropriate accommodations. Please don't wait until the night before to get started! Programming Assignments(PA's) PA's must be submitted electronically following the instructions given in class and on the website. Assignments may not be submitted by any other means (e.g., do not email your projects to me unless I request that). It is your responsibility to test your program and verify that it works properly before submitting it. All assignments are due at 23:00 (11:00pm) on the day indicated on the assignment unless noted otherwise. Late assignments will not be accepted. Regardless of the any other late policy, I reserve the right to refuse to grade any programs submitted after the beginning of the second class period following the project deadline, because I may discuss the solution in class. Project extensions will not necessarily be granted due to server congestion, system problems, network problems, power outages, etc., so do not wait to submit a program until the night it is due. No consideration in grading will be made for errors made in transferring files or submitting the wrong version of your project. Having a working, non-submitted version will not count; only submitted code will be be counted. You will be responsible for developing your own techniques for testing your projects before submitting it. I will grade your assignment based on test cases not provided to you in advance. Because grading may be done automatically, you must follow the project specification exactly. Your code will be graded on a combination of correctness, completeness, documentation, and code style. Any \"hard coding\" in a project assignment will result in a score of zero for that assignment, and is considered a bad-faith effort. Hard coding refers to attempting to make a program appear as if it works correctly, when in fact it does not. One example of hard coding would be printing the desired output instead of computing it. If you have any questions as to what constitutes hard coding for a particular assignment, be sure to ask ahead of time. Academic Honesty You are expected to comply with the JMU Honor Code as stated in the Student Handbook and available from the Honor Council website on all assignments, projects, and exams. Honor Code Students who violate the Honor Code (https://www.jmu.edu/honorcode/code.shtml) will receive a reduced or failing grade in the course. Other penalties may be imposed, and all violations will be reported to the Honor Council. Representing someone else's work as your own, in any form, constitutes an honor code violation. It is also a violation of the honor code to \"render unauthorized assistance to another student by knowingly permitting him or her to see or copy all or a portion of an examination or any work to be submitted for academic credit.\" Automated tools may be used on any assignment, at any time, to detect inappropriate collaboration and the originality of submissions. Generative AI You are permitted to use AI technology in ways that support your learning. The use of AI is strictly prohibited during quizzes and exams, so make sure you can program independently. Refer to the Generative AI in Computing Education Student Guide for examples of appropriate use. Attribution A key component of academic integrity is giving credit where credit is due. If you receive assistance, either from another student, an online source, or an AI-enabled tool, you must provide a clear and explicit acknowledgment of that assistance in your submission. To that end, every homework assignment must include a statement describing your process for completing the work. Here is an example illustrating the format that I expect: \"I was able to complete questions one and two with no assistance after reading the zyBook chapter. I got stuck on question three, but TA Jamie talked me through the solution during office hours. My solution for that question is based on her advice. I had no idea how to get started on question four, so I put the prompt into ChatGPT and asked it for an annotated solution. I didn't understand the resulting code, so I talked it over with my friend Xavier. He explained how negative string indexing works, which helped me to understand the code. My final submission for that question is copied from the ChatGPT output.\" Any submission without such an acknowledgment statement will receive an automatic zero. Full credit for homework assignments is conditional on making a good-faith effort to develop the skills necessary to answer each question independently. Submissions like the following would result in a zero on the assignment. \"I was in a hurry so I just copied all of the prompts into ChatGPT and uploaded the resulting code.\" \"My friend Bill had already completed the assignment and sent me a copy of his solution. I submitted a copy of his code after reading it over and improving some variable names.\" If I find evidence of a violation of the honor code, I will bring the matter to the attention of the involved individuals via email and request a face-to-face meeting. As per section IV of the honor code, first time student offenders may agree that a violation has occurred and accept an appropriate penalty by submitting an \"Informal Resolution Agreement Form\" to the honor council. If the student is not a first-time offender or if there is disagreement about the violation or penalty, the matter will be refered to the honor council under section V of the honor code. Important Notes You must achieve a B\u2013 or better grade to continue on to CS 159. Adding and Dropping the Course Students are responsible for adding and dropping courses. Please consult the appropriate academic calendar for the exact deadlines. I will not give \"WP\" or \"WF\" grades to students requesting a drop after the deadline except in extraordinary circumstances. Disability Accommodations If you need an accommodation based on the impact of a disability, you must contact the Office of Disability Services if you have not previously done so. Disability Services will provide you with an Access Plan letter that will verify your need for services and make recommendations for accommodations to be used in the classroom. Once you have shown me this letter, we will sit down and review the course requirements, your disability characteristics, and your requested accommodations to develop an individualized plan appropriate for this course. I will not make any accommodations without the appropriate documentation, as I am not qualified to diagnose disabilities. Excused Absences Besides the policies in this syllabus, the University's policies apply during the semester. Various policies that may be relevant appear in the Undergraduate Catalog. Excused absences will be granted at my discretion and only with appropriate documentation. Please contact me as soon as possible if you wish to request an excused absence. Missing an exam for reasons such as illness, religious observance, participation in required university activities, or family or personal emergency (such as a serious automobile accident or the funeral of a close relative) all are circumstances that may qualify as an excused absence. Where possible you should attempt by all means necessary to attend and take exams at their regularly scheduled class period. Inclement Weather In case of inclement weather, we will hold class online via Zoom. A link will be available via an announcement in Canvas. Otherwise, this class will operate in accord with JMU's official cancellation policy . Catalog Description CS 149.Introduction to Programming. 3 credits. Fundamental problem-solving techniques using a modern programming language. Topics include variables, input/output, decisions, loops, functions, arrays, and objects. Students learn about algorithm development, testing strategies, and software tools. Students may not receive credit for both CS 139 and CS 149 .","title":"Syllabus for CS149 Spring 2023 Section 3 - Instructor: Chao"},{"location":"cs149fall2024/syllabus/#syllabus-for-cs149-spring-2023-section-3-instructor-chao","text":"","title":"Syllabus for CS149 Spring 2023 Section 3 - Instructor: Chao"},{"location":"cs149fall2024/syllabus/#objectives-and-expectations","text":"Official course description: Fundamental problem-solving techniques using a modern programming language. By the end of this course, you should be able to: *Explain fundamental programming concepts (e.g, variables, methods, decisions, loops, arrays, objects) using appropriate terminology. Describe basic elements of high-level programming languages, including expressions, statements, functions, modules, and libraries. Read and interpret software specifications and write source code from them. Use automated software tools and processes to test your programs thoroughly. Distinguish appropriate collaboration from cheating on assignments and exams. Evaluate your own work for compliance with requirements and style guidelines. Develop correct and efficient algorithms to solve problems using computation.","title":"Objectives and Expectations"},{"location":"cs149fall2024/syllabus/#course-textbook","text":"Required Textbook","title":"Course Textbook"},{"location":"cs149fall2024/syllabus/#zybook","text":"Purchase the text through the Buy Book assignment in Canvas.","title":"Zybook:"},{"location":"cs149fall2024/syllabus/#grading-criteria","text":"You are responsible for all material discussed in lecture and discussion section and posted on the class web page, including announcements, deadlines, policies, etc. Your final course grade will be determined according to the following percentages: Item Percentage Zybook Readings 5% Participation/Labs 10% Homework / Programming Assignments 15% In Class Quizzes 45% Final Exam 25% Reading Quizzes, Labs, Homework / Programming Assignments This portion of your grade will be based on graded labs, reading quizzes, and homework problems assigned. I will drop a to be determined amount(probably 2-3) of reading quizzes and labs at the end of the semester to account for the 'bad day' or unforseen circumstances for missing a particular day. ** Quizzes(In Class)** Quizzes(In class) There will be 6 in-class quizzes on Thursdays. There will be practice quizzes one week then the following week will be the actual quiz for that section. Final Exam The final exam will be two hours: one for written problems, one for coding problems. If you must be absent during an exam for a legitimate reason, you must contact me at least one week beforehand to make special arrangements. Failure to make prior arrangements for a missed exam will result in a zero grade. The instructor reserves the right to give students who do not earn 60% of the points on the final exam no higher than a C for the course. Except in extraordinary situations, you will not be excused from exams. Your instructor will be the sole arbiter of whether a situation qualifies as extraordinary. Hence, you should behave as if you will not be excused from exams for any reason. Letter grades will be assigned on the scale A=90-100, B=80-89, C=70-79, D=60-69, F=0-59, with potential minor adjustments after considering the overall performance of the class and actual distribution of numeric scores. I will use \u201c+\u201d and \u201c-\u201d grades at my discretion. Final course letter grades may be curved if necessary at the end of the semester, based on each student's overall performance for all coursework. If you believe I have made an error while grading your work or calculating your final score, please bring it to my attention after class or during office hours. If I determine that there has been a simple mistake, I will fix it immediately and no formal request is necessary. If you believe an exam question or assignment has been graded unfairly, you must submit a verbal or written formal request for a regrade. Such requests must be submitted within one week of when the assignment in question is returned to you. Any coursework submitted for reconsideration may be regraded in its entirety, which could result in a lower score if warranted.","title":"Grading Criteria"},{"location":"cs149fall2024/syllabus/#instructor-contact-info","text":"Please post generic questions to Piazza, where other students may answer and/or benefit from my answers. My email is chaoaj at the standard domain. My office is in ISAT 264, and my office hours are posted on the main course page . I am also sometimes available outside office hours by appointment; if you wish to make an appointment, send me an email.","title":"Instructor Contact Info"},{"location":"cs149fall2024/syllabus/#course-policies","text":"Important announcements will be made in class and/or on the class website. Please make it a habit to check the web page daily. Although every effort has been made to be complete and accurate, unforeseen circumstances arising during the semester could require the adjustment of any material given here. Consequently, given due notice to students, I reserve the right to change any information on this syllabus or in other course materials. You are permitted to use course materials for your own personal use only. Course materials may not be distributed publicly or provided to others (excepting other students in the course), in any way or format unless explicitly allowed.","title":"Course Policies"},{"location":"cs149fall2024/syllabus/#attendance-and-participation","text":"Attendance is not mandatory, but participation will be used as a part of your lab/quiz grade portion. I strongly encourage you to attend every class session and participate fully in order to derive the maximum benefit of this course. If you believe that there is something I could change about the way I am handling the course in order to improve its effectiveness for you, please let me know via email or office hours. Please silence your cell phone while class is in session. If you have a laptop or tablet, you are encouraged to bring it to class and use it to work along with programming examples and exercises. Mute the volume to avoid unintended interruptions, and do not use any electronic devices for activities that may distract other students. Repeated violations of this policy may result in disciplinary action or a grade penalty in the course. I strongly encourage you to check the main website and the Piazza web forum regularly for important announcements (usually regarding programming projects). You may also use the Piazza forum to ask general questions of interest to the class as a whole (e.g., administrative issues or project clarification questions) as well as to offer each other general advice on class assignments. However, do not post any information that would violate the university academic integrity policy. If you are unsure about this, please email me for approval before you post.","title":"Attendance and Participation"},{"location":"cs149fall2024/syllabus/#homework","text":"Written and/or programming exercises will be assigned each week. These exercises are meant to give you a chance to practice the skills you need to develop in this course. You are welcome to discuss these assignments with your classmates and to use generative AI tools to help develop and understand solutions. Be careful! Being able to understand a friend's code, or code generated using an AI tool, is very different from being able to write code on your own. If you become over-reliant on outside assistance you won't develop the skills you need to succeed on quizzes and exams. Late Homework Policy Deadlines exist, in part, so that we can discuss solutions in class. Under normal circumstances, late work will not be accepted. Contact me if you are facing unavoidable circumstances that will prevent you from submitting an assignment on time. I will do my best to work with you to make appropriate accommodations. Please don't wait until the night before to get started!","title":"Homework"},{"location":"cs149fall2024/syllabus/#programming-assignmentspas","text":"PA's must be submitted electronically following the instructions given in class and on the website. Assignments may not be submitted by any other means (e.g., do not email your projects to me unless I request that). It is your responsibility to test your program and verify that it works properly before submitting it. All assignments are due at 23:00 (11:00pm) on the day indicated on the assignment unless noted otherwise. Late assignments will not be accepted. Regardless of the any other late policy, I reserve the right to refuse to grade any programs submitted after the beginning of the second class period following the project deadline, because I may discuss the solution in class. Project extensions will not necessarily be granted due to server congestion, system problems, network problems, power outages, etc., so do not wait to submit a program until the night it is due. No consideration in grading will be made for errors made in transferring files or submitting the wrong version of your project. Having a working, non-submitted version will not count; only submitted code will be be counted. You will be responsible for developing your own techniques for testing your projects before submitting it. I will grade your assignment based on test cases not provided to you in advance. Because grading may be done automatically, you must follow the project specification exactly. Your code will be graded on a combination of correctness, completeness, documentation, and code style. Any \"hard coding\" in a project assignment will result in a score of zero for that assignment, and is considered a bad-faith effort. Hard coding refers to attempting to make a program appear as if it works correctly, when in fact it does not. One example of hard coding would be printing the desired output instead of computing it. If you have any questions as to what constitutes hard coding for a particular assignment, be sure to ask ahead of time.","title":"Programming Assignments(PA's)"},{"location":"cs149fall2024/syllabus/#academic-honesty","text":"You are expected to comply with the JMU Honor Code as stated in the Student Handbook and available from the Honor Council website on all assignments, projects, and exams.","title":"Academic Honesty"},{"location":"cs149fall2024/syllabus/#honor-code","text":"Students who violate the Honor Code (https://www.jmu.edu/honorcode/code.shtml) will receive a reduced or failing grade in the course. Other penalties may be imposed, and all violations will be reported to the Honor Council. Representing someone else's work as your own, in any form, constitutes an honor code violation. It is also a violation of the honor code to \"render unauthorized assistance to another student by knowingly permitting him or her to see or copy all or a portion of an examination or any work to be submitted for academic credit.\" Automated tools may be used on any assignment, at any time, to detect inappropriate collaboration and the originality of submissions.","title":"Honor Code"},{"location":"cs149fall2024/syllabus/#generative-ai","text":"You are permitted to use AI technology in ways that support your learning. The use of AI is strictly prohibited during quizzes and exams, so make sure you can program independently. Refer to the Generative AI in Computing Education Student Guide for examples of appropriate use.","title":"Generative AI"},{"location":"cs149fall2024/syllabus/#attribution","text":"A key component of academic integrity is giving credit where credit is due. If you receive assistance, either from another student, an online source, or an AI-enabled tool, you must provide a clear and explicit acknowledgment of that assistance in your submission. To that end, every homework assignment must include a statement describing your process for completing the work. Here is an example illustrating the format that I expect: \"I was able to complete questions one and two with no assistance after reading the zyBook chapter. I got stuck on question three, but TA Jamie talked me through the solution during office hours. My solution for that question is based on her advice. I had no idea how to get started on question four, so I put the prompt into ChatGPT and asked it for an annotated solution. I didn't understand the resulting code, so I talked it over with my friend Xavier. He explained how negative string indexing works, which helped me to understand the code. My final submission for that question is copied from the ChatGPT output.\" Any submission without such an acknowledgment statement will receive an automatic zero. Full credit for homework assignments is conditional on making a good-faith effort to develop the skills necessary to answer each question independently. Submissions like the following would result in a zero on the assignment. \"I was in a hurry so I just copied all of the prompts into ChatGPT and uploaded the resulting code.\" \"My friend Bill had already completed the assignment and sent me a copy of his solution. I submitted a copy of his code after reading it over and improving some variable names.\" If I find evidence of a violation of the honor code, I will bring the matter to the attention of the involved individuals via email and request a face-to-face meeting. As per section IV of the honor code, first time student offenders may agree that a violation has occurred and accept an appropriate penalty by submitting an \"Informal Resolution Agreement Form\" to the honor council. If the student is not a first-time offender or if there is disagreement about the violation or penalty, the matter will be refered to the honor council under section V of the honor code. Important Notes You must achieve a B\u2013 or better grade to continue on to CS 159. Adding and Dropping the Course Students are responsible for adding and dropping courses. Please consult the appropriate academic calendar for the exact deadlines. I will not give \"WP\" or \"WF\" grades to students requesting a drop after the deadline except in extraordinary circumstances.","title":"Attribution"},{"location":"cs149fall2024/syllabus/#disability-accommodations","text":"If you need an accommodation based on the impact of a disability, you must contact the Office of Disability Services if you have not previously done so. Disability Services will provide you with an Access Plan letter that will verify your need for services and make recommendations for accommodations to be used in the classroom. Once you have shown me this letter, we will sit down and review the course requirements, your disability characteristics, and your requested accommodations to develop an individualized plan appropriate for this course. I will not make any accommodations without the appropriate documentation, as I am not qualified to diagnose disabilities.","title":"Disability Accommodations"},{"location":"cs149fall2024/syllabus/#excused-absences","text":"Besides the policies in this syllabus, the University's policies apply during the semester. Various policies that may be relevant appear in the Undergraduate Catalog. Excused absences will be granted at my discretion and only with appropriate documentation. Please contact me as soon as possible if you wish to request an excused absence. Missing an exam for reasons such as illness, religious observance, participation in required university activities, or family or personal emergency (such as a serious automobile accident or the funeral of a close relative) all are circumstances that may qualify as an excused absence. Where possible you should attempt by all means necessary to attend and take exams at their regularly scheduled class period.","title":"Excused Absences"},{"location":"cs149fall2024/syllabus/#inclement-weather","text":"In case of inclement weather, we will hold class online via Zoom. A link will be available via an announcement in Canvas. Otherwise, this class will operate in accord with JMU's official cancellation policy .","title":"Inclement Weather"},{"location":"cs149fall2024/syllabus/#catalog-description","text":"CS 149.Introduction to Programming. 3 credits. Fundamental problem-solving techniques using a modern programming language. Topics include variables, input/output, decisions, loops, functions, arrays, and objects. Students learn about algorithm development, testing strategies, and software tools. Students may not receive credit for both CS 139 and CS 149 .","title":"Catalog Description"},{"location":"cs149fall2024/labs/10_pa1-tests/","text":"Lab12 - PA1 Unit Tests Videos for explanation of Cant Stop: 1) https://www.youtube.com/watch?v=sI3HLZ36VPM 2) Our version: https://youtu.be/g1DFGT_1tJQ Here is a starting point for Part A of the project. Two example assert statements are provided for each test function. You should add at least three more to each function, so that every requirement of the project is tested. Note: Docstrings are generally not required for test functions. But you should still have a module docstring with your name and date. test_dice.py \"\"\"Test_dice.py - test the dice module. @author: Alvin Chao @version: 3-21-24 I got help from TA Madison on the valid tests. \"\"\" import unittest import dice class TestDice(unittest.TestCase): def test_roll_dice_valid(self): expected = [4] actual = dice.roll_dice(1,0) self.assertEqual(expected, actual, \"1-0\") def test_roll_dice_invalid(self): pass def test_are_valid_valid(self): pass def test_are_valid_invalid(self): pass if __name__ == '__main__': unittest.main() Also here are some stubs for the dice module: \"\"\" PA1- dice.py. @author: Alvin Chao @version: 3-21-24 I got help from TA Marshall on the invalid tests. \"\"\" def roll_dice(num, seed): my_dice = [] my_dice.append[6] return my_dice def are_valid(dice): return True","title":"Lab12 - PA1 Unit Tests"},{"location":"cs149fall2024/labs/10_pa1-tests/#lab12-pa1-unit-tests","text":"Videos for explanation of Cant Stop: 1) https://www.youtube.com/watch?v=sI3HLZ36VPM 2) Our version: https://youtu.be/g1DFGT_1tJQ Here is a starting point for Part A of the project. Two example assert statements are provided for each test function. You should add at least three more to each function, so that every requirement of the project is tested. Note: Docstrings are generally not required for test functions. But you should still have a module docstring with your name and date. test_dice.py \"\"\"Test_dice.py - test the dice module. @author: Alvin Chao @version: 3-21-24 I got help from TA Madison on the valid tests. \"\"\" import unittest import dice class TestDice(unittest.TestCase): def test_roll_dice_valid(self): expected = [4] actual = dice.roll_dice(1,0) self.assertEqual(expected, actual, \"1-0\") def test_roll_dice_invalid(self): pass def test_are_valid_valid(self): pass def test_are_valid_invalid(self): pass if __name__ == '__main__': unittest.main() Also here are some stubs for the dice module: \"\"\" PA1- dice.py. @author: Alvin Chao @version: 3-21-24 I got help from TA Marshall on the invalid tests. \"\"\" def roll_dice(num, seed): my_dice = [] my_dice.append[6] return my_dice def are_valid(dice): return True","title":"Lab12 - PA1 Unit Tests"},{"location":"cs149fall2024/labs/11_lab13-list-play/","text":"Lab13 - List Play - Processing list elements Background You will write today's program from scratch. Create a new Python program named list_play with a main method. For each step below, you should add code to the program without replacing prior code. When you are finished, this program will provide you with a reference for working with lists/arrays including initializing, printing, and comparing. Objectives - Use a list to store a sequence of values. - Display the contents of an list with a loop. - Practice manipulating various types of lists. Key Terms initializer list list of values used to instantiate and initialize an array in one step len(list) Returns the number of elements in a list subscript integer value in brackets [ ] that specifies an element of an array/list ArrayIndexOutOfBoundsException error raised when trying to access A[i] where i < 0 or i >= A.length Part 1: Sequentially accessing an array Whenever you are asked to do something to your array and then print it, you should finish the update step first and then have a separate loop to do the printing. 1. Create a function called part_one() that creates a single array of integers that is 6 elements long you can initialize zero values for the initial array. 2. Initialize each of the array elements to the value -1 using a loop of your choice. 3. In another loop, save each element of the array into a string with newlines at the end as shown: array[0] = -1 array[1] = -1 ... Add code to change the value of each element of the array to its subscript. For example, array[3] should hold the value 3. Store the new contents of the array into the return string. You may copy and paste the code from step 3. If you have not seen a list index out of range error, make one by causing a loop to read past the end of the array. What happens? Fix the code that causes the list index out of range. Then add code to re-initialize Your function should return the final return string value(see expected FINAL OUTPUT section below for how this will look if you print the contents of part_one return string. Part 2: Randomly accessing an array Create a function called dice_roll(seed). This function will take in a see value for the random module and return a dice roll value of 1-6. Don't forget to import random at the top of your program to use the random module. You should check that your seed is not None as well. Create a function called part_two(). This should: Create an array of 6 int values [0, 0, 0, 0 ,0 , 0] Create a loop that will iterate at least 25 times. In the loop body: Roll the die. (using the dice_roll method in #1 above where the seed value sent is the index value of the loop for the 25 time 0-24) Based on the result of the roll, add up the corresponding cell of your array. The value of each array element should be the number of times that roll is made. After the loop finishes, print the results of the simulation. For example, the final array should be: [2, 8, 4, 4, 4, 3] you would output: 1 was rolled 2 times. 2 was rolled 8 times. ... see the FINAL OUTPUT below for how this should be formatted with double return statements at the end and return this output as a return string for the function. Part 3: Working with multiple arrays For this exercise, you will need two arrays of double values. Create a main section that sets up the two arrays like this: print(\"Before\") a1 = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0] a2 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] print(store_array_values(a1, a2)) change_array(a1, a2) print(\"After\") print(store_array_values(a1, a2)) Write the first function store_array_values(a1, a2) which will take the two arrays as input then return an return string of the values of the arrays. See the FINAL OUTPUT section below for how this is formatted. Write a second function change_array(a1, a2): This will change the values of the array as follows: Write a loop to change all values of a2 to those in a1. Finally, change the index 0 element of the first array(a1) to 99.0 and the index 5 element of the second array(a2) to 99.0. Check that the contents of the two arrays are indeed different after calling your change_array function. If not, make the appropriate corrections. Check all output with the lab14.exp expected output below. FINAL OUTPUT Here is the expected output file for lab13.exp Submit your final list_play file to https://gradescope.com.","title":"Lab13 - List Play - Processing list elements"},{"location":"cs149fall2024/labs/11_lab13-list-play/#lab13-list-play-processing-list-elements","text":"","title":"Lab13 - List Play - Processing list elements"},{"location":"cs149fall2024/labs/11_lab13-list-play/#background","text":"You will write today's program from scratch. Create a new Python program named list_play with a main method. For each step below, you should add code to the program without replacing prior code. When you are finished, this program will provide you with a reference for working with lists/arrays including initializing, printing, and comparing.","title":"Background"},{"location":"cs149fall2024/labs/11_lab13-list-play/#objectives","text":"- Use a list to store a sequence of values. - Display the contents of an list with a loop. - Practice manipulating various types of lists.","title":"Objectives"},{"location":"cs149fall2024/labs/11_lab13-list-play/#key-terms","text":"initializer list list of values used to instantiate and initialize an array in one step len(list) Returns the number of elements in a list subscript integer value in brackets [ ] that specifies an element of an array/list ArrayIndexOutOfBoundsException error raised when trying to access A[i] where i < 0 or i >= A.length","title":"Key Terms"},{"location":"cs149fall2024/labs/11_lab13-list-play/#part-1-sequentially-accessing-an-array","text":"Whenever you are asked to do something to your array and then print it, you should finish the update step first and then have a separate loop to do the printing. 1. Create a function called part_one() that creates a single array of integers that is 6 elements long you can initialize zero values for the initial array. 2. Initialize each of the array elements to the value -1 using a loop of your choice. 3. In another loop, save each element of the array into a string with newlines at the end as shown: array[0] = -1 array[1] = -1 ... Add code to change the value of each element of the array to its subscript. For example, array[3] should hold the value 3. Store the new contents of the array into the return string. You may copy and paste the code from step 3. If you have not seen a list index out of range error, make one by causing a loop to read past the end of the array. What happens? Fix the code that causes the list index out of range. Then add code to re-initialize Your function should return the final return string value(see expected FINAL OUTPUT section below for how this will look if you print the contents of part_one return string.","title":"Part 1: Sequentially accessing an array"},{"location":"cs149fall2024/labs/11_lab13-list-play/#part-2-randomly-accessing-an-array","text":"Create a function called dice_roll(seed). This function will take in a see value for the random module and return a dice roll value of 1-6. Don't forget to import random at the top of your program to use the random module. You should check that your seed is not None as well. Create a function called part_two(). This should: Create an array of 6 int values [0, 0, 0, 0 ,0 , 0] Create a loop that will iterate at least 25 times. In the loop body: Roll the die. (using the dice_roll method in #1 above where the seed value sent is the index value of the loop for the 25 time 0-24) Based on the result of the roll, add up the corresponding cell of your array. The value of each array element should be the number of times that roll is made. After the loop finishes, print the results of the simulation. For example, the final array should be: [2, 8, 4, 4, 4, 3] you would output: 1 was rolled 2 times. 2 was rolled 8 times. ... see the FINAL OUTPUT below for how this should be formatted with double return statements at the end and return this output as a return string for the function.","title":"Part 2: Randomly accessing an array"},{"location":"cs149fall2024/labs/11_lab13-list-play/#part-3-working-with-multiple-arrays","text":"For this exercise, you will need two arrays of double values. Create a main section that sets up the two arrays like this: print(\"Before\") a1 = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0] a2 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] print(store_array_values(a1, a2)) change_array(a1, a2) print(\"After\") print(store_array_values(a1, a2)) Write the first function store_array_values(a1, a2) which will take the two arrays as input then return an return string of the values of the arrays. See the FINAL OUTPUT section below for how this is formatted. Write a second function change_array(a1, a2): This will change the values of the array as follows: Write a loop to change all values of a2 to those in a1. Finally, change the index 0 element of the first array(a1) to 99.0 and the index 5 element of the second array(a2) to 99.0. Check that the contents of the two arrays are indeed different after calling your change_array function. If not, make the appropriate corrections. Check all output with the lab14.exp expected output below.","title":"Part 3: Working with multiple arrays"},{"location":"cs149fall2024/labs/11_lab13-list-play/#final-output","text":"Here is the expected output file for lab13.exp Submit your final list_play file to https://gradescope.com.","title":"FINAL OUTPUT"},{"location":"cs149fall2024/labs/12_lab14-files/","text":"Lab14 - Files Introduction Pygame is a Python library that makes it possible to program simple 2-D games and animations. In this lab we will modify a simple bouncing ball simulator to add file load and save functionality. On your home computer you may need to install the module pygame via: python3 -m pip install pygame A second goal for today\u2019s lab is to practice working on the Linux command line. DON\u2019T START THONNY. For today, we\u2019ll be using nano as our text editor and we will run our code from the terminal. Bounce Download the following file and open it in nano. (Pay close attention to where the file is being saved!) bounce.py When you start nano, make sure to use the -ET4 flag. This tells nano to insert four spaces when you hit the tab key. Otherwise it will introduce tab characters into your Python code, which is bad. For example: spragunr@l25002:~/bounce_lab$ nano -ET4 bounce.py Take a few minutes to look over the existing code to get a feel for how it works. Assuming you are in the same folder, you should be able to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py Try editing the file to change the initial position, size or color of the bouncing ball. File Loading The next step is to add functionality to bounce.py enabling it to read a file containing ball descriptions. The name of the file will be provided as a command line argument. For, example, the file three_balls.dat contains the following three lines: 100 20 5 100 0 0 200 20 10 0 150 0 400 20 15 0 0 200 Each line describes a single ball with the format: x_position y_position radius red green blue You\u2019ll need to complete the load_game method in the BounceGame class. That method should then be called from the existing main function. In order to read the command line argument you\u2019ll need to import the sys module from the Python standard libraries: import sys After the necessary modifications, it should be possible to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat If everything is working correctly, three balls should appear on the screen with the appropriate sizes and colors. Here is another data file that you can try: many_balls.dat . ============ File Save (If Time) We also want to be able to save the state of the game so that when the program is restarted, all of the balls will appear at the same locations as they were when the game was saved. Add a save_gamemethod to BounceGame and modify the run method so that the save method will be called when the user presses s. By default, the file created should be named saved.dat. Once this is working, modify the program so that saved.dat is opened by default if no command line argument is provided. In other words, this would open three_balls.dat: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat This would open saved.dat: spragunr@l25002:~/bounce_lab$ python bounce.py There is nothing to submit for this lab.","title":"Lab14 - Files"},{"location":"cs149fall2024/labs/12_lab14-files/#lab14-files","text":"","title":"Lab14 - Files"},{"location":"cs149fall2024/labs/12_lab14-files/#introduction","text":"Pygame is a Python library that makes it possible to program simple 2-D games and animations. In this lab we will modify a simple bouncing ball simulator to add file load and save functionality. On your home computer you may need to install the module pygame via: python3 -m pip install pygame A second goal for today\u2019s lab is to practice working on the Linux command line. DON\u2019T START THONNY. For today, we\u2019ll be using nano as our text editor and we will run our code from the terminal.","title":"Introduction"},{"location":"cs149fall2024/labs/12_lab14-files/#bounce","text":"Download the following file and open it in nano. (Pay close attention to where the file is being saved!) bounce.py When you start nano, make sure to use the -ET4 flag. This tells nano to insert four spaces when you hit the tab key. Otherwise it will introduce tab characters into your Python code, which is bad. For example: spragunr@l25002:~/bounce_lab$ nano -ET4 bounce.py Take a few minutes to look over the existing code to get a feel for how it works. Assuming you are in the same folder, you should be able to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py Try editing the file to change the initial position, size or color of the bouncing ball.","title":"Bounce"},{"location":"cs149fall2024/labs/12_lab14-files/#file-loading","text":"The next step is to add functionality to bounce.py enabling it to read a file containing ball descriptions. The name of the file will be provided as a command line argument. For, example, the file three_balls.dat contains the following three lines: 100 20 5 100 0 0 200 20 10 0 150 0 400 20 15 0 0 200 Each line describes a single ball with the format: x_position y_position radius red green blue You\u2019ll need to complete the load_game method in the BounceGame class. That method should then be called from the existing main function. In order to read the command line argument you\u2019ll need to import the sys module from the Python standard libraries: import sys After the necessary modifications, it should be possible to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat If everything is working correctly, three balls should appear on the screen with the appropriate sizes and colors. Here is another data file that you can try: many_balls.dat . ============","title":"File Loading"},{"location":"cs149fall2024/labs/12_lab14-files/#file-save-if-time","text":"We also want to be able to save the state of the game so that when the program is restarted, all of the balls will appear at the same locations as they were when the game was saved. Add a save_gamemethod to BounceGame and modify the run method so that the save method will be called when the user presses s. By default, the file created should be named saved.dat. Once this is working, modify the program so that saved.dat is opened by default if no command line argument is provided. In other words, this would open three_balls.dat: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat This would open saved.dat: spragunr@l25002:~/bounce_lab$ python bounce.py There is nothing to submit for this lab.","title":"File Save (If Time)"},{"location":"cs149fall2024/labs/13_lab15-recursive-lists/","text":"Lab 15 - Recursion Lab Your goal is to write a function that can add all integers in a list. Sounds simple enough, right? Here's the catch: the list can contain integers, or other lists. Those lists can contain integers or other lists, and so on and so on. Hint: Start by writing code to sum up integers in a regular list (using a loop). Then, think about what you need to do differently if an item is a list vs. an int. def add_all(nums): \"\"\"Add all the integers in the given list, recursively. The list may contain ints and/or other lists containing ints/lists. Args: nums (list): A list of ints and/or other lists containing ints/lists. Returns: (int): The sum of all the integers in the given list. \"\"\" More Practice - code the following recursive algorithms: bunny_ears We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication). Example Test calls: bunny_ears(0) \u2192 0 bunny_ears(1) \u2192 2 bunny_ears(2) \u2192 4 triangle We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows. Example Test calls: triangle(0) \u2192 0 triangle(1) \u2192 1 triangle(2) \u2192 3 sum_digits Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). Example Test calls: sum_digits(126) \u2192 9 sum_digits(49) \u2192 13 sum_digits(12) \u2192 3 count8 Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, except that an 8 with another 8 immediately to its left counts double, so 8818 yields 4. Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). Example Test calls: count8(8) \u2192 1 count8(818) \u2192 2 count8(8818) \u2192 4","title":"Lab 15 - Recursion Lab"},{"location":"cs149fall2024/labs/13_lab15-recursive-lists/#lab-15-recursion-lab","text":"Your goal is to write a function that can add all integers in a list. Sounds simple enough, right? Here's the catch: the list can contain integers, or other lists. Those lists can contain integers or other lists, and so on and so on. Hint: Start by writing code to sum up integers in a regular list (using a loop). Then, think about what you need to do differently if an item is a list vs. an int. def add_all(nums): \"\"\"Add all the integers in the given list, recursively. The list may contain ints and/or other lists containing ints/lists. Args: nums (list): A list of ints and/or other lists containing ints/lists. Returns: (int): The sum of all the integers in the given list. \"\"\" More Practice - code the following recursive algorithms:","title":"Lab 15 - Recursion Lab"},{"location":"cs149fall2024/labs/13_lab15-recursive-lists/#bunny_ears","text":"We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication). Example Test calls: bunny_ears(0) \u2192 0 bunny_ears(1) \u2192 2 bunny_ears(2) \u2192 4","title":"bunny_ears"},{"location":"cs149fall2024/labs/13_lab15-recursive-lists/#triangle","text":"We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows. Example Test calls: triangle(0) \u2192 0 triangle(1) \u2192 1 triangle(2) \u2192 3","title":"triangle"},{"location":"cs149fall2024/labs/13_lab15-recursive-lists/#sum_digits","text":"Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). Example Test calls: sum_digits(126) \u2192 9 sum_digits(49) \u2192 13 sum_digits(12) \u2192 3","title":"sum_digits"},{"location":"cs149fall2024/labs/13_lab15-recursive-lists/#count8","text":"Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, except that an 8 with another 8 immediately to its left counts double, so 8818 yields 4. Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). Example Test calls: count8(8) \u2192 1 count8(818) \u2192 2 count8(8818) \u2192 4","title":"count8"},{"location":"cs149fall2024/labs/14_lab16-stars/","text":"Lab16 - Nested Loops (Stars) Background In the good old days, we didn't have fancy computer graphics. So we had to rely on ASCII artLinks to an external site. and the user's imagination. Today's lab will take you back in time! Your task is to draw various pictures of stars ( '*' ) that require the creative use of iteration and decisions. Objectives Write nested for loops and decisions. Solve counting problems with loops. Instructions Download stars.py open it in Thonny. Write your name and today's date in the docstring comment. Run the program. What shape does this pattern produce? Notice the relationship between the row (outer loop) and the number of stars that are printed. Notice the relationship between the col (inner loop) and the place where we move to a new line. Add code to your program to create functions for Patterns A, B, and C as shown below. The functions should include a parameter max_rows that will give the number of rows to output. Pattern A ********** ********* ******** ******* ****** ***** **** *** ** * The leftmost stars are in the leftmost output column. Test your code with an odd number of stars and an even number of stars. HINT : While developing the code, replace each space with another character that is visible. Pattern B * ** *** **** ***** ****** ******* ******** ********* ********** The leftmost star of the last row is in the first position of the output column. HINT : You used star_count in the original example and Pattern A. You should think about using a blank_count variable as well. Pattern C ********** ********* ******** ******* ****** ***** **** *** ** * The top row, leftmost star is in the first position of the output. HINT : It should be the same as Pattern B, except for the way you calculate blank_count and star_count. Generalization Finish the functions patterns A, B, and C. If you finish early, work on the following pattern D. Pattern D (challenge) * *** ***** ******* ********* ******* ***** *** * For an odd number of rows, you would only have one middle line. The middle row leftmost star is in the first position of the output. HINT : Consider writing two loops: one for the top half, and another for the bottom half. You may also want to increment and decrement star_count and blank_count, rather than calculate them directly based on the row number.","title":"Lab16 - Nested Loops (Stars)"},{"location":"cs149fall2024/labs/14_lab16-stars/#lab16-nested-loops-stars","text":"","title":"Lab16 - Nested Loops (Stars)"},{"location":"cs149fall2024/labs/14_lab16-stars/#background","text":"In the good old days, we didn't have fancy computer graphics. So we had to rely on ASCII artLinks to an external site. and the user's imagination. Today's lab will take you back in time! Your task is to draw various pictures of stars ( '*' ) that require the creative use of iteration and decisions.","title":"Background"},{"location":"cs149fall2024/labs/14_lab16-stars/#objectives","text":"Write nested for loops and decisions. Solve counting problems with loops.","title":"Objectives"},{"location":"cs149fall2024/labs/14_lab16-stars/#instructions","text":"Download stars.py open it in Thonny. Write your name and today's date in the docstring comment. Run the program. What shape does this pattern produce? Notice the relationship between the row (outer loop) and the number of stars that are printed. Notice the relationship between the col (inner loop) and the place where we move to a new line. Add code to your program to create functions for Patterns A, B, and C as shown below. The functions should include a parameter max_rows that will give the number of rows to output.","title":"Instructions"},{"location":"cs149fall2024/labs/14_lab16-stars/#pattern-a","text":"********** ********* ******** ******* ****** ***** **** *** ** * The leftmost stars are in the leftmost output column. Test your code with an odd number of stars and an even number of stars. HINT : While developing the code, replace each space with another character that is visible.","title":"Pattern A"},{"location":"cs149fall2024/labs/14_lab16-stars/#pattern-b","text":"* ** *** **** ***** ****** ******* ******** ********* ********** The leftmost star of the last row is in the first position of the output column. HINT : You used star_count in the original example and Pattern A. You should think about using a blank_count variable as well.","title":"Pattern B"},{"location":"cs149fall2024/labs/14_lab16-stars/#pattern-c","text":"********** ********* ******** ******* ****** ***** **** *** ** * The top row, leftmost star is in the first position of the output. HINT : It should be the same as Pattern B, except for the way you calculate blank_count and star_count.","title":"Pattern C"},{"location":"cs149fall2024/labs/14_lab16-stars/#generalization","text":"Finish the functions patterns A, B, and C. If you finish early, work on the following pattern D.","title":"Generalization"},{"location":"cs149fall2024/labs/14_lab16-stars/#pattern-d-challenge","text":"* *** ***** ******* ********* ******* ***** *** * For an odd number of rows, you would only have one middle line. The middle row leftmost star is in the first position of the output. HINT : Consider writing two loops: one for the top half, and another for the bottom half. You may also want to increment and decrement star_count and blank_count, rather than calculate them directly based on the row number.","title":"Pattern D (challenge)"},{"location":"cs149fall2024/labs/15_lab17-exam-review/","text":"Lab17 - Practice for the final exam The final exam consists of two parts (written and coding). Each part will be worth 50 points. Instructions Here is some practice for the final exam. Answer keys will not be provided(you should be able to plug these into Thonny to find answers mostly). You may ask for clarifications or answers for specific questions though. A written exam based on one used in 2022, this is not exact content that will be on the final exam, but rather some concepts to study. This is a practice problem only for timing purposes and may not reflect content coverage on the actual final. The final will likely have more coding questions than just these two. Submit via Gradescope for the coding portion. Let me know if you have any questions, and good luck! Written Exam Practice 1. Circle and label an example of each of the following in the code sample below. A. local variable B. global variable C. method call D. dictionary E. list F. relational operator G. assignment operator H. Boolean operator I. method definition J. parameter K. argument import sys MIN_CHARGE = 10.0 global total_fees def add_student(students, name, sid): # students is a list of dictionaries of student new_stu = { \"name\": name, \"id\": sid, \"balance\": 0 } students.append(new_stu) def apply_charge(students, sid, amount): global total_fees charge = amount charged = False if charge <= MIN_CHARGE: charge = MIN_CHARGE for student in students: if student[\"id\"] == sid: student[\"balance\"] += charge total_fees += charge charged = True return charged if __name__ == \"__main__\": roster = [] total_fees = 0.0 john = add_student(roster, \"John\", 1000) alice = add_student(roster, \"Alice\", 1001) apply_charge(roster, 1001, 0) print(total_fees) 2. Tracing Code Determine what will be printed by each of the following code snippets given the code from the previous page. Each snippet should be considered independently: do not assume that they are executed sequentially, or that the code in the name == \u201c main \u201d block has been executed. If a snippet will result in an error, write ERROR. A. stu_a = [] add_student(stu_a, \"Greta\", 1000) apply_charge(stu_a, 1000, 5.0) print(total_fees) B. stu_b = [] add_student(stu_b, \"Greta\", 1000) add_student(stu_b, \"Harry\", 1001) apply_charge(stu_b, 1000, 12.0) apply_charge(stu_b, 1001, 6.0) print(f\"{stu_b[0].get('balance')}\") print(f\"{stu_b[1].get('balance')}\") print(total_fees) C. stu_c = [] add_student(stu_c, \"Greta\", 1000) add_student(stu_c, \"Harry\", 1001) add_student(stu_c, \"Harry\", 1002) apply_charge(stu_c, 1002, 12.0) apply_charge(stu_c, 1001, 6.0) print(f\"{stu_c[0].get('balance')}\") print(f\"{stu_c[1].get('balance')}\") print(f\"{stu_c[2].get('balance')}\") D. stu_d = [] add_student(stu_d, \"Greta\", 1000) add_student(stu_d, \"Greta\", 1000) apply_charge(stu_d, 1000, 100.0) print(stu_d[0] is stu_d[1]) print(stu_d[0] == stu_d[1]) E. stu_e = [] add_student(stu_e, \"Greta\", 1000) print(stu_e[0] == \"Greta\") 3. Nested For Loops Determine what will be printed by each of the code snippets below. a. letters = [[\"A\", \"B\", \"C\"], [\"X\", \"Y\"]] result = \"\" for var1 in letters: for var2 in var1: result += var2 result += \"\\n\" print(result) b. var1 = \"cat bat\" var2 = var1.split() for first in var2: print(first) for second in first: print(second) c. result = \"\" for i in range(2, 5): for j in range(i): result += \"*\" result += \"\\n\" print(result) 4. Finding Errors For each set of code snippets below, only one of the options will execute without error. Circle the block that will execute successfully. a. my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } for i in range(0, len(my_dictionary)): print(my_dictionary[i]) or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } for i in my_dictionary: print(f\"{i} -> { my_dictionary[i] }\") b. my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } while i in my_dictionary: print(f\"{i} -> { my_dictionary[i] }\") i += 1 or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } for i in my_dictionary: print(i + \" -> \" + str(my_dictionary[i])) c. my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } if len(my_dictionary) > 7: print(\"this is a large dictionary.\") else: print(\"this is a normal-sized dictionary.\") elif len(my_dictionary) < 3: print(\"this is a small dictionary.\") or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } if len(my_dictionary) > 7: print(\"this is a large dictionary.\") elif 3 <= len(my_dictionary) <= 7: print(\"this is a normal-sized dictionary.\") else: print(\"this is a small dictionary.\") or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } if len(my_dictionary) > 7: print(\"this is a large dictionary.\") elif 3 < len(my_dictionary) < 7: print(\"this is a normal-sized dictionary.\") else: print(\"this is a small dictionary.\") 5. File I/O def add_numbers_in_file(file_name): \"\"\"Return the sum of all numbers that appear in the provided file. Each line in the file will contain an arbitrary sequence of numbers separated by white-space. This function will read the file and return the sum of all numbers. For example, if the file contains the following four lines: 12.0 2.0 6.0 10.0 2.5 2.5 Then the return value will be 35.0 Args: file_name (str): The name of a file. E.g. \"numbers.txt\" Returns: float: The sum of all numbers stored in the indicated file. \"\"\" Coding Problem: \"\"\"scheduler - a course schedule planner. @author: YOUR NAME @version: DUE DATE \"\"\" def plan_workload(schedule): \"\"\"Plan course workload for semester given the list of courses. The schedule is a list of courses(which is a dict containing 3 elements: a) string prefix(ie. CS for Computer Science b) int number like 149 for CS149 c int credits = # of credit hours for the course Args: schedule(list): a list of courses as described above Returns: (int): The workload for a set of courses is measured in points. Lower division courses (with numbers below 300) get two points, upper division courses (in the 300-499 range) get three points, and graduate courses (500 and above) get four points. CS and MATH courses get an extra point. 3 credit or lower courses get 1 point while 4 credit courses get 2 and 5 credit ones receive 3 points. If the schedule has zero courses or equals None, then plan_workload should return -1 \"\"\" pass def find_hardest(schedule): \"\"\"Find hardest course for a scheduled list of courses. The schedule is a list of courses(which is a dict containing 3 elements: a) string prefix(ie. CS for Computer Science b)int number like 149 for CS149 c) int credits = # of credit hours for the course Args: schedule(list): a list of courses as described above Returns: (str): Name of last in the list most difficult course(ie most points, CS149 note no space between prefix and number). If the schedule has zero courses or equals None, then find_hardest should return \"Invalid\"). \"\"\" pass if __name__ == \"__main__\": my_sched = [] course1 = { \"prefix\": \"CS\", \"number\": 169, \"credits\": 3 } course2 = { \"prefix\": \"CS\", \"number\": 240, \"credits\": 3 } course3 = { \"prefix\": \"HIST\", \"number\": 101, \"credits\": 3 } my_sched.append(course1) my_sched.append(course2) my_sched.append(course3)","title":"Lab17 - Practice for the final exam"},{"location":"cs149fall2024/labs/15_lab17-exam-review/#lab17-practice-for-the-final-exam","text":"The final exam consists of two parts (written and coding). Each part will be worth 50 points. Instructions Here is some practice for the final exam. Answer keys will not be provided(you should be able to plug these into Thonny to find answers mostly). You may ask for clarifications or answers for specific questions though. A written exam based on one used in 2022, this is not exact content that will be on the final exam, but rather some concepts to study. This is a practice problem only for timing purposes and may not reflect content coverage on the actual final. The final will likely have more coding questions than just these two. Submit via Gradescope for the coding portion. Let me know if you have any questions, and good luck!","title":"Lab17 - Practice for the final exam"},{"location":"cs149fall2024/labs/15_lab17-exam-review/#written-exam-practice","text":"","title":"Written Exam Practice"},{"location":"cs149fall2024/labs/15_lab17-exam-review/#1-circle-and-label-an-example-of-each-of-the-following-in-the-code-sample-below","text":"A. local variable B. global variable C. method call D. dictionary E. list F. relational operator G. assignment operator H. Boolean operator I. method definition J. parameter K. argument import sys MIN_CHARGE = 10.0 global total_fees def add_student(students, name, sid): # students is a list of dictionaries of student new_stu = { \"name\": name, \"id\": sid, \"balance\": 0 } students.append(new_stu) def apply_charge(students, sid, amount): global total_fees charge = amount charged = False if charge <= MIN_CHARGE: charge = MIN_CHARGE for student in students: if student[\"id\"] == sid: student[\"balance\"] += charge total_fees += charge charged = True return charged if __name__ == \"__main__\": roster = [] total_fees = 0.0 john = add_student(roster, \"John\", 1000) alice = add_student(roster, \"Alice\", 1001) apply_charge(roster, 1001, 0) print(total_fees)","title":"1. Circle and label an example of each of the following in the code sample below."},{"location":"cs149fall2024/labs/15_lab17-exam-review/#2-tracing-code","text":"Determine what will be printed by each of the following code snippets given the code from the previous page. Each snippet should be considered independently: do not assume that they are executed sequentially, or that the code in the name == \u201c main \u201d block has been executed. If a snippet will result in an error, write ERROR.","title":"2. Tracing Code"},{"location":"cs149fall2024/labs/15_lab17-exam-review/#a","text":"stu_a = [] add_student(stu_a, \"Greta\", 1000) apply_charge(stu_a, 1000, 5.0) print(total_fees)","title":"A."},{"location":"cs149fall2024/labs/15_lab17-exam-review/#b","text":"stu_b = [] add_student(stu_b, \"Greta\", 1000) add_student(stu_b, \"Harry\", 1001) apply_charge(stu_b, 1000, 12.0) apply_charge(stu_b, 1001, 6.0) print(f\"{stu_b[0].get('balance')}\") print(f\"{stu_b[1].get('balance')}\") print(total_fees)","title":"B."},{"location":"cs149fall2024/labs/15_lab17-exam-review/#c","text":"stu_c = [] add_student(stu_c, \"Greta\", 1000) add_student(stu_c, \"Harry\", 1001) add_student(stu_c, \"Harry\", 1002) apply_charge(stu_c, 1002, 12.0) apply_charge(stu_c, 1001, 6.0) print(f\"{stu_c[0].get('balance')}\") print(f\"{stu_c[1].get('balance')}\") print(f\"{stu_c[2].get('balance')}\")","title":"C."},{"location":"cs149fall2024/labs/15_lab17-exam-review/#d","text":"stu_d = [] add_student(stu_d, \"Greta\", 1000) add_student(stu_d, \"Greta\", 1000) apply_charge(stu_d, 1000, 100.0) print(stu_d[0] is stu_d[1]) print(stu_d[0] == stu_d[1])","title":"D."},{"location":"cs149fall2024/labs/15_lab17-exam-review/#e","text":"stu_e = [] add_student(stu_e, \"Greta\", 1000) print(stu_e[0] == \"Greta\")","title":"E."},{"location":"cs149fall2024/labs/15_lab17-exam-review/#3-nested-for-loops","text":"Determine what will be printed by each of the code snippets below. a. letters = [[\"A\", \"B\", \"C\"], [\"X\", \"Y\"]] result = \"\" for var1 in letters: for var2 in var1: result += var2 result += \"\\n\" print(result) b. var1 = \"cat bat\" var2 = var1.split() for first in var2: print(first) for second in first: print(second) c. result = \"\" for i in range(2, 5): for j in range(i): result += \"*\" result += \"\\n\" print(result)","title":"3. Nested For Loops"},{"location":"cs149fall2024/labs/15_lab17-exam-review/#4-finding-errors","text":"For each set of code snippets below, only one of the options will execute without error. Circle the block that will execute successfully. a. my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } for i in range(0, len(my_dictionary)): print(my_dictionary[i]) or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } for i in my_dictionary: print(f\"{i} -> { my_dictionary[i] }\") b. my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } while i in my_dictionary: print(f\"{i} -> { my_dictionary[i] }\") i += 1 or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } for i in my_dictionary: print(i + \" -> \" + str(my_dictionary[i])) c. my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } if len(my_dictionary) > 7: print(\"this is a large dictionary.\") else: print(\"this is a normal-sized dictionary.\") elif len(my_dictionary) < 3: print(\"this is a small dictionary.\") or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } if len(my_dictionary) > 7: print(\"this is a large dictionary.\") elif 3 <= len(my_dictionary) <= 7: print(\"this is a normal-sized dictionary.\") else: print(\"this is a small dictionary.\") or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } if len(my_dictionary) > 7: print(\"this is a large dictionary.\") elif 3 < len(my_dictionary) < 7: print(\"this is a normal-sized dictionary.\") else: print(\"this is a small dictionary.\")","title":"4. Finding Errors"},{"location":"cs149fall2024/labs/15_lab17-exam-review/#5-file-io","text":"def add_numbers_in_file(file_name): \"\"\"Return the sum of all numbers that appear in the provided file. Each line in the file will contain an arbitrary sequence of numbers separated by white-space. This function will read the file and return the sum of all numbers. For example, if the file contains the following four lines: 12.0 2.0 6.0 10.0 2.5 2.5 Then the return value will be 35.0 Args: file_name (str): The name of a file. E.g. \"numbers.txt\" Returns: float: The sum of all numbers stored in the indicated file. \"\"\" Coding Problem: \"\"\"scheduler - a course schedule planner. @author: YOUR NAME @version: DUE DATE \"\"\" def plan_workload(schedule): \"\"\"Plan course workload for semester given the list of courses. The schedule is a list of courses(which is a dict containing 3 elements: a) string prefix(ie. CS for Computer Science b) int number like 149 for CS149 c int credits = # of credit hours for the course Args: schedule(list): a list of courses as described above Returns: (int): The workload for a set of courses is measured in points. Lower division courses (with numbers below 300) get two points, upper division courses (in the 300-499 range) get three points, and graduate courses (500 and above) get four points. CS and MATH courses get an extra point. 3 credit or lower courses get 1 point while 4 credit courses get 2 and 5 credit ones receive 3 points. If the schedule has zero courses or equals None, then plan_workload should return -1 \"\"\" pass def find_hardest(schedule): \"\"\"Find hardest course for a scheduled list of courses. The schedule is a list of courses(which is a dict containing 3 elements: a) string prefix(ie. CS for Computer Science b)int number like 149 for CS149 c) int credits = # of credit hours for the course Args: schedule(list): a list of courses as described above Returns: (str): Name of last in the list most difficult course(ie most points, CS149 note no space between prefix and number). If the schedule has zero courses or equals None, then find_hardest should return \"Invalid\"). \"\"\" pass if __name__ == \"__main__\": my_sched = [] course1 = { \"prefix\": \"CS\", \"number\": 169, \"credits\": 3 } course2 = { \"prefix\": \"CS\", \"number\": 240, \"credits\": 3 } course3 = { \"prefix\": \"HIST\", \"number\": 101, \"credits\": 3 } my_sched.append(course1) my_sched.append(course2) my_sched.append(course3)","title":"5. File I/O"},{"location":"cs149fall2024/labs/1_lab2-thonny/","text":"Lab02: Python Comand Line and Thonny Introduction The goal for this lab is to gain experience editing, compiling and executing Python programs in the terminal and through the Thonny IDE. You may work on this lab individually or in a group of no more than three people. Executing Python in the Terminal Each of the steps below should be completed entirely inside the terminal : no GUI applications allowed. Refer to the Unix Tutorial for Beginners if you need to learn more about Unix commands. Create a cs149 folder on your desktop mkdir cs149 Move into the cs149 directory: cd cs149 Create a folder inside your home directory named lab02 . mkdir lab02 Move into the lab02 directory: cd lab02 Copy the file welcome.py by doing a Right-Click Save-As and saving it to your lab02 folder. OR here is the code: print (\"Welcome to CS149!\") print(\"It's fun.\") cut and paste this into a file called welcome.py and save it in the lab02 folder. 6. Run welcome.py: $ python3 welcome.py Congratulations! You've successfully executed your first Python program. Editing Files in the Terminal Normally, we will be using an Integrated Development Environment (IDE) to edit and compile Python programs. However, it can sometimes be convenient to edit a file directly in the terminal. There are many terminal-based editors. Today we'll try nano because it is easy to use for beginners. Open welcome.py using nano : $ nano welcome.py You should see something like the following: The two lines of text at the bottom show the set of actions available in the editor. The \"^\" symbol indicates the \"Ctrl\" key. For example, pressing Ctrl-O will \"WriteOut\" (save) any changes you have made to the file. Edit the file so that the welcome message says \"It's REALLY fun.\" instead of \"It's fun.\" . Save your changes and exit. Try executing your program again: $ python3 welcome.py You should see the following output Welcome to CS149! It's REALLY fun. Thonny IDE Objectives Use an IDE (Integrated Development Environment). Edit, save, compile, and run a simple Python program. Recognize and correct syntax errors in a Python program. Key Terms source file the Python program as written by the programmer syntax error mistake in the source code that prevents compilation logic error mistake in the program that causes incorrect behavior execute the process of running a program on a computer Part 1: Thonny Editor Thonny is a text editor designed to simplify the process of editing, debugging and executing Python programs. Open Thonny and click \"File \u2013> Open\" from the menu and select your welcome.py file from above. Press the Green play button on the toolbar to execute the Python file(this is the same thing as running the >>python welcome.py in the terminal. >>> %Run welcome.py Welcome to CS149! It's REALLY fun. Edit the file in Thonny to print another line that prints I have edited a file in Thonny. Save your results by pressing the Floppy disk icon then run the program again by pressing the Green play button. You have just run and edited a program using Thonny. Submission for Lab2 Via https://www.gradescope.com submit the Word of the Day in Canvas and your welcome.py file to Gradescope. Acknowledgments This activity is based on a lab developed by Nathan Sprague based on a lab originally developed by Chris Mayfield.","title":"Lab02: Python Comand Line and Thonny"},{"location":"cs149fall2024/labs/1_lab2-thonny/#lab02-python-comand-line-and-thonny","text":"","title":"Lab02: Python Comand Line and Thonny"},{"location":"cs149fall2024/labs/1_lab2-thonny/#introduction","text":"The goal for this lab is to gain experience editing, compiling and executing Python programs in the terminal and through the Thonny IDE. You may work on this lab individually or in a group of no more than three people.","title":"Introduction"},{"location":"cs149fall2024/labs/1_lab2-thonny/#executing-python-in-the-terminal","text":"Each of the steps below should be completed entirely inside the terminal : no GUI applications allowed. Refer to the Unix Tutorial for Beginners if you need to learn more about Unix commands. Create a cs149 folder on your desktop mkdir cs149 Move into the cs149 directory: cd cs149 Create a folder inside your home directory named lab02 . mkdir lab02 Move into the lab02 directory: cd lab02 Copy the file welcome.py by doing a Right-Click Save-As and saving it to your lab02 folder. OR here is the code: print (\"Welcome to CS149!\") print(\"It's fun.\") cut and paste this into a file called welcome.py and save it in the lab02 folder. 6. Run welcome.py: $ python3 welcome.py Congratulations! You've successfully executed your first Python program.","title":"Executing Python in the Terminal"},{"location":"cs149fall2024/labs/1_lab2-thonny/#editing-files-in-the-terminal","text":"Normally, we will be using an Integrated Development Environment (IDE) to edit and compile Python programs. However, it can sometimes be convenient to edit a file directly in the terminal. There are many terminal-based editors. Today we'll try nano because it is easy to use for beginners. Open welcome.py using nano : $ nano welcome.py You should see something like the following: The two lines of text at the bottom show the set of actions available in the editor. The \"^\" symbol indicates the \"Ctrl\" key. For example, pressing Ctrl-O will \"WriteOut\" (save) any changes you have made to the file. Edit the file so that the welcome message says \"It's REALLY fun.\" instead of \"It's fun.\" . Save your changes and exit. Try executing your program again: $ python3 welcome.py You should see the following output Welcome to CS149! It's REALLY fun.","title":"Editing Files in the Terminal"},{"location":"cs149fall2024/labs/1_lab2-thonny/#thonny-ide","text":"","title":"Thonny IDE"},{"location":"cs149fall2024/labs/1_lab2-thonny/#objectives","text":"Use an IDE (Integrated Development Environment). Edit, save, compile, and run a simple Python program. Recognize and correct syntax errors in a Python program.","title":"Objectives"},{"location":"cs149fall2024/labs/1_lab2-thonny/#key-terms","text":"source file the Python program as written by the programmer syntax error mistake in the source code that prevents compilation logic error mistake in the program that causes incorrect behavior execute the process of running a program on a computer","title":"Key Terms"},{"location":"cs149fall2024/labs/1_lab2-thonny/#part-1-thonny-editor","text":"Thonny is a text editor designed to simplify the process of editing, debugging and executing Python programs. Open Thonny and click \"File \u2013> Open\" from the menu and select your welcome.py file from above. Press the Green play button on the toolbar to execute the Python file(this is the same thing as running the >>python welcome.py in the terminal. >>> %Run welcome.py Welcome to CS149! It's REALLY fun. Edit the file in Thonny to print another line that prints I have edited a file in Thonny. Save your results by pressing the Floppy disk icon then run the program again by pressing the Green play button. You have just run and edited a program using Thonny.","title":"Part 1: Thonny Editor"},{"location":"cs149fall2024/labs/1_lab2-thonny/#submission-for-lab2","text":"Via https://www.gradescope.com submit the Word of the Day in Canvas and your welcome.py file to Gradescope. Acknowledgments This activity is based on a lab developed by Nathan Sprague based on a lab originally developed by Chris Mayfield.","title":"Submission for Lab2"},{"location":"cs149fall2024/labs/20_lab15-webpage-maker/","text":"Lab15 - Web Page Maker Introduction HTML is a markup language used to create web pages. The goal for today\u2019s lab is to practice working with loading info from a file then writing out an html page. A basic HTML page will start with a doctype, then html and body tags. Inside the body tag is the content of the webpage. Heading tags are used for large headings and paragraph tags are used for page content. The strong tag is used to indicate bolded text. Here is a sample HTML page: Page Title This is a Heading This is a paragraph. File Loading / Reading in the data Download the following file: tags.txt This file will contain a tag then a comma to separate the tag from the content inside the tag. Your first step is to load in the content The next step is to add functionality to bounce.py enabling it to read a file containing ball descriptions. The name of the file will be provided as a command line argument. For, example, the file three_balls.dat contains the following three lines: File contents: h1, This is a Heading p, This is a paragraph strong, This is a bolded sentence. link, http://wwww.jmu.edu/ x_position y_position radius red green blue You\u2019ll need to complete the load_game method in the BounceGame class. That method should then be called from the existing main function. In order to read the command line argument you\u2019ll need to import the sys module from the Python standard libraries: import sys After the necessary modifications, it should be possible to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat If everything is working correctly, three balls should appear on the screen with the appropriate sizes and colors. Here is another data file that you can try: many_balls.dat . ============ File Save (If Time) We also want to be able to save the state of the game so that when the program is restarted, all of the balls will appear at the same locations as they were when the game was saved. Add a save_gamemethod to BounceGame and modify the run method so that the save method will be called when the user presses s. By default, the file created should be named saved.dat. Once this is working, modify the program so that saved.dat is opened by default if no command line argument is provided. In other words, this would open three_balls.dat: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat This would open saved.dat: spragunr@l25002:~/bounce_lab$ python bounce.py There is nothing to submit for this lab.","title":"Lab15 - Web Page Maker"},{"location":"cs149fall2024/labs/20_lab15-webpage-maker/#lab15-web-page-maker","text":"","title":"Lab15 - Web Page Maker"},{"location":"cs149fall2024/labs/20_lab15-webpage-maker/#introduction","text":"HTML is a markup language used to create web pages. The goal for today\u2019s lab is to practice working with loading info from a file then writing out an html page. A basic HTML page will start with a doctype, then html and body tags. Inside the body tag is the content of the webpage. Heading tags are used for large headings and paragraph tags are used for page content. The strong tag is used to indicate bolded text. Here is a sample HTML page: Page Title","title":"Introduction"},{"location":"cs149fall2024/labs/20_lab15-webpage-maker/#file-loading-reading-in-the-data","text":"Download the following file: tags.txt This file will contain a tag then a comma to separate the tag from the content inside the tag. Your first step is to load in the content The next step is to add functionality to bounce.py enabling it to read a file containing ball descriptions. The name of the file will be provided as a command line argument. For, example, the file three_balls.dat contains the following three lines: File contents: h1, This is a Heading p, This is a paragraph strong, This is a bolded sentence. link, http://wwww.jmu.edu/ x_position y_position radius red green blue You\u2019ll need to complete the load_game method in the BounceGame class. That method should then be called from the existing main function. In order to read the command line argument you\u2019ll need to import the sys module from the Python standard libraries: import sys After the necessary modifications, it should be possible to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat If everything is working correctly, three balls should appear on the screen with the appropriate sizes and colors. Here is another data file that you can try: many_balls.dat . ============","title":"File Loading / Reading in the data"},{"location":"cs149fall2024/labs/20_lab15-webpage-maker/#file-save-if-time","text":"We also want to be able to save the state of the game so that when the program is restarted, all of the balls will appear at the same locations as they were when the game was saved. Add a save_gamemethod to BounceGame and modify the run method so that the save method will be called when the user presses s. By default, the file created should be named saved.dat. Once this is working, modify the program so that saved.dat is opened by default if no command line argument is provided. In other words, this would open three_balls.dat: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat This would open saved.dat: spragunr@l25002:~/bounce_lab$ python bounce.py There is nothing to submit for this lab.","title":"File Save (If Time)"},{"location":"cs149fall2024/labs/2_lab3-style/","text":"Lab03: Style guide and pep8 Source: https://xkcd.com/1513/ Background PEP8 - Python Style When writing in English, readability can be impacted by the way the text is laid out on the page. We use conventions, like indenting the first sentence of a paragraph, to make it easier to understand written text. Programming languages are the same. Programs are easier to read if we agree on a set of conventions for how the code should be formatted. PEP 8 is the official document that describes the standard formatting conventions for Python code. (Here is a prettier version: https://pep8.org/ .) You don\u2019t need to read and understand the full PEP 8 document now, but you may want to look it over to get a feel for the issues that it addresses. Instructions for installing Thonny and flake8 configuration Comments When writing your programs it is helpful for us if you include the assignment name, a description of the assignment, your name, the due date and an Honor Code statement to let us know where you got help from on the assignment. These should be done in a block at the top of your program that looks like this: \"\"\" Lab 03- Style lab - fixing styles and testing online grading tool submission. Author: Alvin Chao Version: 1-26-22 Honor Code: I got help on the output statements for the lab from TA John \"\"\" Part 1 Running flake8 Through Thonny When you submit homework assignments for CS 149 they will automatically be checked against the PEP 8 formatting requirements using a tool named flake8 . You will only receive full credit if you pass all of these automated style checks. You can install flake8 in Thonny by selecting Tools -> Manage Packages\u2026 and then finding and installing flake8 as well as pep8-naming . After installation, you should be able to check your file by typing the following into the Thonny shell: >>> !flake8 payroll.py The exclamation point tells the Python interpreter the command should not be interpreted as Python code. Note that the Gradescope autograder is configured to be slightly more lenient than the default settings for flake8 . We allow line lengths up to 100 and disable checks for some errors and warnings. If you want to run flake8 with exactly the same settings as Gradescope, you can copy the following file into the same directory as your python code: setup.cfg Part 2 Example Program If you haven't already, you should create a top-level CS149 folder to organize all your labs and other assignments for the semester. Then create a lab03 folder for today's lab. (If you logged in as student today, please log out and log back in with your own account.) Download: payroll.py >>> !flake8 payroll.py You should see the following errors: payroll.py:1:27: E231 missing whitespace after ',' payroll.py:5:43: E251 unexpected spaces around keyword / parameter equals payroll.py:6:2: N816 variable 'payRate' in global scope should not be mixedCase payroll.py:7:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:9: E225 missing whitespace around operator payroll.py:11:39: W292 no newline at end of file Fix all style errors by repeatedly running flake8 and submit to Gradescope when your file checks all style issues. Submission: At the end of class today, or by 11:00 PM tomorrow if you would like more time, submit a corrected version of payroll.py via Gradescope . Your code must pass flake8 style without any warnings AND meet all the requirements outlined below. (It must also compile and run correctly; don't change the program's behavior.) If you cannot get this working in Gradescope you may upload to Canvas, but points will be deducted. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the program. It's okay if your files are similar or identical, as long as both of your names are present at the top. A. Comments # An inline comment must contain only one # and a space after it. \"\"\" *Block comments should end with the closing statement on its own line. \"\"\" B. Names All names should be descriptive and readable. ( sub_total rather than s , grade rather than grd ) Multiple-word names should use underscores to separate words. ( sub_total not subTotal ) Variable and method names should begin with a lowercase letter, and: Variable names should be nouns or noun phrases. ( student_name or sub_total ) Function names should be verbs or verb phrases. ( print_line or add_column ) Class names should begin with a capital letter and use title or CapWords case. ( HelloWorld ) Constant names should be all caps with an underscore separator. ( PI or INTEREST_RATE ) C. Declarations CENTIMETERS\\_PER\\_INCH = 2.54 centimeters = inches \\* CENTIMETERS\\_PER\\_INCH // NOT inches \\* 2.54 All constants should be named and initialized at the top of the function in which they are used. All variables should also be declared at the top of the function, directly after any constant declaraions. D. Literals Numeric literals should be of the correct type for the context in which they are used. # integer expressions should use integer literals like a a = 2 # double expressions should use double literals like b b = 2.0 average = (x + y) / 2.0 # NOT 2, which is an integer E. Indentation Subsections of code should be indented consistently with four spaces per Python requirements. Always use four space characters, not tab characters, for indentation. Statements too long for one line should be indented on subsequent lines. F. Whitespace There should be a space after commas, and #'s. Use whitespace to separate logical segments of code. There should be a blank line after variable declarations. Lines should be kept to a short length (< 80 - 100 chars). You should be able to see the full line in your text editor. Binary operators should be separated from their operands by a single space. ( sum = my_grade + your_grade ) Unary operators should not be separated by a space. ( my_grade++ )","title":"2 lab3 style"},{"location":"cs149fall2024/labs/2_lab3-style/#lab03-style-guide-and-pep8","text":"Source: https://xkcd.com/1513/","title":"Lab03: Style guide and pep8"},{"location":"cs149fall2024/labs/2_lab3-style/#background","text":"","title":"Background"},{"location":"cs149fall2024/labs/2_lab3-style/#pep8-python-style","text":"When writing in English, readability can be impacted by the way the text is laid out on the page. We use conventions, like indenting the first sentence of a paragraph, to make it easier to understand written text. Programming languages are the same. Programs are easier to read if we agree on a set of conventions for how the code should be formatted. PEP 8 is the official document that describes the standard formatting conventions for Python code. (Here is a prettier version: https://pep8.org/ .) You don\u2019t need to read and understand the full PEP 8 document now, but you may want to look it over to get a feel for the issues that it addresses. Instructions for installing Thonny and flake8 configuration","title":"PEP8 - Python Style"},{"location":"cs149fall2024/labs/2_lab3-style/#comments","text":"When writing your programs it is helpful for us if you include the assignment name, a description of the assignment, your name, the due date and an Honor Code statement to let us know where you got help from on the assignment. These should be done in a block at the top of your program that looks like this: \"\"\" Lab 03- Style lab - fixing styles and testing online grading tool submission. Author: Alvin Chao Version: 1-26-22 Honor Code: I got help on the output statements for the lab from TA John \"\"\"","title":"Comments"},{"location":"cs149fall2024/labs/2_lab3-style/#part-1","text":"","title":"Part 1"},{"location":"cs149fall2024/labs/2_lab3-style/#running-flake8-through-thonny","text":"When you submit homework assignments for CS 149 they will automatically be checked against the PEP 8 formatting requirements using a tool named flake8 . You will only receive full credit if you pass all of these automated style checks. You can install flake8 in Thonny by selecting Tools -> Manage Packages\u2026 and then finding and installing flake8 as well as pep8-naming . After installation, you should be able to check your file by typing the following into the Thonny shell: >>> !flake8 payroll.py The exclamation point tells the Python interpreter the command should not be interpreted as Python code. Note that the Gradescope autograder is configured to be slightly more lenient than the default settings for flake8 . We allow line lengths up to 100 and disable checks for some errors and warnings. If you want to run flake8 with exactly the same settings as Gradescope, you can copy the following file into the same directory as your python code: setup.cfg","title":"Running flake8 Through Thonny"},{"location":"cs149fall2024/labs/2_lab3-style/#part-2","text":"","title":"Part 2"},{"location":"cs149fall2024/labs/2_lab3-style/#example-program","text":"If you haven't already, you should create a top-level CS149 folder to organize all your labs and other assignments for the semester. Then create a lab03 folder for today's lab. (If you logged in as student today, please log out and log back in with your own account.) Download: payroll.py >>> !flake8 payroll.py You should see the following errors: payroll.py:1:27: E231 missing whitespace after ',' payroll.py:5:43: E251 unexpected spaces around keyword / parameter equals payroll.py:6:2: N816 variable 'payRate' in global scope should not be mixedCase payroll.py:7:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:9: E225 missing whitespace around operator payroll.py:11:39: W292 no newline at end of file Fix all style errors by repeatedly running flake8 and submit to Gradescope when your file checks all style issues. Submission: At the end of class today, or by 11:00 PM tomorrow if you would like more time, submit a corrected version of payroll.py via Gradescope . Your code must pass flake8 style without any warnings AND meet all the requirements outlined below. (It must also compile and run correctly; don't change the program's behavior.) If you cannot get this working in Gradescope you may upload to Canvas, but points will be deducted. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the program. It's okay if your files are similar or identical, as long as both of your names are present at the top.","title":"Example Program"},{"location":"cs149fall2024/labs/2_lab3-style/#a-comments","text":"# An inline comment must contain only one # and a space after it. \"\"\" *Block comments should end with the closing statement on its own line. \"\"\"","title":"A. Comments"},{"location":"cs149fall2024/labs/2_lab3-style/#b-names","text":"All names should be descriptive and readable. ( sub_total rather than s , grade rather than grd ) Multiple-word names should use underscores to separate words. ( sub_total not subTotal ) Variable and method names should begin with a lowercase letter, and: Variable names should be nouns or noun phrases. ( student_name or sub_total ) Function names should be verbs or verb phrases. ( print_line or add_column ) Class names should begin with a capital letter and use title or CapWords case. ( HelloWorld ) Constant names should be all caps with an underscore separator. ( PI or INTEREST_RATE )","title":"B. Names"},{"location":"cs149fall2024/labs/2_lab3-style/#c-declarations","text":"CENTIMETERS\\_PER\\_INCH = 2.54 centimeters = inches \\* CENTIMETERS\\_PER\\_INCH // NOT inches \\* 2.54 All constants should be named and initialized at the top of the function in which they are used. All variables should also be declared at the top of the function, directly after any constant declaraions.","title":"C. Declarations"},{"location":"cs149fall2024/labs/2_lab3-style/#d-literals","text":"Numeric literals should be of the correct type for the context in which they are used. # integer expressions should use integer literals like a a = 2 # double expressions should use double literals like b b = 2.0 average = (x + y) / 2.0 # NOT 2, which is an integer","title":"D. Literals"},{"location":"cs149fall2024/labs/2_lab3-style/#e-indentation","text":"Subsections of code should be indented consistently with four spaces per Python requirements. Always use four space characters, not tab characters, for indentation. Statements too long for one line should be indented on subsequent lines.","title":"E. Indentation"},{"location":"cs149fall2024/labs/2_lab3-style/#f-whitespace","text":"There should be a space after commas, and #'s. Use whitespace to separate logical segments of code. There should be a blank line after variable declarations. Lines should be kept to a short length (< 80 - 100 chars). You should be able to see the full line in your text editor. Binary operators should be separated from their operands by a single space. ( sum = my_grade + your_grade ) Unary operators should not be separated by a space. ( my_grade++ )","title":"F. Whitespace"},{"location":"cs149fall2024/labs/3-b_lab5-speed/","text":"Lab 5 - Average Speed Introduction ============ This activity will help you continue to prepare for homework this week and next week. Concepts you will practice: Converting user input to either a floating point number (float), like 3.14159, or an integer (int), like 314159. Using floating point division (/), integer division (//), and the remainder, or mod, operator (%) in the appropriate situations. ============ Average Speed Calculator For this problem you will write a program named bike_speed.py that asks the user for the length of a bike race in miles (entered as a floating point number) and their finishing time for the race in hours, minutes, and seconds and then output their average speed in both miles per hour and kilometers per hour. (1 mile = 1.60934 kilometers). When you output the speed you should show exactly 2 digits past the decimal place. Here is an example run of the program: = Bike Race Average Speed Calculator = How many miles did you race? 18.66 How much time did that take you in hours, minutes, and seconds? Hours: 0 Minutes: 43 Seconds: 49 Your speed was 25.55 mph, which is 41.12 kph. Hint 1: Figure out how to calculate it by hand on paper before you try to code anything. You can\u2019t code what you can\u2019t solve with a pen and paper. Hint 2: You\u2019ll want to get your time into one unit. Dealing with 3 separate units is not good for computation. At the end of the day, we need to do distance / time in hours to solve the problem, so what is the total time in hours and how do you calculate it? Note that 0 hours, 43 minutes, and 49 seconds is ~0.7303 hours. How do you calculate this? I calculated it by, so how can you do this for other numbers of hours, minutes, and seconds? Hint 3: Section 2.4 in the reading introduces f-strings for formatting output to a number of decimal places. If you don\u2019t remember how to do it, get it working with any number of decimal places and then fix it when you\u2019ve got the rest working. Submission: Submit this to https://canvas.jmu.edu","title":"Lab 5 - Average Speed"},{"location":"cs149fall2024/labs/3-b_lab5-speed/#lab-5-average-speed","text":"","title":"Lab 5 - Average Speed"},{"location":"cs149fall2024/labs/3-b_lab5-speed/#introduction","text":"============ This activity will help you continue to prepare for homework this week and next week. Concepts you will practice: Converting user input to either a floating point number (float), like 3.14159, or an integer (int), like 314159. Using floating point division (/), integer division (//), and the remainder, or mod, operator (%) in the appropriate situations. ============","title":"Introduction"},{"location":"cs149fall2024/labs/3-b_lab5-speed/#average-speed-calculator","text":"For this problem you will write a program named bike_speed.py that asks the user for the length of a bike race in miles (entered as a floating point number) and their finishing time for the race in hours, minutes, and seconds and then output their average speed in both miles per hour and kilometers per hour. (1 mile = 1.60934 kilometers). When you output the speed you should show exactly 2 digits past the decimal place. Here is an example run of the program: = Bike Race Average Speed Calculator = How many miles did you race? 18.66 How much time did that take you in hours, minutes, and seconds? Hours: 0 Minutes: 43 Seconds: 49 Your speed was 25.55 mph, which is 41.12 kph. Hint 1: Figure out how to calculate it by hand on paper before you try to code anything. You can\u2019t code what you can\u2019t solve with a pen and paper. Hint 2: You\u2019ll want to get your time into one unit. Dealing with 3 separate units is not good for computation. At the end of the day, we need to do distance / time in hours to solve the problem, so what is the total time in hours and how do you calculate it? Note that 0 hours, 43 minutes, and 49 seconds is ~0.7303 hours. How do you calculate this? I calculated it by, so how can you do this for other numbers of hours, minutes, and seconds? Hint 3: Section 2.4 in the reading introduces f-strings for formatting output to a number of decimal places. If you don\u2019t remember how to do it, get it working with any number of decimal places and then fix it when you\u2019ve got the rest working.","title":"Average Speed Calculator"},{"location":"cs149fall2024/labs/3-b_lab5-speed/#submission","text":"Submit this to https://canvas.jmu.edu","title":"Submission:"},{"location":"cs149fall2024/labs/3_lab4-variables/","text":"Lab 4 - Variables Introduction ============ This activity will help you practice some of the concepts from this week and prepare for the homework problems next week. Specifically you will practice: Converting user input to either a floating point number (float), like 3.14159, or an integer (int), like 314159. Using floating point division (/), integer division (//), and the remainder, or mod, operator (%) in the appropriate situations. Problem: Splitting feet into miles, furlongs, and feet. ============ For this problem you are going to write a program called feet_conversion.py to use integer division and remainders to take a total number of feet and split it into miles, furlongs, and feet. 1 mile is 5280 feet and 1 furlong is 660 feet (it\u2019s some old English measure nobody uses anymore, but let\u2019s do it anyways!). Enter a total number of feet: 12345 12345 total feet is 2 mile(s), 2 furlong(s), and 465 feet. Hint 1: Figure out how to solve the problem yourself by hand on paper. You can\u2019t code something you don\u2019t know how to solve. Hint 2: You need to use integer division // and the mod/remainder % operators. Hint 3: You probably want a variable for the remaining feet. For instance, before you\u2019ve figured out the answer above, the remaining feet is 12345. But once you figure out that there are two full miles in 12345 feet (2 full miles is 10560 feet), then the remaining feet you have to deal with in your calculation is 1785 feet. Then how many full furlongs are in 1785 feet? Well, 2 again, since 660\u00d72\\=1320. And finally after we remove those 1320 from 1785 the remaining feet is 465. Hint 4: Notice how close the words remaining and remainder are. Submission: Submit this to https://canvas.jmu.edu","title":"Lab 4 - Variables"},{"location":"cs149fall2024/labs/3_lab4-variables/#lab-4-variables","text":"","title":"Lab 4 - Variables"},{"location":"cs149fall2024/labs/3_lab4-variables/#introduction","text":"============ This activity will help you practice some of the concepts from this week and prepare for the homework problems next week. Specifically you will practice: Converting user input to either a floating point number (float), like 3.14159, or an integer (int), like 314159. Using floating point division (/), integer division (//), and the remainder, or mod, operator (%) in the appropriate situations.","title":"Introduction"},{"location":"cs149fall2024/labs/3_lab4-variables/#problem-splitting-feet-into-miles-furlongs-and-feet","text":"============ For this problem you are going to write a program called feet_conversion.py to use integer division and remainders to take a total number of feet and split it into miles, furlongs, and feet. 1 mile is 5280 feet and 1 furlong is 660 feet (it\u2019s some old English measure nobody uses anymore, but let\u2019s do it anyways!). Enter a total number of feet: 12345 12345 total feet is 2 mile(s), 2 furlong(s), and 465 feet. Hint 1: Figure out how to solve the problem yourself by hand on paper. You can\u2019t code something you don\u2019t know how to solve. Hint 2: You need to use integer division // and the mod/remainder % operators. Hint 3: You probably want a variable for the remaining feet. For instance, before you\u2019ve figured out the answer above, the remaining feet is 12345. But once you figure out that there are two full miles in 12345 feet (2 full miles is 10560 feet), then the remaining feet you have to deal with in your calculation is 1785 feet. Then how many full furlongs are in 1785 feet? Well, 2 again, since 660\u00d72\\=1320. And finally after we remove those 1320 from 1785 the remaining feet is 465. Hint 4: Notice how close the words remaining and remainder are.","title":"Problem: Splitting feet into miles, furlongs, and feet."},{"location":"cs149fall2024/labs/3_lab4-variables/#submission","text":"Submit this to https://canvas.jmu.edu","title":"Submission:"},{"location":"cs149fall2024/labs/4_lab6-if-then/","text":"Lab 6 If-then-else CSCard Lab Introduction ============ We will be expanding on the use of submissions and testing via https://gradescope.com. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the code. It's okay if your files are similar or identical, as long as both of your names are present at the top. Objectives Practice validation and if-else-if statements. More gradescope submission practice. Part 1: Understand the Problem Write a program to prepare the monthly charge account statement for a customer of CS Card International, a credit card company. The program should take as input the previous balance on the account and the total amount of additional charges during the month. It should then compute the interest for the month, the total new balance (i.e., the previous balance plus additional charges plus interest), and the minimum payment due. The interest is $0 if the previous balance was $0.00 or less. If the previous balance was greater than $0, the interest is 2% of the total owed (i.e., previous balance plus additional charges).EXAMPLE: If the previous balance is $50.00 and the additional charges are $50.00, the interest would be $2.00. But if the previous balance is $0.00, the interest is $0 no matter what. The minimum payment based on the table below: $0.00 for new balance less than $0 new balance for new balance between $0 and $49.99 (inclusive) $50.00 for new balance between $50 and $300 (inclusiive) 20% of the new balance for new balance over $300 EXAMPLE: If the new balance is $38.00 then the person must pay the whole $38.00; if the balance is $128 then the person must pay $50; if the balance is $350 the minimum payment is $70. Make sure you understand the calculations before trying to program. Write the algorithm in pseudocode on paper, and test your algorithm with some examples to see how it works. ============ Part 2: Program the Solution Much of the solution including output formatting has already been done for you. Use the variables provided and keep all output statements exactly as they are. Download a copy of credit_card.py as a starting point. Fill in the Docstring comment for credit_card.py. Get the provided code to run. Write the calculation portion and min payment portion, returning bogus values for interest and minimum payments for now. Using the variables provided, code the input statements as described in credit_card.py. You must ensure that the program will not crash if the user enters a bad value.(values must be greater than -5000 and less than 5000 or it should return a 0) Code the rest of the program as if the two calculations were finished, and then test your program. You should see that the code properly reads in a value for the balance and additional charges and outputs the values in the correct format. (The numbers should be wrong until you finish your coding.) For each calculation (interest and minimum payment), you should code the proper solution. Think about test cases. Test the program with a variety of data. Include positive balance, negative balance, and 0 balance. When you are sure that your code is working properly. Make sure the output still looks okay.","title":"Lab 6  If-then-else CSCard Lab"},{"location":"cs149fall2024/labs/4_lab6-if-then/#lab-6-if-then-else-cscard-lab","text":"","title":"Lab 6  If-then-else CSCard Lab"},{"location":"cs149fall2024/labs/4_lab6-if-then/#introduction","text":"============ We will be expanding on the use of submissions and testing via https://gradescope.com. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the code. It's okay if your files are similar or identical, as long as both of your names are present at the top.","title":"Introduction"},{"location":"cs149fall2024/labs/4_lab6-if-then/#objectives","text":"Practice validation and if-else-if statements. More gradescope submission practice.","title":"Objectives"},{"location":"cs149fall2024/labs/4_lab6-if-then/#part-1-understand-the-problem","text":"Write a program to prepare the monthly charge account statement for a customer of CS Card International, a credit card company. The program should take as input the previous balance on the account and the total amount of additional charges during the month. It should then compute the interest for the month, the total new balance (i.e., the previous balance plus additional charges plus interest), and the minimum payment due. The interest is $0 if the previous balance was $0.00 or less. If the previous balance was greater than $0, the interest is 2% of the total owed (i.e., previous balance plus additional charges).EXAMPLE: If the previous balance is $50.00 and the additional charges are $50.00, the interest would be $2.00. But if the previous balance is $0.00, the interest is $0 no matter what. The minimum payment based on the table below: $0.00 for new balance less than $0 new balance for new balance between $0 and $49.99 (inclusive) $50.00 for new balance between $50 and $300 (inclusiive) 20% of the new balance for new balance over $300 EXAMPLE: If the new balance is $38.00 then the person must pay the whole $38.00; if the balance is $128 then the person must pay $50; if the balance is $350 the minimum payment is $70. Make sure you understand the calculations before trying to program. Write the algorithm in pseudocode on paper, and test your algorithm with some examples to see how it works. ============","title":"Part 1: Understand the Problem"},{"location":"cs149fall2024/labs/4_lab6-if-then/#part-2-program-the-solution","text":"Much of the solution including output formatting has already been done for you. Use the variables provided and keep all output statements exactly as they are. Download a copy of credit_card.py as a starting point. Fill in the Docstring comment for credit_card.py. Get the provided code to run. Write the calculation portion and min payment portion, returning bogus values for interest and minimum payments for now. Using the variables provided, code the input statements as described in credit_card.py. You must ensure that the program will not crash if the user enters a bad value.(values must be greater than -5000 and less than 5000 or it should return a 0) Code the rest of the program as if the two calculations were finished, and then test your program. You should see that the code properly reads in a value for the balance and additional charges and outputs the values in the correct format. (The numbers should be wrong until you finish your coding.) For each calculation (interest and minimum payment), you should code the proper solution. Think about test cases. Test the program with a variety of data. Include positive balance, negative balance, and 0 balance. When you are sure that your code is working properly. Make sure the output still looks okay.","title":"Part 2: Program the Solution"},{"location":"cs149fall2024/labs/5_lab7-circle/","text":"Lab 7 - Circle Lab - Writing and Calling functions Introduction ============ We will be expanding on the use of submissions and testing via https://gradescope.com. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the code. It's okay if your files are similar or identical, as long as both of your names are present at the top. Objectives Create a program with only functions. Stub out so the functions can be written and tested incrementally. Become more familiar with the math module in Python. Document return types Key Terms return type The data type the function returns. return value The value that the function returns via the return statement. function stub An empty or incomplete function that returns 0, \"\", false, etc. Part 1: Creating Stubs We are going to create a small program to carry out some geometric operations. Note that Python is a loosely typed language so return value types should be specified in :return docstring comments. It will include a couple of utility functions to make input and printing easier, as well as the calculation of the area of a circle and the volume of a sphere. (Normally, you would design one program to do the geometry and another one to deal with the utility functions, but for today's lab we are putting them together in one program.) Download and open the circle_driver.py program. Do not be concerned with what it contains just yet. Create a new source file, circle_play.py. Create the top level docstring comment including your name and today's date and honor code statement. Define each of the following functions: print_greeting will simply print some lines to greet the user upon running the application. Create a function stub using the following header: def print_greeting() This header says that the function is named print_greeting, and accepts no parameters. Create function documentation. In this case you only need to describe what this function will do. enter_radius - create a function header that looks like this: def enter_radius() This header says the function is named enter_radius, and accepts no parameters. Add function documentation for this function as follows: (note the use of the :return label) \"\"\" Displays a prompt to the user, then reads in a float value that the user has entered. Returns: (float): a float value representing a radius \"\"\" Create the function block, and add in a single return statement, return -999.0 This is a \"stubbed\" return statement that returns a value of the correct type, but is not the value we will eventually need. calculate_area - This function will calculate the area of a circle with a given radius. Create a function header named calculate_area and has a single parameter, a float value representing a radius. Create the function block with a return statement to return the value -888.0. (These ar meaningless values, but if we call the function and its not done, we'll know that by the return value.) Add your documentation including a :param tag. calculate_volume - This function will calculate the volume of a sphere with a given radius. Create a function header, function block, return statement, and documentation. The stubbed return value should be -777.0. Save your work at this point, before implementing any of the functions . You should not have any errors. If you do, check to make sure that each function in circle_play is created exactly as described above. Run circle_driver from Thonny or using the command line. What output do you see? Does it make any sense? Now we will begin to fill in our stubbed functions. ============ Part 2: Creating a Void function With No Parameters Begin with print_greeting, which should print the following. (Note that < blank line > just means that you should print a newline there.) Welcome to the CS149 Circle Calculator < blank line > This application will calculate the area of a circle and/or volume of a sphere. < blank line > Create the code to print these four lines. Run it from the command line. You are currently testing the 1st function, so pass the argument 1 to the main function as follows: python3 circle_driver.py 1 Does your greeting print correctly? Make any corrections that you need before moving on. Explanation : The circle_driver is designed to let you test each of your functions separately. In this case, you have built a single function, so you are testing just that function. The function stubs enable you to run the entire program, but then just fill in the parts that you are ready to complete and test. By testing individual functions, you can focus on getting that function written correctly before moving on to the next one. Part 3: Creating a Value Returning function With No Parameters Next you'll fill in the enter_radius function. This function displays a standard prompt, \"Enter the radius: \" and then reads in the radius from the user input. Output the prompt \"Enter the radius: \". The cursor should remain on the same line, one space to the right of the colon and read the value the user enters into a radius variable. Change the return statement to return the value that the user enters. Test your program on the command line running python3 circle_driver.py 2. This time enter the number 2 as the command line argument. What happens? Part 4: Creating Value-Returning functions With Parameters Finally, you will fill in each of the calculation functions. You are going to calculate the area of a circle and the volume of a sphere. The area of a circle is defined as A = \u03c0 r 2 . The volume of a sphere is V = 4/3 \u03c0 r 3 . Use these formulas to come up with a few test cases for each function. Write down your examples on a piece of paper, so you can be sure your code works as expected. Begin with the calculate_area function. You may find that the math module is helpful for this step. First, there is a constant defined in that module called pi. Since the constant is in another module, we must use the qualified name math.pi to access it. Define the variables that you will need. Create the calculation, using math.pi for \u03c0. Instead of the stub value in your return statement, return the area that you calculate. Test your work passing the number 3 in for the command line argument. Check your area values against the ones that you calculated by hand. Work with your function until it runs correctly. Create the calculate_volume function and test as before using command line argument 4 to test your volume function. Finally, test the entire application running the application with no arguments. It should run each function in turn. Upload your completed circle_play.py program to Gradescope . To receive full credit for this assignment, all 4 functions must work correctly. You will not receive full credit for this lab unless your code passes all of the automated formatting tests. Testing Greeting Welcome to the CS149 Circle Calculator This application will calculate the area of a circle and/or volume of a sphere. Testing Input Enter the radius: 5 Enter the radius: 10 Enter the radius: 15 The values you entered were: 5.0 10.0 15.0 A circle of radius 5.0 has area of 78.53981633974483 A circle of radius 10.0 has area of 314.1592653589793 A circle of radius 15.0 has area of 706.8583470577034 A sphere of radius 5.0 has volume of 523.5987755982989 A sphere of radius 10.0 has volume of 4188.790204786391 A sphere of radius 15.0 has volume of 14137.166941154068 This lab was originally created by Nancy Harris and modified by Nathan Sprague.","title":"Lab 7 - Circle Lab - Writing and Calling functions"},{"location":"cs149fall2024/labs/5_lab7-circle/#lab-7-circle-lab-writing-and-calling-functions","text":"","title":"Lab 7 - Circle Lab - Writing and Calling functions"},{"location":"cs149fall2024/labs/5_lab7-circle/#introduction","text":"============ We will be expanding on the use of submissions and testing via https://gradescope.com. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the code. It's okay if your files are similar or identical, as long as both of your names are present at the top.","title":"Introduction"},{"location":"cs149fall2024/labs/5_lab7-circle/#objectives","text":"Create a program with only functions. Stub out so the functions can be written and tested incrementally. Become more familiar with the math module in Python. Document return types","title":"Objectives"},{"location":"cs149fall2024/labs/5_lab7-circle/#key-terms","text":"return type The data type the function returns. return value The value that the function returns via the return statement. function stub An empty or incomplete function that returns 0, \"\", false, etc.","title":"Key Terms"},{"location":"cs149fall2024/labs/5_lab7-circle/#part-1-creating-stubs","text":"We are going to create a small program to carry out some geometric operations. Note that Python is a loosely typed language so return value types should be specified in :return docstring comments. It will include a couple of utility functions to make input and printing easier, as well as the calculation of the area of a circle and the volume of a sphere. (Normally, you would design one program to do the geometry and another one to deal with the utility functions, but for today's lab we are putting them together in one program.) Download and open the circle_driver.py program. Do not be concerned with what it contains just yet. Create a new source file, circle_play.py. Create the top level docstring comment including your name and today's date and honor code statement. Define each of the following functions: print_greeting will simply print some lines to greet the user upon running the application. Create a function stub using the following header: def print_greeting() This header says that the function is named print_greeting, and accepts no parameters. Create function documentation. In this case you only need to describe what this function will do. enter_radius - create a function header that looks like this: def enter_radius() This header says the function is named enter_radius, and accepts no parameters. Add function documentation for this function as follows: (note the use of the :return label) \"\"\" Displays a prompt to the user, then reads in a float value that the user has entered. Returns: (float): a float value representing a radius \"\"\" Create the function block, and add in a single return statement, return -999.0 This is a \"stubbed\" return statement that returns a value of the correct type, but is not the value we will eventually need. calculate_area - This function will calculate the area of a circle with a given radius. Create a function header named calculate_area and has a single parameter, a float value representing a radius. Create the function block with a return statement to return the value -888.0. (These ar meaningless values, but if we call the function and its not done, we'll know that by the return value.) Add your documentation including a :param tag. calculate_volume - This function will calculate the volume of a sphere with a given radius. Create a function header, function block, return statement, and documentation. The stubbed return value should be -777.0. Save your work at this point, before implementing any of the functions . You should not have any errors. If you do, check to make sure that each function in circle_play is created exactly as described above. Run circle_driver from Thonny or using the command line. What output do you see? Does it make any sense? Now we will begin to fill in our stubbed functions. ============","title":"Part 1: Creating Stubs"},{"location":"cs149fall2024/labs/5_lab7-circle/#part-2-creating-a-void-function-with-no-parameters","text":"Begin with print_greeting, which should print the following. (Note that < blank line > just means that you should print a newline there.) Welcome to the CS149 Circle Calculator < blank line > This application will calculate the area of a circle and/or volume of a sphere. < blank line > Create the code to print these four lines. Run it from the command line. You are currently testing the 1st function, so pass the argument 1 to the main function as follows: python3 circle_driver.py 1 Does your greeting print correctly? Make any corrections that you need before moving on. Explanation : The circle_driver is designed to let you test each of your functions separately. In this case, you have built a single function, so you are testing just that function. The function stubs enable you to run the entire program, but then just fill in the parts that you are ready to complete and test. By testing individual functions, you can focus on getting that function written correctly before moving on to the next one.","title":"Part 2: Creating a Void function With No Parameters"},{"location":"cs149fall2024/labs/5_lab7-circle/#part-3-creating-a-value-returning-function-with-no-parameters","text":"Next you'll fill in the enter_radius function. This function displays a standard prompt, \"Enter the radius: \" and then reads in the radius from the user input. Output the prompt \"Enter the radius: \". The cursor should remain on the same line, one space to the right of the colon and read the value the user enters into a radius variable. Change the return statement to return the value that the user enters. Test your program on the command line running python3 circle_driver.py 2. This time enter the number 2 as the command line argument. What happens?","title":"Part 3: Creating a Value Returning function With No Parameters"},{"location":"cs149fall2024/labs/5_lab7-circle/#part-4-creating-value-returning-functions-with-parameters","text":"Finally, you will fill in each of the calculation functions. You are going to calculate the area of a circle and the volume of a sphere. The area of a circle is defined as A = \u03c0 r 2 . The volume of a sphere is V = 4/3 \u03c0 r 3 . Use these formulas to come up with a few test cases for each function. Write down your examples on a piece of paper, so you can be sure your code works as expected. Begin with the calculate_area function. You may find that the math module is helpful for this step. First, there is a constant defined in that module called pi. Since the constant is in another module, we must use the qualified name math.pi to access it. Define the variables that you will need. Create the calculation, using math.pi for \u03c0. Instead of the stub value in your return statement, return the area that you calculate. Test your work passing the number 3 in for the command line argument. Check your area values against the ones that you calculated by hand. Work with your function until it runs correctly. Create the calculate_volume function and test as before using command line argument 4 to test your volume function. Finally, test the entire application running the application with no arguments. It should run each function in turn. Upload your completed circle_play.py program to Gradescope . To receive full credit for this assignment, all 4 functions must work correctly. You will not receive full credit for this lab unless your code passes all of the automated formatting tests. Testing Greeting Welcome to the CS149 Circle Calculator This application will calculate the area of a circle and/or volume of a sphere. Testing Input Enter the radius: 5 Enter the radius: 10 Enter the radius: 15 The values you entered were: 5.0 10.0 15.0 A circle of radius 5.0 has area of 78.53981633974483 A circle of radius 10.0 has area of 314.1592653589793 A circle of radius 15.0 has area of 706.8583470577034 A sphere of radius 5.0 has volume of 523.5987755982989 A sphere of radius 10.0 has volume of 4188.790204786391 A sphere of radius 15.0 has volume of 14137.166941154068 This lab was originally created by Nancy Harris and modified by Nathan Sprague.","title":"Part 4: Creating Value-Returning functions With Parameters"},{"location":"cs149fall2024/labs/6_lab8-list-tuple/","text":"Lab 8 - List-Tuple Lab Introduction In this lab you will gain some practice with lists and tuples. Docstring Guide ============ Problem: ASCII Art Roses Long ago, before computers could display high resolution graphics on 4K monitors with 300 dpi pixel density and churn out stunning real-time 3D graphics at 60 frames per second, many people spent a lot of time making art on computers out of text using the ASCII character set. Like this: ......................................... ...####...####....###...##..##...####.... ..##.....##........##...##..##..##..##... ..##......###......##...######...#####... ..##........##.....##.......##......##... ...####..####.....####......##....###.... ......................................... You are going to write a program to output five ASCII art roses. Like this: @-->---->--- @----->->-- @----->------->-- @->->---------- @->->- Each rose starts with an @ followed by a section of dashes - before the first thorn >, followed by a second section of dashes to a second thorn, followed by a final section of dashes -. For your first pass at this algorithm, you should have five variables: rose1, rose2, rose3, rose4, and rose5. Each variable should refer to a tuple with 3 integers denoting the number of dashes ('-') in each of the rose\u2019s sections. For example, the first rose in the figure above has two dashes in the first section, four dashes in the second section, and three dashes in the final section, so its tuple representation is (2, 4, 3). Your code should use the variables rose1, rose2, rose3, rose4, and rose5 to output each rose, one per line. The roses should be aligned so that their right-hand sides line up and the longest rose has no spaces before its petals (the '@'). Any rose shorter than the longest rose should have an appropriate number of spaces before the '@'. Here is starter code: \"\"\" Rose Variables \"\"\" rose1 = ( 2 , 4 , 3 ) rose2 = ( 5 , 1 , 2 ) rose3 = ( 5 , 7 , 2 ) rose4 = ( 1 , 1 , 10 ) rose5 = ( 1 , 1 , 1 ) \"\"\" Your code here \"\"\" Hints Can you calculate the length of rose 1 using the data in rose1? Can you put the lengths of all five roses into a list? If so, can you use list functions to find the length of the longest rose? Remember that you can multiply a string by an integer to duplicate it. So \"abc\" * 3 is \"abcabcabc\". To right justify a string you can use the rjust method. Submit your roses.py file to Gradescope. This lab was originally created by Nathan Sprague.","title":"Lab 8 - List-Tuple Lab"},{"location":"cs149fall2024/labs/6_lab8-list-tuple/#lab-8-list-tuple-lab","text":"","title":"Lab 8 - List-Tuple Lab"},{"location":"cs149fall2024/labs/6_lab8-list-tuple/#introduction","text":"In this lab you will gain some practice with lists and tuples. Docstring Guide ============","title":"Introduction"},{"location":"cs149fall2024/labs/6_lab8-list-tuple/#problem-ascii-art-roses","text":"Long ago, before computers could display high resolution graphics on 4K monitors with 300 dpi pixel density and churn out stunning real-time 3D graphics at 60 frames per second, many people spent a lot of time making art on computers out of text using the ASCII character set. Like this: ......................................... ...####...####....###...##..##...####.... ..##.....##........##...##..##..##..##... ..##......###......##...######...#####... ..##........##.....##.......##......##... ...####..####.....####......##....###.... ......................................... You are going to write a program to output five ASCII art roses. Like this: @-->---->--- @----->->-- @----->------->-- @->->---------- @->->- Each rose starts with an @ followed by a section of dashes - before the first thorn >, followed by a second section of dashes to a second thorn, followed by a final section of dashes -. For your first pass at this algorithm, you should have five variables: rose1, rose2, rose3, rose4, and rose5. Each variable should refer to a tuple with 3 integers denoting the number of dashes ('-') in each of the rose\u2019s sections. For example, the first rose in the figure above has two dashes in the first section, four dashes in the second section, and three dashes in the final section, so its tuple representation is (2, 4, 3). Your code should use the variables rose1, rose2, rose3, rose4, and rose5 to output each rose, one per line. The roses should be aligned so that their right-hand sides line up and the longest rose has no spaces before its petals (the '@'). Any rose shorter than the longest rose should have an appropriate number of spaces before the '@'. Here is starter code: \"\"\" Rose Variables \"\"\" rose1 = ( 2 , 4 , 3 ) rose2 = ( 5 , 1 , 2 ) rose3 = ( 5 , 7 , 2 ) rose4 = ( 1 , 1 , 10 ) rose5 = ( 1 , 1 , 1 ) \"\"\" Your code here \"\"\"","title":"Problem: ASCII Art Roses"},{"location":"cs149fall2024/labs/6_lab8-list-tuple/#hints","text":"Can you calculate the length of rose 1 using the data in rose1? Can you put the lengths of all five roses into a list? If so, can you use list functions to find the length of the longest rose? Remember that you can multiply a string by an integer to duplicate it. So \"abc\" * 3 is \"abcabcabc\". To right justify a string you can use the rjust method. Submit your roses.py file to Gradescope. This lab was originally created by Nathan Sprague.","title":"Hints"},{"location":"cs149fall2024/labs/7_lab9-haiku-lab/","text":"Lab - Haiku lab Background Haiku's are a form of Japanese poetry. They consist of 3 lines of text. The first line of the haiku must contain 5 syllables. The second line must have 7 syllables. Finally, the third line again contains 5 syllables. Here is an example of a valid haiku: An old silent pond A frog jumps into the pond\u2014 Splash! Silence again. by Matsuo Basho ============ Objectives Practice if-else and conditionals. Practice with functions Practice using a helper function Practice with loops More practice with lists Program the Solution - First Function: Write a program called haiku_checker.py that contains two functions. The first function will be a helper function that is called check_n_syllables. This function must take input of a list of words on a line and an int number of syllables to validate. You may use the pysyllables library to make this easier https://pypi.org/project/pysyllables/](https://pypi.org/project/pysyllables/). You will need to install the pysyllables package through the Thonny package manager. Make sure you also do an import at the top of your file: from pysyllables import get_syllable_count You can then use the get_syllable_count(word) function to get the number of syllables in a word. The return value of the function should be as follows: This function should return either a -1 if the total syllables is less than the given number n to validate, 0 if the total syllables is equal to the number n, and 1 if the total syllables is greater than n. Second Function: The second function should be called validate_haiku. It will take a single parameter of a list of lists. The list will contain 3 lines for the haiku. Each line will be a sub list of the words in the line. The function will return a String value. The return values should follow these rules: It should be set to \"Valid haiku.\" if this is a valid haiku that has a first line with 5 syllables, second line with 7 syllables, and third line with 5 syllables. If it has more or less than 3 lines it should return: \"Invalid haiku, not 3 lines.\". Otherwise it will return a message with the type of error for each line. For example: if the first line has 7 syllables it would return: \"Line 1 too short. \"[note the space after the period]. If the second line has 3 syllables it would return \"Line 2 too short. \". If the third line is too long it would return: \"Line 3 too long. \". Your program should allow multiple comments, for instance 1 for each line that is wrong. The overall message should be on a single line of output. Do not return an error if a line is valid. Note: You should have a return at the end of each error message and only return one continuous String with all error messages as the final return String. Submission: Submit your program called haiku_checker.py to https://gradescope.com by tomorrow evening.","title":"Lab - Haiku lab"},{"location":"cs149fall2024/labs/7_lab9-haiku-lab/#lab-haiku-lab","text":"","title":"Lab - Haiku lab"},{"location":"cs149fall2024/labs/7_lab9-haiku-lab/#background","text":"Haiku's are a form of Japanese poetry. They consist of 3 lines of text. The first line of the haiku must contain 5 syllables. The second line must have 7 syllables. Finally, the third line again contains 5 syllables. Here is an example of a valid haiku: An old silent pond A frog jumps into the pond\u2014 Splash! Silence again. by Matsuo Basho ============","title":"Background"},{"location":"cs149fall2024/labs/7_lab9-haiku-lab/#objectives","text":"Practice if-else and conditionals. Practice with functions Practice using a helper function Practice with loops More practice with lists","title":"Objectives"},{"location":"cs149fall2024/labs/7_lab9-haiku-lab/#program-the-solution-first-function","text":"Write a program called haiku_checker.py that contains two functions. The first function will be a helper function that is called check_n_syllables. This function must take input of a list of words on a line and an int number of syllables to validate. You may use the pysyllables library to make this easier https://pypi.org/project/pysyllables/](https://pypi.org/project/pysyllables/). You will need to install the pysyllables package through the Thonny package manager. Make sure you also do an import at the top of your file: from pysyllables import get_syllable_count You can then use the get_syllable_count(word) function to get the number of syllables in a word. The return value of the function should be as follows: This function should return either a -1 if the total syllables is less than the given number n to validate, 0 if the total syllables is equal to the number n, and 1 if the total syllables is greater than n.","title":"Program the Solution - First Function:"},{"location":"cs149fall2024/labs/7_lab9-haiku-lab/#second-function","text":"The second function should be called validate_haiku. It will take a single parameter of a list of lists. The list will contain 3 lines for the haiku. Each line will be a sub list of the words in the line. The function will return a String value. The return values should follow these rules: It should be set to \"Valid haiku.\" if this is a valid haiku that has a first line with 5 syllables, second line with 7 syllables, and third line with 5 syllables. If it has more or less than 3 lines it should return: \"Invalid haiku, not 3 lines.\". Otherwise it will return a message with the type of error for each line. For example: if the first line has 7 syllables it would return: \"Line 1 too short. \"[note the space after the period]. If the second line has 3 syllables it would return \"Line 2 too short. \". If the third line is too long it would return: \"Line 3 too long. \". Your program should allow multiple comments, for instance 1 for each line that is wrong. The overall message should be on a single line of output. Do not return an error if a line is valid. Note: You should have a return at the end of each error message and only return one continuous String with all error messages as the final return String.","title":"Second Function:"},{"location":"cs149fall2024/labs/7_lab9-haiku-lab/#submission","text":"Submit your program called haiku_checker.py to https://gradescope.com by tomorrow evening.","title":"Submission:"},{"location":"cs149fall2024/labs/8_lab10-codingbat-loops/","text":"Lab9 - Coding bat practice with loops Background Part 1: Account Setup(ignore if you did this in previous coding bat lab) Go to codingbat.com and create an account (click the link on the upper right). Please use your JMU email when setting up your account. After logging in, click the \"prefs\" link (upper right) and \"share to\" your professor's JMU e-mail for example: chaoaj@jmu.edu so you will get credit. Also make sure your name is entered as shown: Last, First ============ Part 2 Problem Solving Solve as many of the List-2 problems as you can today. Solve the following: count_evens , big_diff , centered_average , sum13 . Submission Package up the 4 solutions above into a program called batlist2.py and submit it to https://gradescope.com https://gradescope.com by midnight tomorrow evening.","title":"Lab9 - Coding bat practice with loops"},{"location":"cs149fall2024/labs/8_lab10-codingbat-loops/#lab9-coding-bat-practice-with-loops","text":"","title":"Lab9 - Coding bat practice with loops"},{"location":"cs149fall2024/labs/8_lab10-codingbat-loops/#background","text":"","title":"Background"},{"location":"cs149fall2024/labs/8_lab10-codingbat-loops/#part-1-account-setupignore-if-you-did-this-in-previous-coding-bat-lab","text":"Go to codingbat.com and create an account (click the link on the upper right). Please use your JMU email when setting up your account. After logging in, click the \"prefs\" link (upper right) and \"share to\" your professor's JMU e-mail for example: chaoaj@jmu.edu so you will get credit. Also make sure your name is entered as shown: Last, First ============","title":"Part 1: Account Setup(ignore if you did this in previous coding bat lab)"},{"location":"cs149fall2024/labs/8_lab10-codingbat-loops/#part-2-problem-solving","text":"Solve as many of the List-2 problems as you can today. Solve the following: count_evens , big_diff , centered_average , sum13 .","title":"Part 2 Problem Solving"},{"location":"cs149fall2024/labs/8_lab10-codingbat-loops/#submission","text":"Package up the 4 solutions above into a program called batlist2.py and submit it to https://gradescope.com https://gradescope.com by midnight tomorrow evening.","title":"Submission"},{"location":"cs149fall2024/labs/9_lab11-8ball/","text":"Lab11 - While loops - Magic 8-Ball Background We have already worked with if statements to detect invalid input. But in some cases users will repeatedly enter the wrong value. In addition, some problems lend themselves to executing the program repeatedly. This lab will explore these uses of loops in Python. Obectives Use a loop structure for error correction. Use a loop structure for execution control. Part 1: The Magic 8-Ball The Magic 8-Ball is a toy produced by Tyco Toys (now Mattel) and consists of a ball filled with a blue fluid. Suspended in the fluid is a icosahedron (a 20-sided polyhedron with each side consisting of an equilateral triangle). Each face has an answer to a yes/no question. Download the eightball.py program then implement the required helper functions: input_yes_no(prompt) This function is simpler than the previous input functions you have written. Display the prompt (followed by \"[yes/no]: \"), read the next line of user input, and return true if it's \"y\" or \"yes\" ignoring case. get_question(prompt) This function should keep prompting the user to enter a question until they enter a valid one. Question strings must be between 1 and 60 characters, and they must end with a question mark. If the question is invalid, display the applicable error message: - \"Your question is blank\" - \"Your question is too long\" - \"Your question must end with a ?\" After completing the helper functions, be sure to test the program multiple times with different inputs. Here is an example of what it will look like: Magic 8-Ball Do you want to ask a question? [yes/no]: yes What is your question? Will I win the lottery Your question must end with a ? What is your question? Will I win the lottery? Question: Will I win the lottery? Answer: Signs point to yes. Do you want to ask a question? [yes/no]: no Goodbye! Your final version should allow you to keep asking questions until you enter the word no, and it should verify that each question is at most 60 chars ending with a question mark. ============ Submission Submit your completed eightball.py file to https://gradescope.com https://gradescope.com by tomorrow evening.","title":"Lab11 - While loops - Magic 8-Ball"},{"location":"cs149fall2024/labs/9_lab11-8ball/#lab11-while-loops-magic-8-ball","text":"","title":"Lab11 - While loops - Magic 8-Ball"},{"location":"cs149fall2024/labs/9_lab11-8ball/#background","text":"We have already worked with if statements to detect invalid input. But in some cases users will repeatedly enter the wrong value. In addition, some problems lend themselves to executing the program repeatedly. This lab will explore these uses of loops in Python.","title":"Background"},{"location":"cs149fall2024/labs/9_lab11-8ball/#obectives","text":"Use a loop structure for error correction. Use a loop structure for execution control.","title":"Obectives"},{"location":"cs149fall2024/labs/9_lab11-8ball/#part-1-the-magic-8-ball","text":"The Magic 8-Ball is a toy produced by Tyco Toys (now Mattel) and consists of a ball filled with a blue fluid. Suspended in the fluid is a icosahedron (a 20-sided polyhedron with each side consisting of an equilateral triangle). Each face has an answer to a yes/no question. Download the eightball.py program then implement the required helper functions: input_yes_no(prompt) This function is simpler than the previous input functions you have written. Display the prompt (followed by \"[yes/no]: \"), read the next line of user input, and return true if it's \"y\" or \"yes\" ignoring case. get_question(prompt) This function should keep prompting the user to enter a question until they enter a valid one. Question strings must be between 1 and 60 characters, and they must end with a question mark. If the question is invalid, display the applicable error message: - \"Your question is blank\" - \"Your question is too long\" - \"Your question must end with a ?\" After completing the helper functions, be sure to test the program multiple times with different inputs. Here is an example of what it will look like: Magic 8-Ball Do you want to ask a question? [yes/no]: yes What is your question? Will I win the lottery Your question must end with a ? What is your question? Will I win the lottery? Question: Will I win the lottery? Answer: Signs point to yes. Do you want to ask a question? [yes/no]: no Goodbye! Your final version should allow you to keep asking questions until you enter the word no, and it should verify that each question is at most 60 chars ending with a question mark. ============","title":"Part 1: The Magic 8-Ball"},{"location":"cs149fall2024/labs/9_lab11-8ball/#submission","text":"Submit your completed eightball.py file to https://gradescope.com https://gradescope.com by tomorrow evening.","title":"Submission"},{"location":"cs149spring2024/","text":"Welcome! This is the website for the Spring 2024 offering of CS149 (Intro to Programming Fundamentals) at James Madison University. Specifically, this is the website for section taught by Alvin Chao Announcements: In person TA support TAs are available in King ISAT/CS room 248 for in-person support at the following times: Sunday 3 pm - 9 pm Monday/Tuesday/Thursday 5 pm - 9 in person, 9-11 pm online Wednesday 6 pm - 9 pm in person then online 9-11pm TA Hours 9 pm to 11 pm via Microsoft Teams(See Canvas for links) TAs are available for virtual online support from 9 pm to 11 pm Sunday through Thursday. Week 15/16 Tue Apr 23 11pm PA2B boxed.py Thu Apr 25 8am Actual Quiz 6[In class - Canvas/Gradescope] Fri Apr 26 Lab 16 Stars[Canvas/Gradescope] Tue Apr 30 11pm PA 3[Canvas/Gradescope] Week 14 Tue Apr 16 11pm Chp 12 Reading[Canvas/Zybook] Thu Apr 18 8am Practice Quiz 6[In class - Canvas/Gradescope] Fri Apr 19 Recursion Lab 15[Canvas/Gradescope] Sun Apr 21 11pm PA2B boxed.py Week 13 Tue Apr 9 11pm Chp 11 Reading[Canvas/Zybook] Thu Apr 11 8am Actual Quiz 5[In class - Canvas/Gradescope] 11pm PA2 Readiness Quiz[Canvas] Sun Apr 14 11pm PA2A word_files.py Sun Apr 21 11pm PA2B boxed.py Week 12 Tue Apr 2 11pm Chp 10 Reading[Canvas/Zybook] Wed Apr 3 11pm PA1B - cantstopx.py [Canvas/Gradescope] Thu Mar 28 11pm Practice Quiz 5[In class - Canvas/Gradescope] Week 11 Tue Mar 26 11pm Chp 9 Reading[Canvas/Zybook] Thu Mar 28 11pm Actual Quiz 4[In class - Canvas/Gradescope] Fri Mar 29 11pm Lab 13 [Canvas/Gradescope] Mon Apr 1 11pm PA1 cantstopx.py[Canvas/Gradescope] Week 10 Tue Mar 19 11pm Chp 8 Reading[Canvas/Zybook] Wed Mar 20 11pm PA1 Readiness Quiz [Canvas/Gradescope] Thu Mar 21 11pm Practice Quiz 4[In class - Canvas/Gradescope] PA1 Dice[Canvas/Gradescope] Fri Mar 8 11pm Lab 12 [Canvas/Gradescope] Week 9 Spring Break Week 8 Tue Mar 5 11pm Chp 7 Reading[Canvas/Zybook] Wed Mar 6 11pm Chap 7 HW[Canvas/Gradescope] Thu Mar 7 8am Actual Quiz 3[In class - Canvas/Gradescope] Fri Mar 8 11pm Lab 11 [Canvas/Gradescope] Week 7 Tue Feb 27 11pm Chp 6 Reading[Canvas/Zybook] Wed Feb 21 11pm Chap 6 HW[Canvas/Gradescope] Thu Feb 22 8am practice Quiz 3[In class - Canvas/Gradescope] Week 6 Tue Feb 20 11pm Chp 5 Reading[Canvas/Zybook] Wed Feb 21 11pm Chap 5 HW[Canvas/Gradescope] Thu Feb 22 8am Actual Quiz 2[In class - Canvas/Gradescope] Week 5 Tue Feb 13 11pm Chp 4 Reading[Canvas/Zybook] Wed Feb 14 11pm Chap 4 HW[Canvas/Gradescope] Thu Feb 15 8am Practice Quiz 2[In class - Canvas/Gradescope] Week 4 Tue Feb 5 11pm NO CLASS TUES - Assessment Day Chp 3 Reading[Canvas/Zybook] Wed Feb 6 11pm Chap 3 HW[Canvas/Gradescope] Thu Feb 7 8am ActualQuiz 1[In class - Canvas/Gradescope] Week 3 Tue Jan 30 11pm Chp2 Reading[Canvas/Zybook] Wed Jan 31 11pm Chap 2 HW[Canvas/Gradescope] Thu Feb 1 8am Practice Quiz 1[In class - Canvas/Gradescope] Week 2 Fri Jan 26 11pm Lab 4[Canvas] piazza word[canvas] Tue Jan 30 11pm Chp2 Reading[Canvas/Zybook] Wed Jan 31 11pm Chap 2 HW[Canvas/Gradescope] Week 1 THU Jan 18 8am [CANVAS] Course Intro Survey Purchase book through Buy Book assignment link. FRI Jan 19 11pm Lab 2[Canvas/Gradescope] Tue Jan 23 11pm Chp1.2-1.8 Reading[Zybook] Wed Jan 24 11pm Chap 1 HW[Canvas/Gradescope] Lab 3[canvas] The class meets Tuesdays and Thursdays. Class meets in person. Please visit the calendar for the week-to-week assignments. My Office Locations Office hours (KING 248): Tues 9:15-9:45 Thu 9:15-9:45 You may schedule an appointment for other times that are not listed to visit my Massanutten 167 office(540)-568-6206 or online via Zoom. Please use the links to the left to navigate the website. Important announcements will be posted on this front page. Other course content will appear on the subpages linked above. Please check this website (especially the front page and calendar) regularly for updates. This semester, we will be using Piazza for class discussions. If you have a question that may be of general interest to your fellow students, please post it on Piazza rather than emailing me directly. This allows others to answer your question or benefit from my answer. I will check the Piazza forum regularly and respond as quickly as I can. To access Piazza, log into Canvas and click the \"Piazza\" link in the navigation bar on the left. Class grades will be accessible via Canvas , and online quizzes will be administered using Canvas as well. Other resources: Connecting to Stu.cs.jmu.edu instructions","title":"Index"},{"location":"cs149spring2024/#welcome","text":"This is the website for the Spring 2024 offering of CS149 (Intro to Programming Fundamentals) at James Madison University. Specifically, this is the website for section taught by Alvin Chao","title":"Welcome!"},{"location":"cs149spring2024/#announcements","text":"In person TA support TAs are available in King ISAT/CS room 248 for in-person support at the following times: Sunday 3 pm - 9 pm Monday/Tuesday/Thursday 5 pm - 9 in person, 9-11 pm online Wednesday 6 pm - 9 pm in person then online 9-11pm TA Hours 9 pm to 11 pm via Microsoft Teams(See Canvas for links) TAs are available for virtual online support from 9 pm to 11 pm Sunday through Thursday. Week 15/16 Tue Apr 23 11pm PA2B boxed.py Thu Apr 25 8am Actual Quiz 6[In class - Canvas/Gradescope] Fri Apr 26 Lab 16 Stars[Canvas/Gradescope] Tue Apr 30 11pm PA 3[Canvas/Gradescope] Week 14 Tue Apr 16 11pm Chp 12 Reading[Canvas/Zybook] Thu Apr 18 8am Practice Quiz 6[In class - Canvas/Gradescope] Fri Apr 19 Recursion Lab 15[Canvas/Gradescope] Sun Apr 21 11pm PA2B boxed.py Week 13 Tue Apr 9 11pm Chp 11 Reading[Canvas/Zybook] Thu Apr 11 8am Actual Quiz 5[In class - Canvas/Gradescope] 11pm PA2 Readiness Quiz[Canvas] Sun Apr 14 11pm PA2A word_files.py Sun Apr 21 11pm PA2B boxed.py Week 12 Tue Apr 2 11pm Chp 10 Reading[Canvas/Zybook] Wed Apr 3 11pm PA1B - cantstopx.py [Canvas/Gradescope] Thu Mar 28 11pm Practice Quiz 5[In class - Canvas/Gradescope] Week 11 Tue Mar 26 11pm Chp 9 Reading[Canvas/Zybook] Thu Mar 28 11pm Actual Quiz 4[In class - Canvas/Gradescope] Fri Mar 29 11pm Lab 13 [Canvas/Gradescope] Mon Apr 1 11pm PA1 cantstopx.py[Canvas/Gradescope] Week 10 Tue Mar 19 11pm Chp 8 Reading[Canvas/Zybook] Wed Mar 20 11pm PA1 Readiness Quiz [Canvas/Gradescope] Thu Mar 21 11pm Practice Quiz 4[In class - Canvas/Gradescope] PA1 Dice[Canvas/Gradescope] Fri Mar 8 11pm Lab 12 [Canvas/Gradescope] Week 9 Spring Break Week 8 Tue Mar 5 11pm Chp 7 Reading[Canvas/Zybook] Wed Mar 6 11pm Chap 7 HW[Canvas/Gradescope] Thu Mar 7 8am Actual Quiz 3[In class - Canvas/Gradescope] Fri Mar 8 11pm Lab 11 [Canvas/Gradescope] Week 7 Tue Feb 27 11pm Chp 6 Reading[Canvas/Zybook] Wed Feb 21 11pm Chap 6 HW[Canvas/Gradescope] Thu Feb 22 8am practice Quiz 3[In class - Canvas/Gradescope] Week 6 Tue Feb 20 11pm Chp 5 Reading[Canvas/Zybook] Wed Feb 21 11pm Chap 5 HW[Canvas/Gradescope] Thu Feb 22 8am Actual Quiz 2[In class - Canvas/Gradescope] Week 5 Tue Feb 13 11pm Chp 4 Reading[Canvas/Zybook] Wed Feb 14 11pm Chap 4 HW[Canvas/Gradescope] Thu Feb 15 8am Practice Quiz 2[In class - Canvas/Gradescope] Week 4 Tue Feb 5 11pm NO CLASS TUES - Assessment Day Chp 3 Reading[Canvas/Zybook] Wed Feb 6 11pm Chap 3 HW[Canvas/Gradescope] Thu Feb 7 8am ActualQuiz 1[In class - Canvas/Gradescope] Week 3 Tue Jan 30 11pm Chp2 Reading[Canvas/Zybook] Wed Jan 31 11pm Chap 2 HW[Canvas/Gradescope] Thu Feb 1 8am Practice Quiz 1[In class - Canvas/Gradescope] Week 2 Fri Jan 26 11pm Lab 4[Canvas] piazza word[canvas] Tue Jan 30 11pm Chp2 Reading[Canvas/Zybook] Wed Jan 31 11pm Chap 2 HW[Canvas/Gradescope] Week 1 THU Jan 18 8am [CANVAS] Course Intro Survey Purchase book through Buy Book assignment link. FRI Jan 19 11pm Lab 2[Canvas/Gradescope] Tue Jan 23 11pm Chp1.2-1.8 Reading[Zybook] Wed Jan 24 11pm Chap 1 HW[Canvas/Gradescope] Lab 3[canvas] The class meets Tuesdays and Thursdays. Class meets in person. Please visit the calendar for the week-to-week assignments. My Office Locations Office hours (KING 248): Tues 9:15-9:45 Thu 9:15-9:45 You may schedule an appointment for other times that are not listed to visit my Massanutten 167 office(540)-568-6206 or online via Zoom. Please use the links to the left to navigate the website. Important announcements will be posted on this front page. Other course content will appear on the subpages linked above. Please check this website (especially the front page and calendar) regularly for updates.","title":"Announcements:"},{"location":"cs149spring2024/calendar/","text":"CS149 Section 003 Calendar // <![CDATA[ dttest1 = new Date(2024,0,16); dttest2 = new Date(2024,4,24); function diff_weeks(dt2, dt1) { var diff =(dt2.getTime() - dt1.getTime()) / 1000; // diff in secs diff /= (60 * 60 * 24 * 7); // convert seconds to weeks return Math.abs(Math.round(diff)); } // Start of semester - remember JS date month is one less than current. var dt1 = new Date(2024, 0, 12); // new Date(2023, 7, 17); // January 1 = (2021, 0, 1) // document.write(\"dt1\" + dt1); var dt2 = new Date(); // document.write(\"d2\" + dt2); wk = diff_weeks(dt2,dt1); // document.write(\"Week: \" + wk); if (wk >= 16) { wk = 16; } else if (wk <= 0) { wk = 1; } document.write(\"<a href=\\\"#Week\"+wk+\"\\\">Current Week</a>\"); document.write(\"<!-- wk \" + wk + \"-->\"); // ]]> Python and Config Resources: Python 3 Standard Library Python Tutor Show Me Your Code Unicode Character List print formatting reference Math Module Thonny-Pep8 List Methods Dictionary Methods . Set Methods Docstring Style Guide Main program: if __name__ == \"__main__\": ( Note: This schedule is tentative and is subject to change during the semester ) Week Date Reading Topic HW / Programming Assignment Events Week 1 1/16/24 Intro to CS149 Intro Python Lecture 2 C1 Obtain Book assignment 1/18/24 Thonny Video Lab 2 - Thonny lab2-video C2 Week 2 1/23/24 Chp 1 Reading (Canvas/Zybook)Tue 11pm 1/23/24 Lecture 3 HW1.1-1.2 in class Lab 3 - Style . Lab 3 Video C2 Start HW 1(due Wed 1-24-24 11pm) 1/25/24 Statements: Lecture 3B Lab 4 C3 Week 3 1/30/24 Chp 2 Reading (Canvas/Zybook)Tue 11pm 1/30/24 Lecture 4 Interpret Gradescope errors video Practice variables lab referenced in Gradescope errors video C4 HW 2(Wed 1-31-24 11pm) 2/2/24 Expressions: Lecture 6 Circle Math Conditionals Lecture 5 Practice Quiz1 - In Class C5 Week 4 2/6/24 Branching/Conditionals/Assert: Chp 3 Reading (Canvas/Zybook) Mon 11pm 2-5-24 Assessment Day No Class C6 Lab 6 If Then HW3 (Wed 2-7-23 11pm) 2/8/24 Conditionals Lecture 7 Functions Lecture 8 Actual Quiz1 C7 Week 5 2/13/24 Chp 4 Reading Tue 2-13-24 11pm Time Management Functions: Lecture 9 Functions Lab 7 Circle Lab Coding Bat logic1 practice C8 HW4 (Wed 2-14-24 11pm) 2/15/24 Chp 4 Lecture 10 Containers Practice Quiz2 C9 - Week 6 2/20/24 Chp 5 Reading due Tue 2-20-24 11pm Types including lists, sets, dicts Lecture 11 more containers Lab 8 List - Tuples C10 HW5 (Wed 2-21-24 11pm) 2/22/24 Honor Code Case Studies(pdf) Honor Code Videos Honor Code Sheet C11 Actual Quiz 2 Lecture 12 - For loops Week 7 2/27/24 Chp 6 Reading due Tue 2-27-24 11pm Coding Bat Loops Lab recommend first_last6 to sum3 - not graded Lab 9 Haiku Lab C12 HW6 (Wed 2-28-24 11pm) 2/29/24 Lecture 13 While loops C13 Practice Quiz 3 Week 8 3/5/24 Chp7 While Loops due Tue 3-5-24 11pm Lecture Unit Testing Lab 11 Eight Ball Lab C14 HW7 (Wed 3-6-24 11pm) 3/7/24 C15 Lecture Modules Actual Quiz 3 Week 9 3/12/24 - No class - Spring Break 3/14/24 - No class Spring Break March 11-15 C17 Week 10 3/19/24 Chp8 Modules reading due 3-19-24 11pm Tests for PA1 and PyTest PA1-Readiness Quiz in Canvas due Thu 3/21/24 PA1A Dice due Sun 3/24/24 3/22/24 Withdraw W deadline 3/21/24 Lecture 16 - File IO Practice Quiz 4 - Week 11 3/26/24 Chp9 File I/O reading due 3-26-24 11pm Lecture 17 Command line Lab 13 List Play PA1B due 4-1-24 3/28/24 Lecture Sequences/Strings Actual Quiz 4 Week 12 4/2/24 Chp10 Sequences Lab 14 FileI/O VS Code 4/4/24 Practice Quiz 5 Week 13 4/9/24 Chp 11 Nested Data Lecture 19 Nested Loops 4/11/24 Actual Quiz 5 Recursion lecture PA2 Readiness Quiz due 4/11 11pm Week 14 4/16/24 Chp 12 Recursion Lab 15 - Recursion PA2A word_files due Sun 4/14 11pm 4/18/24 JSON examples Practice Quiz 6 C26 PA2B boxed.py due Tue 4/23 11pm Week 15 4/23/24 Stars Lab - 4/25/24 Actual Quiz 6 - Week 16 4/30/24 PA3 work day PA3 due Tue 4/30 5/2/24 Final Review Last day of classes Week 17 5/7/24 Exam Week Exam Schedule Exam Week 5/9/24 Final Exam - Thu 5/9 8-10am Exam Week Back to Top Back to Top // <![CDATA[ $(window).load(function(){ // using window load function instead of document ready function /* Animated scroll to top by @NickLa, Web Designer Wall (http://webdesignerwall.com/tutorials/animated-scroll-to-top) with modifications by johns2ja */ // hide #back-top first $(\"#back-top\").hide(); // fade in #back-top //$(function () { /* remove containing function to ensure it works cross-browser - johns2ja */ $(window).scroll(function () { if ($(this).scrollTop() > 100) { $('#back-top').fadeIn(); } else { $('#back-top').fadeOut(); } }); // scroll body to 0px on click $('#back-top a').click(function () { $('body,html').animate({ scrollTop: 0 }, 800); return false; }); // }); /* remove containing function to ensure it works cross-browser */ }); // ]]> <!-- #back-top { bottom: 130px; left: 5%; /* instead of margin-left - johns2ja */ position: fixed; } #back-top a { color: #bbb !important; display: block; font-size: 11px; height: 75px; text-align: center; text-decoration: none !important; text-transform: uppercase; transition: all 1s ease 0s; width: 75px; } #back-top span { background: #ddd url(\"//www.jmu.edu/jmucmsfiles/images/up-arrow.png\") no-repeat scroll center center; border-radius: 15px; display: block; height: 75px; margin-bottom: 7px; transition: all 1s ease 0s; width: 75px; } @media all and (max-width:768px){ /* RWD by johns2ja */ #back-top { bottom: 3%; left: 1%; } #back-top a { height: 32px; width: 32px; font-size: 0px; } #back-top span { width: 32px; height: 32px; background-size: 32px; } } -->","title":"CS149 Section 003 Calendar"},{"location":"cs149spring2024/calendar/#cs149-section-003-calendar","text":"","title":"CS149 Section 003 Calendar"},{"location":"cs149spring2024/pa1_draft/","text":"Programming Assignment(PA) 1: Poker Dice Introduction Poker dice is a dice game similar to Yahtzee played with 5 six sided dice with face values 9, 10, J, Q, K , A. The following table represents a summary of the rules for Poker Dice scores: Type# Category Description Scoring 1 One Pair A pair of the same face value 9, 9, 10, J, K Sum of Matched Values 2 Two Pair Two unique pairs of face values 9, 9, 10, 10 K Sum of both pair values 3 Three of a Kind At least Three of the same face value Sum of three Similar Dice + 10) 4 Four of a Kind At least Four of the same face value Sum of four similar Dice + 20 5 Five of a Kind All five face values are the same 100 points 6 Full House 3 of a kind and a pair 9, 9, 9, A, A (unique face values) 50 points + sum of dice face values 7 Small Straight 4 or more face values in a row 70 points 8 Large Straight All 5 dice sequential 9,10,J,Q,K or 10, J, Q, K, A 95 points 9 Chance Any roll Sum of dice face values The final column in the table describes the score if the player chooses the corresponding score type. For example, if a player selects one pair and the roll is ['9', '9', 'J','Q','A'], the score will be 18 because score is twice the pair value. If the dice rolled are ['9', '9', 'Q', 'A', '9'], then the payout will still be 18, because no extra points are given for a three of a kind because one pair was the selected score type. Your goal for this assignment is to create a dice module and develop and test a function for determining scoring in Poker Dice. Provided Code Start with the following source files: dice.py -- NEED TO CREATE poker_dice.py -- DO NOT EDIT score_dice.py -- UNFINISHED test_score_dice.py -- UNFINISHED dice.py The dice module will work with a list of 5 string die face values. This module will need to work with not just our Poker Dice number of dice (5) but with any number from 1--10 dice. The module will contain five functions: roll_dice -- This function will take two parameters. The first will be an int for the number of dice in the list. The second parameter will be a random seed integer, with a default value of 0. Note it is possible to pass None as a parameter, which should result in a random seed value. This function will return a list of n dice values (each die has a string face value between '9' - 'A'). If the number of dice is out of range 1--10 then a single die of value '9' will be returned as a list of 1 item. If no parameters are provided, then a list of 5 dice values should be returned (having been generated using a seed of 0). are_valid -- This function takes a dice parameter which is a list of from 1--10 dice rolls. This function will check the length of the list to make sure it is between 1 and 10 and check if the values of all dice in the list are between '9' and 'A'. Return True if all these conditions are met, False otherwise. get_value -- This function takes a string argument and gets the scoring numerical point value of a die face value. Face values are: 9 and 10 for the numerical string values, 10 for 'J', 'Q', 'K', and 11 for 'A'. num_faces -- This function takes a dice_list parameter which is a list of from 1--10 dice rolls. It will also take a second parameter for the face value being counted, with a default of None. The function returns a count of the number of times a particular face value shows on the dice in the list. For example, if the dice are ['9', '9','9', 'A', 'K'], dice.num_faces(dice, 9) will return 3 (since the value '9' occurs three times). If no parameter is passed (i.e., None) then count should return 0. Also, if an invalid list or face value of None is passed the function should return -1. add_values -- This function takes a dice parameter which is a list of from 1--10 dice rolls. It will calculate and return the sum of the face values of the dice in the list. Make sure you use the validation function for dice and return a -1 for an invalid list of dice. poker_dice.py This module contains a simple terminal-based Poker Dice game. Once you have completed calculate_score.py you can use this driver to try out your code. This driver will call the dice.py module and use the roll_dice function to return dice rolls. It may not be very useful for systematically testing your solution. The main mechanism for running your code for this project will be the test_calculate_score.py file described below. score_dice.py Your main task for this assignment is to implement the score_dice.calculate_score function according to the provided documentation string. For full credit, your finished function must satisfy the following requirements: A nested conditional should be used to distinguish between the different scorign types Appropriate helper functions must be used to break the problem into smaller and more manageable pieces. The add_values and num_faces functions from the dice module should be used. Your code must make use of the named constants(FACES, FACES_LIST) declared at the top of the dice program. Avoid the use of hard-coded literal values in your solution. Your score_dice.calculate_score function must have only one return statement. test_score_dice.py You must write unit tests for score_dice.py . Rather than writing one very long test_score_dice function, you should write several smaller tests to handle distinct cases. The provided file contains two testing functions to get you started. Notice that the names of these functions describe the situations they are designed to test. For example, the name test_calculate_score_one_pair_no_match : test - This makes it clear that this is a testing function calculate_score - this is the function being tested one_pair_no_match - this is the situation being tested. You should properly document your tests and your score_dice.py file. Docstrings for test functions are generally not required. Categories that you should test include (this is a template for your test_score_dice.py file): Test score one pair no match Test score one pair one match Test score two pair no match Test score two pair one match Test score three of a kind match Test score three of a kind no match Test score four of a kind match Test score four of a kind no match Test score five of a kind match Test score five of a kind no match Test score small straight match Test score small straight no match Test score large straight match Test score large straight no match Test score chance match Part A - Readiness Quiz and dice.py (30 points) 1) Readiness Quiz (10 points) in Canvas. Before the deadline for Part A you should read this document carefully, then look at the starter code provided above. Once you have a clear understanding of the expectations for this assignment, complete the readiness quiz in Canvas (10 points). The grading for this quiz will be all or nothing: your score on the quiz will be 0 if you miss any questions. If you do not successfully complete the readiness quiz, you cannot receive any credit for Part A or Part B. 2) You should also complete the dice.py file (20 pts) and submit this to Gradescope by the deadline for your section. Be sure to test your dice module carefully for correctness AND style before submitting into gradescope; You will be limited to 10 submissions for Part A code. Part B - Code (70 points) Upload only your score_dice.py file to Gradescope. You should not include poker_dice.py or test_score_dice.py in your submission. Before uploading your submission to Gradescope, be sure to complete the following steps: Test your solution carefully. Make sure that poker_dice.py works as expected with your finished code. Review the course style guide to ensure that your code meets the style requirements. Run flake8 and eliminate all warnings. Review and update comments as needed. You are limited to a maximum of 10 submissions into Gradescope for Part B. Programming Assignment Attribution Provide a short statement describing any assistance that you received on this assignment, either from another student, an online source, an AI-enabled tool, or any other source. Acknowledgments This assignment was created by Alvin Chao. Some parts of the Poker dice description above are borrowed from the Poker Dice Wikipedia page. The Wikipedia article, and this assignment page, are licensed under the Creative Commons Attribution-Share-Alike License 3.0.","title":"Programming Assignment(PA) 1: Poker Dice"},{"location":"cs149spring2024/pa1_draft/#programming-assignmentpa-1-poker-dice","text":"","title":"Programming Assignment(PA) 1: Poker Dice"},{"location":"cs149spring2024/pa1_draft/#introduction","text":"Poker dice is a dice game similar to Yahtzee played with 5 six sided dice with face values 9, 10, J, Q, K , A. The following table represents a summary of the rules for Poker Dice scores: Type# Category Description Scoring 1 One Pair A pair of the same face value 9, 9, 10, J, K Sum of Matched Values 2 Two Pair Two unique pairs of face values 9, 9, 10, 10 K Sum of both pair values 3 Three of a Kind At least Three of the same face value Sum of three Similar Dice + 10) 4 Four of a Kind At least Four of the same face value Sum of four similar Dice + 20 5 Five of a Kind All five face values are the same 100 points 6 Full House 3 of a kind and a pair 9, 9, 9, A, A (unique face values) 50 points + sum of dice face values 7 Small Straight 4 or more face values in a row 70 points 8 Large Straight All 5 dice sequential 9,10,J,Q,K or 10, J, Q, K, A 95 points 9 Chance Any roll Sum of dice face values The final column in the table describes the score if the player chooses the corresponding score type. For example, if a player selects one pair and the roll is ['9', '9', 'J','Q','A'], the score will be 18 because score is twice the pair value. If the dice rolled are ['9', '9', 'Q', 'A', '9'], then the payout will still be 18, because no extra points are given for a three of a kind because one pair was the selected score type. Your goal for this assignment is to create a dice module and develop and test a function for determining scoring in Poker Dice.","title":"Introduction"},{"location":"cs149spring2024/pa1_draft/#provided-code","text":"Start with the following source files: dice.py -- NEED TO CREATE poker_dice.py -- DO NOT EDIT score_dice.py -- UNFINISHED test_score_dice.py -- UNFINISHED","title":"Provided Code"},{"location":"cs149spring2024/pa1_draft/#dicepy","text":"The dice module will work with a list of 5 string die face values. This module will need to work with not just our Poker Dice number of dice (5) but with any number from 1--10 dice. The module will contain five functions: roll_dice -- This function will take two parameters. The first will be an int for the number of dice in the list. The second parameter will be a random seed integer, with a default value of 0. Note it is possible to pass None as a parameter, which should result in a random seed value. This function will return a list of n dice values (each die has a string face value between '9' - 'A'). If the number of dice is out of range 1--10 then a single die of value '9' will be returned as a list of 1 item. If no parameters are provided, then a list of 5 dice values should be returned (having been generated using a seed of 0). are_valid -- This function takes a dice parameter which is a list of from 1--10 dice rolls. This function will check the length of the list to make sure it is between 1 and 10 and check if the values of all dice in the list are between '9' and 'A'. Return True if all these conditions are met, False otherwise. get_value -- This function takes a string argument and gets the scoring numerical point value of a die face value. Face values are: 9 and 10 for the numerical string values, 10 for 'J', 'Q', 'K', and 11 for 'A'. num_faces -- This function takes a dice_list parameter which is a list of from 1--10 dice rolls. It will also take a second parameter for the face value being counted, with a default of None. The function returns a count of the number of times a particular face value shows on the dice in the list. For example, if the dice are ['9', '9','9', 'A', 'K'], dice.num_faces(dice, 9) will return 3 (since the value '9' occurs three times). If no parameter is passed (i.e., None) then count should return 0. Also, if an invalid list or face value of None is passed the function should return -1. add_values -- This function takes a dice parameter which is a list of from 1--10 dice rolls. It will calculate and return the sum of the face values of the dice in the list. Make sure you use the validation function for dice and return a -1 for an invalid list of dice.","title":"dice.py"},{"location":"cs149spring2024/pa1_draft/#poker_dicepy","text":"This module contains a simple terminal-based Poker Dice game. Once you have completed calculate_score.py you can use this driver to try out your code. This driver will call the dice.py module and use the roll_dice function to return dice rolls. It may not be very useful for systematically testing your solution. The main mechanism for running your code for this project will be the test_calculate_score.py file described below.","title":"poker_dice.py"},{"location":"cs149spring2024/pa1_draft/#score_dicepy","text":"Your main task for this assignment is to implement the score_dice.calculate_score function according to the provided documentation string. For full credit, your finished function must satisfy the following requirements: A nested conditional should be used to distinguish between the different scorign types Appropriate helper functions must be used to break the problem into smaller and more manageable pieces. The add_values and num_faces functions from the dice module should be used. Your code must make use of the named constants(FACES, FACES_LIST) declared at the top of the dice program. Avoid the use of hard-coded literal values in your solution. Your score_dice.calculate_score function must have only one return statement.","title":"score_dice.py"},{"location":"cs149spring2024/pa1_draft/#test_score_dicepy","text":"You must write unit tests for score_dice.py . Rather than writing one very long test_score_dice function, you should write several smaller tests to handle distinct cases. The provided file contains two testing functions to get you started. Notice that the names of these functions describe the situations they are designed to test. For example, the name test_calculate_score_one_pair_no_match : test - This makes it clear that this is a testing function calculate_score - this is the function being tested one_pair_no_match - this is the situation being tested. You should properly document your tests and your score_dice.py file. Docstrings for test functions are generally not required. Categories that you should test include (this is a template for your test_score_dice.py file): Test score one pair no match Test score one pair one match Test score two pair no match Test score two pair one match Test score three of a kind match Test score three of a kind no match Test score four of a kind match Test score four of a kind no match Test score five of a kind match Test score five of a kind no match Test score small straight match Test score small straight no match Test score large straight match Test score large straight no match Test score chance match","title":"test_score_dice.py"},{"location":"cs149spring2024/pa1_draft/#part-a-readiness-quiz-and-dicepy-30-points","text":"1) Readiness Quiz (10 points) in Canvas. Before the deadline for Part A you should read this document carefully, then look at the starter code provided above. Once you have a clear understanding of the expectations for this assignment, complete the readiness quiz in Canvas (10 points). The grading for this quiz will be all or nothing: your score on the quiz will be 0 if you miss any questions. If you do not successfully complete the readiness quiz, you cannot receive any credit for Part A or Part B. 2) You should also complete the dice.py file (20 pts) and submit this to Gradescope by the deadline for your section. Be sure to test your dice module carefully for correctness AND style before submitting into gradescope; You will be limited to 10 submissions for Part A code.","title":"Part A - Readiness Quiz and dice.py (30 points)"},{"location":"cs149spring2024/pa1_draft/#part-b-code-70-points","text":"Upload only your score_dice.py file to Gradescope. You should not include poker_dice.py or test_score_dice.py in your submission. Before uploading your submission to Gradescope, be sure to complete the following steps: Test your solution carefully. Make sure that poker_dice.py works as expected with your finished code. Review the course style guide to ensure that your code meets the style requirements. Run flake8 and eliminate all warnings. Review and update comments as needed. You are limited to a maximum of 10 submissions into Gradescope for Part B.","title":"Part B - Code (70 points)"},{"location":"cs149spring2024/pa1_draft/#programming-assignment-attribution","text":"Provide a short statement describing any assistance that you received on this assignment, either from another student, an online source, an AI-enabled tool, or any other source.","title":"Programming Assignment Attribution"},{"location":"cs149spring2024/pa1_draft/#acknowledgments","text":"This assignment was created by Alvin Chao. Some parts of the Poker dice description above are borrowed from the Poker Dice Wikipedia page. The Wikipedia article, and this assignment page, are licensed under the Creative Commons Attribution-Share-Alike License 3.0.","title":"Acknowledgments"},{"location":"cs149spring2024/python-setup/","text":"CS149 Python Setup The purpose of this document is to walk you through the process of setting up your computer for Python development and code submission in CS 149. Downloading and Installing Thonny The officially supported Integrated Development Environment (IDE) for this semester will be Thonny. Download and run the appropriate installer for your operating system from https://thonny.org/ . You should accept all of the default options during installation. Revealing File Extensions When naming files, there is a longstanding convention of using file extensions to indicate the type of information that the file contains. For example, a Windows executable might be named installer.exe , while a Word document might be named FinalReport.docx . In this case .exe and .docx are the file extensions indicating the file types. In the good old days, these file exertions were visible by default, and they were often helpful in figuring out file types. Unfortunately, file extensions could also be confusing and intimidating for non-technical users. For example, .avi , .mp4 , .mpg , .divx , .mov (among many others) are all file extensions that represent different kinds of video files. Understanding the differences between them is crucial to someone involved in video production, but irrelevant to someone who just wants to watch the video. In the interest of not confusing people, modern operating systems generally hide file extensions by default. Now that you are a computer scientist, you have become the kind of person who needs to pay attention to file extensions. Congratulation! This means that you should modify the settings on your computer to show file extensions by default. Follow the instructions in the following links to change the appropriate settings on your computer: Windows: https://fileinfo.com/help/windows_10_show_file_extensions OSX: https://www.howtogeek.com/714021/how-to-show-all-filename-extensions-on-the-mac/ Saving Files in Thonny and Submitting Through Gradescope You will save yourself some trouble this semester if you get into the habit of organizing your Python files into folders organized by assignment. I suggest creating a top-level folder named CS149 that you can use to store each individual assignment folder. Watch the video below for an example of how this can be accomplished. PEP8 - Python Style When writing in English, readability can be impacted by the way the text is laid out on the page. We use conventions, like indenting the first sentence of a paragraph, to make it easier to understand written text. Programming languages are the same. Programs are easier to read if we agree on a set of conventions for how the code should be formatted. PEP 8 is the official document that describes the standard formatting conventions for Python code. (Here is a prettier version: https://pep8.org/ .) You don\u2019t need to read and understand the full PEP 8 document now, but you may want to look it over to get a feel for the issues that it addresses. When you submit homework assignments for CS 149 they will automatically be checked against the PEP 8 formatting requirements using a tool named flake8 . You will only receive full credit if you pass all of these automated style checks. You can install flake8 in Thonny by selecting Tools -> Manage Packages\u2026 and then finding and installing flake8 as well as pep8-naming . After installation, you should be able to check your file by typing the following into the Thonny shell: >>> !flake8 hello_world.py The exclamation point tells the Python interpreter the command should not be interpreted as Python code. Note that the Gradescope autograder is configured to be slightly more lenient than the default settings for flake8 . We allow line lengths up to 100 and disable checks for some errors and warnings. If you want to run flake8 with exactly the same settings as Gradescope, you can copy the following file into the same directory as your python code: setup.cfg Video Watch this short video for a demonstration of the steps required to create a new Python file, store it in a reasonable location, and submit it through Gradescope.","title":"Python setup"},{"location":"cs149spring2024/python-setup/#cs149-python-setup","text":"The purpose of this document is to walk you through the process of setting up your computer for Python development and code submission in CS 149.","title":"CS149 Python Setup"},{"location":"cs149spring2024/labs/10_pa1-tests/","text":"Lab12 - PA1 Unit Tests Videos for explanation of Cant Stop: 1) https://www.youtube.com/watch?v=sI3HLZ36VPM 2) Our version: https://youtu.be/g1DFGT_1tJQ Here is a starting point for Part A of the project. Two example assert statements are provided for each test function. You should add at least three more to each function, so that every requirement of the project is tested. Note: Docstrings are generally not required for test functions. But you should still have a module docstring with your name and date. test_dice.py \"\"\"Test_dice.py - test the dice module. @author: Alvin Chao @version: 3-21-24 I got help from TA Madison on the valid tests. \"\"\" import unittest import dice class TestDice(unittest.TestCase): def test_roll_dice_valid(self): expected = [4] actual = dice.roll_dice(1,0) self.assertEqual(expected, actual, \"1-0\") def test_roll_dice_invalid(self): pass def test_are_valid_valid(self): pass def test_are_valid_invalid(self): pass if __name__ == '__main__': unittest.main() Also here are some stubs for the dice module: \"\"\" PA1- dice.py. @author: Alvin Chao @version: 3-21-24 I got help from TA Marshall on the invalid tests. \"\"\" def roll_dice(num, seed): my_dice = [] my_dice.append[6] return my_dice def are_valid(dice): return True","title":"Lab12 - PA1 Unit Tests"},{"location":"cs149spring2024/labs/10_pa1-tests/#lab12-pa1-unit-tests","text":"Videos for explanation of Cant Stop: 1) https://www.youtube.com/watch?v=sI3HLZ36VPM 2) Our version: https://youtu.be/g1DFGT_1tJQ Here is a starting point for Part A of the project. Two example assert statements are provided for each test function. You should add at least three more to each function, so that every requirement of the project is tested. Note: Docstrings are generally not required for test functions. But you should still have a module docstring with your name and date. test_dice.py \"\"\"Test_dice.py - test the dice module. @author: Alvin Chao @version: 3-21-24 I got help from TA Madison on the valid tests. \"\"\" import unittest import dice class TestDice(unittest.TestCase): def test_roll_dice_valid(self): expected = [4] actual = dice.roll_dice(1,0) self.assertEqual(expected, actual, \"1-0\") def test_roll_dice_invalid(self): pass def test_are_valid_valid(self): pass def test_are_valid_invalid(self): pass if __name__ == '__main__': unittest.main() Also here are some stubs for the dice module: \"\"\" PA1- dice.py. @author: Alvin Chao @version: 3-21-24 I got help from TA Marshall on the invalid tests. \"\"\" def roll_dice(num, seed): my_dice = [] my_dice.append[6] return my_dice def are_valid(dice): return True","title":"Lab12 - PA1 Unit Tests"},{"location":"cs149spring2024/labs/11_lab13-list-play/","text":"Lab13 - List Play - Processing list elements Background You will write today's program from scratch. Create a new Python program named list_play with a main method. For each step below, you should add code to the program without replacing prior code. When you are finished, this program will provide you with a reference for working with lists/arrays including initializing, printing, and comparing. Objectives - Use a list to store a sequence of values. - Display the contents of an list with a loop. - Practice manipulating various types of lists. Key Terms initializer list list of values used to instantiate and initialize an array in one step len(list) Returns the number of elements in a list subscript integer value in brackets [ ] that specifies an element of an array/list ArrayIndexOutOfBoundsException error raised when trying to access A[i] where i < 0 or i >= A.length Part 1: Sequentially accessing an array Whenever you are asked to do something to your array and then print it, you should finish the update step first and then have a separate loop to do the printing. 1. Create a function called part_one() that creates a single array of integers that is 6 elements long you can initialize zero values for the initial array. 2. Initialize each of the array elements to the value -1 using a loop of your choice. 3. In another loop, save each element of the array into a string with newlines at the end as shown: array[0] = -1 array[1] = -1 ... Add code to change the value of each element of the array to its subscript. For example, array[3] should hold the value 3. Store the new contents of the array into the return string. You may copy and paste the code from step 3. If you have not seen a list index out of range error, make one by causing a loop to read past the end of the array. What happens? Fix the code that causes the list index out of range. Then add code to re-initialize Your function should return the final return string value(see expected FINAL OUTPUT section below for how this will look if you print the contents of part_one return string. Part 2: Randomly accessing an array Create a function called dice_roll(seed). This function will take in a see value for the random module and return a dice roll value of 1-6. Don't forget to import random at the top of your program to use the random module. You should check that your seed is not None as well. Create a function called part_two(). This should: Create an array of 6 int values [0, 0, 0, 0 ,0 , 0] Create a loop that will iterate at least 25 times. In the loop body: Roll the die. (using the dice_roll method in #1 above where the seed value sent is the index value of the loop for the 25 time 0-24) Based on the result of the roll, add up the corresponding cell of your array. The value of each array element should be the number of times that roll is made. After the loop finishes, print the results of the simulation. For example, the final array should be: [2, 8, 4, 4, 4, 3] you would output: 1 was rolled 2 times. 2 was rolled 8 times. ... see the FINAL OUTPUT below for how this should be formatted with double return statements at the end and return this output as a return string for the function. Part 3: Working with multiple arrays For this exercise, you will need two arrays of double values. Create a main section that sets up the two arrays like this: print(\"Before\") a1 = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0] a2 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] print(store_array_values(a1, a2)) change_array(a1, a2) print(\"After\") print(store_array_values(a1, a2)) Write the first function store_array_values(a1, a2) which will take the two arrays as input then return an return string of the values of the arrays. See the FINAL OUTPUT section below for how this is formatted. Write a second function change_array(a1, a2): This will change the values of the array as follows: Write a loop to change all values of a2 to those in a1. Finally, change the index 0 element of the first array(a1) to 99.0 and the index 5 element of the second array(a2) to 99.0. Check that the contents of the two arrays are indeed different after calling your change_array function. If not, make the appropriate corrections. Check all output with the lab14.exp expected output below. FINAL OUTPUT Here is the expected output file for lab13.exp Submit your final list_play file to https://gradescope.com.","title":"Lab13 - List Play - Processing list elements"},{"location":"cs149spring2024/labs/11_lab13-list-play/#lab13-list-play-processing-list-elements","text":"","title":"Lab13 - List Play - Processing list elements"},{"location":"cs149spring2024/labs/11_lab13-list-play/#background","text":"You will write today's program from scratch. Create a new Python program named list_play with a main method. For each step below, you should add code to the program without replacing prior code. When you are finished, this program will provide you with a reference for working with lists/arrays including initializing, printing, and comparing.","title":"Background"},{"location":"cs149spring2024/labs/11_lab13-list-play/#objectives","text":"- Use a list to store a sequence of values. - Display the contents of an list with a loop. - Practice manipulating various types of lists.","title":"Objectives"},{"location":"cs149spring2024/labs/11_lab13-list-play/#key-terms","text":"initializer list list of values used to instantiate and initialize an array in one step len(list) Returns the number of elements in a list subscript integer value in brackets [ ] that specifies an element of an array/list ArrayIndexOutOfBoundsException error raised when trying to access A[i] where i < 0 or i >= A.length","title":"Key Terms"},{"location":"cs149spring2024/labs/11_lab13-list-play/#part-1-sequentially-accessing-an-array","text":"Whenever you are asked to do something to your array and then print it, you should finish the update step first and then have a separate loop to do the printing. 1. Create a function called part_one() that creates a single array of integers that is 6 elements long you can initialize zero values for the initial array. 2. Initialize each of the array elements to the value -1 using a loop of your choice. 3. In another loop, save each element of the array into a string with newlines at the end as shown: array[0] = -1 array[1] = -1 ... Add code to change the value of each element of the array to its subscript. For example, array[3] should hold the value 3. Store the new contents of the array into the return string. You may copy and paste the code from step 3. If you have not seen a list index out of range error, make one by causing a loop to read past the end of the array. What happens? Fix the code that causes the list index out of range. Then add code to re-initialize Your function should return the final return string value(see expected FINAL OUTPUT section below for how this will look if you print the contents of part_one return string.","title":"Part 1: Sequentially accessing an array"},{"location":"cs149spring2024/labs/11_lab13-list-play/#part-2-randomly-accessing-an-array","text":"Create a function called dice_roll(seed). This function will take in a see value for the random module and return a dice roll value of 1-6. Don't forget to import random at the top of your program to use the random module. You should check that your seed is not None as well. Create a function called part_two(). This should: Create an array of 6 int values [0, 0, 0, 0 ,0 , 0] Create a loop that will iterate at least 25 times. In the loop body: Roll the die. (using the dice_roll method in #1 above where the seed value sent is the index value of the loop for the 25 time 0-24) Based on the result of the roll, add up the corresponding cell of your array. The value of each array element should be the number of times that roll is made. After the loop finishes, print the results of the simulation. For example, the final array should be: [2, 8, 4, 4, 4, 3] you would output: 1 was rolled 2 times. 2 was rolled 8 times. ... see the FINAL OUTPUT below for how this should be formatted with double return statements at the end and return this output as a return string for the function.","title":"Part 2: Randomly accessing an array"},{"location":"cs149spring2024/labs/11_lab13-list-play/#part-3-working-with-multiple-arrays","text":"For this exercise, you will need two arrays of double values. Create a main section that sets up the two arrays like this: print(\"Before\") a1 = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0] a2 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] print(store_array_values(a1, a2)) change_array(a1, a2) print(\"After\") print(store_array_values(a1, a2)) Write the first function store_array_values(a1, a2) which will take the two arrays as input then return an return string of the values of the arrays. See the FINAL OUTPUT section below for how this is formatted. Write a second function change_array(a1, a2): This will change the values of the array as follows: Write a loop to change all values of a2 to those in a1. Finally, change the index 0 element of the first array(a1) to 99.0 and the index 5 element of the second array(a2) to 99.0. Check that the contents of the two arrays are indeed different after calling your change_array function. If not, make the appropriate corrections. Check all output with the lab14.exp expected output below.","title":"Part 3: Working with multiple arrays"},{"location":"cs149spring2024/labs/11_lab13-list-play/#final-output","text":"Here is the expected output file for lab13.exp Submit your final list_play file to https://gradescope.com.","title":"FINAL OUTPUT"},{"location":"cs149spring2024/labs/12_lab14-files/","text":"Lab14 - Files Introduction Pygame is a Python library that makes it possible to program simple 2-D games and animations. In this lab we will modify a simple bouncing ball simulator to add file load and save functionality. On your home computer you may need to install the module pygame via: python3 -m pip install pygame A second goal for today\u2019s lab is to practice working on the Linux command line. DON\u2019T START THONNY. For today, we\u2019ll be using nano as our text editor and we will run our code from the terminal. Bounce Download the following file and open it in nano. (Pay close attention to where the file is being saved!) bounce.py When you start nano, make sure to use the -ET4 flag. This tells nano to insert four spaces when you hit the tab key. Otherwise it will introduce tab characters into your Python code, which is bad. For example: spragunr@l25002:~/bounce_lab$ nano -ET4 bounce.py Take a few minutes to look over the existing code to get a feel for how it works. Assuming you are in the same folder, you should be able to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py Try editing the file to change the initial position, size or color of the bouncing ball. File Loading The next step is to add functionality to bounce.py enabling it to read a file containing ball descriptions. The name of the file will be provided as a command line argument. For, example, the file three_balls.dat contains the following three lines: 100 20 5 100 0 0 200 20 10 0 150 0 400 20 15 0 0 200 Each line describes a single ball with the format: x_position y_position radius red green blue You\u2019ll need to complete the load_game method in the BounceGame class. That method should then be called from the existing main function. In order to read the command line argument you\u2019ll need to import the sys module from the Python standard libraries: import sys After the necessary modifications, it should be possible to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat If everything is working correctly, three balls should appear on the screen with the appropriate sizes and colors. Here is another data file that you can try: many_balls.dat . ============ File Save (If Time) We also want to be able to save the state of the game so that when the program is restarted, all of the balls will appear at the same locations as they were when the game was saved. Add a save_gamemethod to BounceGame and modify the run method so that the save method will be called when the user presses s. By default, the file created should be named saved.dat. Once this is working, modify the program so that saved.dat is opened by default if no command line argument is provided. In other words, this would open three_balls.dat: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat This would open saved.dat: spragunr@l25002:~/bounce_lab$ python bounce.py There is nothing to submit for this lab.","title":"Lab14 - Files"},{"location":"cs149spring2024/labs/12_lab14-files/#lab14-files","text":"","title":"Lab14 - Files"},{"location":"cs149spring2024/labs/12_lab14-files/#introduction","text":"Pygame is a Python library that makes it possible to program simple 2-D games and animations. In this lab we will modify a simple bouncing ball simulator to add file load and save functionality. On your home computer you may need to install the module pygame via: python3 -m pip install pygame A second goal for today\u2019s lab is to practice working on the Linux command line. DON\u2019T START THONNY. For today, we\u2019ll be using nano as our text editor and we will run our code from the terminal.","title":"Introduction"},{"location":"cs149spring2024/labs/12_lab14-files/#bounce","text":"Download the following file and open it in nano. (Pay close attention to where the file is being saved!) bounce.py When you start nano, make sure to use the -ET4 flag. This tells nano to insert four spaces when you hit the tab key. Otherwise it will introduce tab characters into your Python code, which is bad. For example: spragunr@l25002:~/bounce_lab$ nano -ET4 bounce.py Take a few minutes to look over the existing code to get a feel for how it works. Assuming you are in the same folder, you should be able to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py Try editing the file to change the initial position, size or color of the bouncing ball.","title":"Bounce"},{"location":"cs149spring2024/labs/12_lab14-files/#file-loading","text":"The next step is to add functionality to bounce.py enabling it to read a file containing ball descriptions. The name of the file will be provided as a command line argument. For, example, the file three_balls.dat contains the following three lines: 100 20 5 100 0 0 200 20 10 0 150 0 400 20 15 0 0 200 Each line describes a single ball with the format: x_position y_position radius red green blue You\u2019ll need to complete the load_game method in the BounceGame class. That method should then be called from the existing main function. In order to read the command line argument you\u2019ll need to import the sys module from the Python standard libraries: import sys After the necessary modifications, it should be possible to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat If everything is working correctly, three balls should appear on the screen with the appropriate sizes and colors. Here is another data file that you can try: many_balls.dat . ============","title":"File Loading"},{"location":"cs149spring2024/labs/12_lab14-files/#file-save-if-time","text":"We also want to be able to save the state of the game so that when the program is restarted, all of the balls will appear at the same locations as they were when the game was saved. Add a save_gamemethod to BounceGame and modify the run method so that the save method will be called when the user presses s. By default, the file created should be named saved.dat. Once this is working, modify the program so that saved.dat is opened by default if no command line argument is provided. In other words, this would open three_balls.dat: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat This would open saved.dat: spragunr@l25002:~/bounce_lab$ python bounce.py There is nothing to submit for this lab.","title":"File Save (If Time)"},{"location":"cs149spring2024/labs/13_lab15-recursive-lists/","text":"Lab 15 - Recursion Lab Your goal is to write a function that can add all integers in a list. Sounds simple enough, right? Here's the catch: the list can contain integers, or other lists. Those lists can contain integers or other lists, and so on and so on. Hint: Start by writing code to sum up integers in a regular list (using a loop). Then, think about what you need to do differently if an item is a list vs. an int. def add_all(nums): \"\"\"Add all the integers in the given list, recursively. The list may contain ints and/or other lists containing ints/lists. Args: nums (list): A list of ints and/or other lists containing ints/lists. Returns: (int): The sum of all the integers in the given list. \"\"\" More Practice - code the following recursive algorithms: bunny_ears We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication). Example Test calls: bunny_ears(0) \u2192 0 bunny_ears(1) \u2192 2 bunny_ears(2) \u2192 4 triangle We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows. Example Test calls: triangle(0) \u2192 0 triangle(1) \u2192 1 triangle(2) \u2192 3 sum_digits Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). Example Test calls: sum_digits(126) \u2192 9 sum_digits(49) \u2192 13 sum_digits(12) \u2192 3 count8 Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, except that an 8 with another 8 immediately to its left counts double, so 8818 yields 4. Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). Example Test calls: count8(8) \u2192 1 count8(818) \u2192 2 count8(8818) \u2192 4","title":"Lab 15 - Recursion Lab"},{"location":"cs149spring2024/labs/13_lab15-recursive-lists/#lab-15-recursion-lab","text":"Your goal is to write a function that can add all integers in a list. Sounds simple enough, right? Here's the catch: the list can contain integers, or other lists. Those lists can contain integers or other lists, and so on and so on. Hint: Start by writing code to sum up integers in a regular list (using a loop). Then, think about what you need to do differently if an item is a list vs. an int. def add_all(nums): \"\"\"Add all the integers in the given list, recursively. The list may contain ints and/or other lists containing ints/lists. Args: nums (list): A list of ints and/or other lists containing ints/lists. Returns: (int): The sum of all the integers in the given list. \"\"\" More Practice - code the following recursive algorithms:","title":"Lab 15 - Recursion Lab"},{"location":"cs149spring2024/labs/13_lab15-recursive-lists/#bunny_ears","text":"We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication). Example Test calls: bunny_ears(0) \u2192 0 bunny_ears(1) \u2192 2 bunny_ears(2) \u2192 4","title":"bunny_ears"},{"location":"cs149spring2024/labs/13_lab15-recursive-lists/#triangle","text":"We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows. Example Test calls: triangle(0) \u2192 0 triangle(1) \u2192 1 triangle(2) \u2192 3","title":"triangle"},{"location":"cs149spring2024/labs/13_lab15-recursive-lists/#sum_digits","text":"Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). Example Test calls: sum_digits(126) \u2192 9 sum_digits(49) \u2192 13 sum_digits(12) \u2192 3","title":"sum_digits"},{"location":"cs149spring2024/labs/13_lab15-recursive-lists/#count8","text":"Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, except that an 8 with another 8 immediately to its left counts double, so 8818 yields 4. Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). Example Test calls: count8(8) \u2192 1 count8(818) \u2192 2 count8(8818) \u2192 4","title":"count8"},{"location":"cs149spring2024/labs/14_lab16-stars/","text":"Lab16 - Nested Loops (Stars) Background In the good old days, we didn't have fancy computer graphics. So we had to rely on ASCII artLinks to an external site. and the user's imagination. Today's lab will take you back in time! Your task is to draw various pictures of stars ( '*' ) that require the creative use of iteration and decisions. Objectives Write nested for loops and decisions. Solve counting problems with loops. Instructions Download stars.py open it in Thonny. Write your name and today's date in the docstring comment. Run the program. What shape does this pattern produce? Notice the relationship between the row (outer loop) and the number of stars that are printed. Notice the relationship between the col (inner loop) and the place where we move to a new line. Add code to your program to create functions for Patterns A, B, and C as shown below. The functions should include a parameter max_rows that will give the number of rows to output. Pattern A ********** ********* ******** ******* ****** ***** **** *** ** * The leftmost stars are in the leftmost output column. Test your code with an odd number of stars and an even number of stars. HINT : While developing the code, replace each space with another character that is visible. Pattern B * ** *** **** ***** ****** ******* ******** ********* ********** The leftmost star of the last row is in the first position of the output column. HINT : You used star_count in the original example and Pattern A. You should think about using a blank_count variable as well. Pattern C ********** ********* ******** ******* ****** ***** **** *** ** * The top row, leftmost star is in the first position of the output. HINT : It should be the same as Pattern B, except for the way you calculate blank_count and star_count. Generalization Finish the functions patterns A, B, and C. If you finish early, work on the following pattern D. Pattern D (challenge) * *** ***** ******* ********* ******* ***** *** * For an odd number of rows, you would only have one middle line. The middle row leftmost star is in the first position of the output. HINT : Consider writing two loops: one for the top half, and another for the bottom half. You may also want to increment and decrement star_count and blank_count, rather than calculate them directly based on the row number.","title":"Lab16 - Nested Loops (Stars)"},{"location":"cs149spring2024/labs/14_lab16-stars/#lab16-nested-loops-stars","text":"","title":"Lab16 - Nested Loops (Stars)"},{"location":"cs149spring2024/labs/14_lab16-stars/#background","text":"In the good old days, we didn't have fancy computer graphics. So we had to rely on ASCII artLinks to an external site. and the user's imagination. Today's lab will take you back in time! Your task is to draw various pictures of stars ( '*' ) that require the creative use of iteration and decisions.","title":"Background"},{"location":"cs149spring2024/labs/14_lab16-stars/#objectives","text":"Write nested for loops and decisions. Solve counting problems with loops.","title":"Objectives"},{"location":"cs149spring2024/labs/14_lab16-stars/#instructions","text":"Download stars.py open it in Thonny. Write your name and today's date in the docstring comment. Run the program. What shape does this pattern produce? Notice the relationship between the row (outer loop) and the number of stars that are printed. Notice the relationship between the col (inner loop) and the place where we move to a new line. Add code to your program to create functions for Patterns A, B, and C as shown below. The functions should include a parameter max_rows that will give the number of rows to output.","title":"Instructions"},{"location":"cs149spring2024/labs/14_lab16-stars/#pattern-a","text":"********** ********* ******** ******* ****** ***** **** *** ** * The leftmost stars are in the leftmost output column. Test your code with an odd number of stars and an even number of stars. HINT : While developing the code, replace each space with another character that is visible.","title":"Pattern A"},{"location":"cs149spring2024/labs/14_lab16-stars/#pattern-b","text":"* ** *** **** ***** ****** ******* ******** ********* ********** The leftmost star of the last row is in the first position of the output column. HINT : You used star_count in the original example and Pattern A. You should think about using a blank_count variable as well.","title":"Pattern B"},{"location":"cs149spring2024/labs/14_lab16-stars/#pattern-c","text":"********** ********* ******** ******* ****** ***** **** *** ** * The top row, leftmost star is in the first position of the output. HINT : It should be the same as Pattern B, except for the way you calculate blank_count and star_count.","title":"Pattern C"},{"location":"cs149spring2024/labs/14_lab16-stars/#generalization","text":"Finish the functions patterns A, B, and C. If you finish early, work on the following pattern D.","title":"Generalization"},{"location":"cs149spring2024/labs/14_lab16-stars/#pattern-d-challenge","text":"* *** ***** ******* ********* ******* ***** *** * For an odd number of rows, you would only have one middle line. The middle row leftmost star is in the first position of the output. HINT : Consider writing two loops: one for the top half, and another for the bottom half. You may also want to increment and decrement star_count and blank_count, rather than calculate them directly based on the row number.","title":"Pattern D (challenge)"},{"location":"cs149spring2024/labs/15_lab17-exam-review/","text":"Lab17 - Practice for the final exam The final exam consists of two parts (written and coding). Each part will be worth 50 points. Instructions Here is some practice for the final exam. Answer keys will not be provided(you should be able to plug these into Thonny to find answers mostly). You may ask for clarifications or answers for specific questions though. A written exam based on one used in 2022, this is not exact content that will be on the final exam, but rather some concepts to study. This is a practice problem only for timing purposes and may not reflect content coverage on the actual final. The final will likely have more coding questions than just these two. Submit via Gradescope for the coding portion. Let me know if you have any questions, and good luck! Written Exam Practice 1. Circle and label an example of each of the following in the code sample below. A. local variable B. global variable C. method call D. dictionary E. list F. relational operator G. assignment operator H. Boolean operator I. method definition J. parameter K. argument import sys MIN_CHARGE = 10.0 global total_fees def add_student(students, name, sid): # students is a list of dictionaries of student new_stu = { \"name\": name, \"id\": sid, \"balance\": 0 } students.append(new_stu) def apply_charge(students, sid, amount): global total_fees charge = amount charged = False if charge <= MIN_CHARGE: charge = MIN_CHARGE for student in students: if student[\"id\"] == sid: student[\"balance\"] += charge total_fees += charge charged = True return charged if __name__ == \"__main__\": roster = [] total_fees = 0.0 john = add_student(roster, \"John\", 1000) alice = add_student(roster, \"Alice\", 1001) apply_charge(roster, 1001, 0) print(total_fees) 2. Tracing Code Determine what will be printed by each of the following code snippets given the code from the previous page. Each snippet should be considered independently: do not assume that they are executed sequentially, or that the code in the name == \u201c main \u201d block has been executed. If a snippet will result in an error, write ERROR. A. stu_a = [] add_student(stu_a, \"Greta\", 1000) apply_charge(stu_a, 1000, 5.0) print(total_fees) B. stu_b = [] add_student(stu_b, \"Greta\", 1000) add_student(stu_b, \"Harry\", 1001) apply_charge(stu_b, 1000, 12.0) apply_charge(stu_b, 1001, 6.0) print(f\"{stu_b[0].get('balance')}\") print(f\"{stu_b[1].get('balance')}\") print(total_fees) C. stu_c = [] add_student(stu_c, \"Greta\", 1000) add_student(stu_c, \"Harry\", 1001) add_student(stu_c, \"Harry\", 1002) apply_charge(stu_c, 1002, 12.0) apply_charge(stu_c, 1001, 6.0) print(f\"{stu_c[0].get('balance')}\") print(f\"{stu_c[1].get('balance')}\") print(f\"{stu_c[2].get('balance')}\") D. stu_d = [] add_student(stu_d, \"Greta\", 1000) add_student(stu_d, \"Greta\", 1000) apply_charge(stu_d, 1000, 100.0) print(stu_d[0] is stu_d[1]) print(stu_d[0] == stu_d[1]) E. stu_e = [] add_student(stu_e, \"Greta\", 1000) print(stu_e[0] == \"Greta\") 3. Nested For Loops Determine what will be printed by each of the code snippets below. a. letters = [[\"A\", \"B\", \"C\"], [\"X\", \"Y\"]] result = \"\" for var1 in letters: for var2 in var1: result += var2 result += \"\\n\" print(result) b. var1 = \"cat bat\" var2 = var1.split() for first in var2: print(first) for second in first: print(second) c. result = \"\" for i in range(2, 5): for j in range(i): result += \"*\" result += \"\\n\" print(result) 4. Finding Errors For each set of code snippets below, only one of the options will execute without error. Circle the block that will execute successfully. a. my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } for i in range(0, len(my_dictionary)): print(my_dictionary[i]) or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } for i in my_dictionary: print(f\"{i} -> { my_dictionary[i] }\") b. my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } while i in my_dictionary: print(f\"{i} -> { my_dictionary[i] }\") i += 1 or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } for i in my_dictionary: print(i + \" -> \" + str(my_dictionary[i])) c. my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } if len(my_dictionary) > 7: print(\"this is a large dictionary.\") else: print(\"this is a normal-sized dictionary.\") elif len(my_dictionary) < 3: print(\"this is a small dictionary.\") or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } if len(my_dictionary) > 7: print(\"this is a large dictionary.\") elif 3 <= len(my_dictionary) <= 7: print(\"this is a normal-sized dictionary.\") else: print(\"this is a small dictionary.\") or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } if len(my_dictionary) > 7: print(\"this is a large dictionary.\") elif 3 < len(my_dictionary) < 7: print(\"this is a normal-sized dictionary.\") else: print(\"this is a small dictionary.\") 5. File I/O def add_numbers_in_file(file_name): \"\"\"Return the sum of all numbers that appear in the provided file. Each line in the file will contain an arbitrary sequence of numbers separated by white-space. This function will read the file and return the sum of all numbers. For example, if the file contains the following four lines: 12.0 2.0 6.0 10.0 2.5 2.5 Then the return value will be 35.0 Args: file_name (str): The name of a file. E.g. \"numbers.txt\" Returns: float: The sum of all numbers stored in the indicated file. \"\"\" Coding Problem: \"\"\"scheduler - a course schedule planner. @author: YOUR NAME @version: DUE DATE \"\"\" def plan_workload(schedule): \"\"\"Plan course workload for semester given the list of courses. The schedule is a list of courses(which is a dict containing 3 elements: a) string prefix(ie. CS for Computer Science b) int number like 149 for CS149 c int credits = # of credit hours for the course Args: schedule(list): a list of courses as described above Returns: (int): The workload for a set of courses is measured in points. Lower division courses (with numbers below 300) get two points, upper division courses (in the 300-499 range) get three points, and graduate courses (500 and above) get four points. CS and MATH courses get an extra point. 3 credit or lower courses get 1 point while 4 credit courses get 2 and 5 credit ones receive 3 points. If the schedule has zero courses or equals None, then plan_workload should return -1 \"\"\" pass def find_hardest(schedule): \"\"\"Find hardest course for a scheduled list of courses. The schedule is a list of courses(which is a dict containing 3 elements: a) string prefix(ie. CS for Computer Science b)int number like 149 for CS149 c) int credits = # of credit hours for the course Args: schedule(list): a list of courses as described above Returns: (str): Name of last in the list most difficult course(ie most points, CS149 note no space between prefix and number). If the schedule has zero courses or equals None, then find_hardest should return \"Invalid\"). \"\"\" pass if __name__ == \"__main__\": my_sched = [] course1 = { \"prefix\": \"CS\", \"number\": 169, \"credits\": 3 } course2 = { \"prefix\": \"CS\", \"number\": 240, \"credits\": 3 } course3 = { \"prefix\": \"HIST\", \"number\": 101, \"credits\": 3 } my_sched.append(course1) my_sched.append(course2) my_sched.append(course3)","title":"Lab17 - Practice for the final exam"},{"location":"cs149spring2024/labs/15_lab17-exam-review/#lab17-practice-for-the-final-exam","text":"The final exam consists of two parts (written and coding). Each part will be worth 50 points. Instructions Here is some practice for the final exam. Answer keys will not be provided(you should be able to plug these into Thonny to find answers mostly). You may ask for clarifications or answers for specific questions though. A written exam based on one used in 2022, this is not exact content that will be on the final exam, but rather some concepts to study. This is a practice problem only for timing purposes and may not reflect content coverage on the actual final. The final will likely have more coding questions than just these two. Submit via Gradescope for the coding portion. Let me know if you have any questions, and good luck!","title":"Lab17 - Practice for the final exam"},{"location":"cs149spring2024/labs/15_lab17-exam-review/#written-exam-practice","text":"","title":"Written Exam Practice"},{"location":"cs149spring2024/labs/15_lab17-exam-review/#1-circle-and-label-an-example-of-each-of-the-following-in-the-code-sample-below","text":"A. local variable B. global variable C. method call D. dictionary E. list F. relational operator G. assignment operator H. Boolean operator I. method definition J. parameter K. argument import sys MIN_CHARGE = 10.0 global total_fees def add_student(students, name, sid): # students is a list of dictionaries of student new_stu = { \"name\": name, \"id\": sid, \"balance\": 0 } students.append(new_stu) def apply_charge(students, sid, amount): global total_fees charge = amount charged = False if charge <= MIN_CHARGE: charge = MIN_CHARGE for student in students: if student[\"id\"] == sid: student[\"balance\"] += charge total_fees += charge charged = True return charged if __name__ == \"__main__\": roster = [] total_fees = 0.0 john = add_student(roster, \"John\", 1000) alice = add_student(roster, \"Alice\", 1001) apply_charge(roster, 1001, 0) print(total_fees)","title":"1. Circle and label an example of each of the following in the code sample below."},{"location":"cs149spring2024/labs/15_lab17-exam-review/#2-tracing-code","text":"Determine what will be printed by each of the following code snippets given the code from the previous page. Each snippet should be considered independently: do not assume that they are executed sequentially, or that the code in the name == \u201c main \u201d block has been executed. If a snippet will result in an error, write ERROR.","title":"2. Tracing Code"},{"location":"cs149spring2024/labs/15_lab17-exam-review/#a","text":"stu_a = [] add_student(stu_a, \"Greta\", 1000) apply_charge(stu_a, 1000, 5.0) print(total_fees)","title":"A."},{"location":"cs149spring2024/labs/15_lab17-exam-review/#b","text":"stu_b = [] add_student(stu_b, \"Greta\", 1000) add_student(stu_b, \"Harry\", 1001) apply_charge(stu_b, 1000, 12.0) apply_charge(stu_b, 1001, 6.0) print(f\"{stu_b[0].get('balance')}\") print(f\"{stu_b[1].get('balance')}\") print(total_fees)","title":"B."},{"location":"cs149spring2024/labs/15_lab17-exam-review/#c","text":"stu_c = [] add_student(stu_c, \"Greta\", 1000) add_student(stu_c, \"Harry\", 1001) add_student(stu_c, \"Harry\", 1002) apply_charge(stu_c, 1002, 12.0) apply_charge(stu_c, 1001, 6.0) print(f\"{stu_c[0].get('balance')}\") print(f\"{stu_c[1].get('balance')}\") print(f\"{stu_c[2].get('balance')}\")","title":"C."},{"location":"cs149spring2024/labs/15_lab17-exam-review/#d","text":"stu_d = [] add_student(stu_d, \"Greta\", 1000) add_student(stu_d, \"Greta\", 1000) apply_charge(stu_d, 1000, 100.0) print(stu_d[0] is stu_d[1]) print(stu_d[0] == stu_d[1])","title":"D."},{"location":"cs149spring2024/labs/15_lab17-exam-review/#e","text":"stu_e = [] add_student(stu_e, \"Greta\", 1000) print(stu_e[0] == \"Greta\")","title":"E."},{"location":"cs149spring2024/labs/15_lab17-exam-review/#3-nested-for-loops","text":"Determine what will be printed by each of the code snippets below. a. letters = [[\"A\", \"B\", \"C\"], [\"X\", \"Y\"]] result = \"\" for var1 in letters: for var2 in var1: result += var2 result += \"\\n\" print(result) b. var1 = \"cat bat\" var2 = var1.split() for first in var2: print(first) for second in first: print(second) c. result = \"\" for i in range(2, 5): for j in range(i): result += \"*\" result += \"\\n\" print(result)","title":"3. Nested For Loops"},{"location":"cs149spring2024/labs/15_lab17-exam-review/#4-finding-errors","text":"For each set of code snippets below, only one of the options will execute without error. Circle the block that will execute successfully. a. my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } for i in range(0, len(my_dictionary)): print(my_dictionary[i]) or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } for i in my_dictionary: print(f\"{i} -> { my_dictionary[i] }\") b. my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } while i in my_dictionary: print(f\"{i} -> { my_dictionary[i] }\") i += 1 or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } for i in my_dictionary: print(i + \" -> \" + str(my_dictionary[i])) c. my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } if len(my_dictionary) > 7: print(\"this is a large dictionary.\") else: print(\"this is a normal-sized dictionary.\") elif len(my_dictionary) < 3: print(\"this is a small dictionary.\") or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } if len(my_dictionary) > 7: print(\"this is a large dictionary.\") elif 3 <= len(my_dictionary) <= 7: print(\"this is a normal-sized dictionary.\") else: print(\"this is a small dictionary.\") or my_dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 } if len(my_dictionary) > 7: print(\"this is a large dictionary.\") elif 3 < len(my_dictionary) < 7: print(\"this is a normal-sized dictionary.\") else: print(\"this is a small dictionary.\")","title":"4. Finding Errors"},{"location":"cs149spring2024/labs/15_lab17-exam-review/#5-file-io","text":"def add_numbers_in_file(file_name): \"\"\"Return the sum of all numbers that appear in the provided file. Each line in the file will contain an arbitrary sequence of numbers separated by white-space. This function will read the file and return the sum of all numbers. For example, if the file contains the following four lines: 12.0 2.0 6.0 10.0 2.5 2.5 Then the return value will be 35.0 Args: file_name (str): The name of a file. E.g. \"numbers.txt\" Returns: float: The sum of all numbers stored in the indicated file. \"\"\" Coding Problem: \"\"\"scheduler - a course schedule planner. @author: YOUR NAME @version: DUE DATE \"\"\" def plan_workload(schedule): \"\"\"Plan course workload for semester given the list of courses. The schedule is a list of courses(which is a dict containing 3 elements: a) string prefix(ie. CS for Computer Science b) int number like 149 for CS149 c int credits = # of credit hours for the course Args: schedule(list): a list of courses as described above Returns: (int): The workload for a set of courses is measured in points. Lower division courses (with numbers below 300) get two points, upper division courses (in the 300-499 range) get three points, and graduate courses (500 and above) get four points. CS and MATH courses get an extra point. 3 credit or lower courses get 1 point while 4 credit courses get 2 and 5 credit ones receive 3 points. If the schedule has zero courses or equals None, then plan_workload should return -1 \"\"\" pass def find_hardest(schedule): \"\"\"Find hardest course for a scheduled list of courses. The schedule is a list of courses(which is a dict containing 3 elements: a) string prefix(ie. CS for Computer Science b)int number like 149 for CS149 c) int credits = # of credit hours for the course Args: schedule(list): a list of courses as described above Returns: (str): Name of last in the list most difficult course(ie most points, CS149 note no space between prefix and number). If the schedule has zero courses or equals None, then find_hardest should return \"Invalid\"). \"\"\" pass if __name__ == \"__main__\": my_sched = [] course1 = { \"prefix\": \"CS\", \"number\": 169, \"credits\": 3 } course2 = { \"prefix\": \"CS\", \"number\": 240, \"credits\": 3 } course3 = { \"prefix\": \"HIST\", \"number\": 101, \"credits\": 3 } my_sched.append(course1) my_sched.append(course2) my_sched.append(course3)","title":"5. File I/O"},{"location":"cs149spring2024/labs/1_lab2-thonny/","text":"Lab02: Python Comand Line and Thonny Introduction The goal for this lab is to gain experience editing, compiling and executing Python programs in the terminal and through the Thonny IDE. You may work on this lab individually or in a group of no more than three people. Executing Python in the Terminal Each of the steps below should be completed entirely inside the terminal : no GUI applications allowed. Refer to the Unix Tutorial for Beginners if you need to learn more about Unix commands. Create a cs149 folder on your desktop mkdir cs149 Move into the cs149 directory: cd cs149 Create a folder inside your home directory named lab02 . mkdir lab02 Move into the lab02 directory: cd lab02 Copy the file welcome.py by doing a Right-Click Save-As and saving it to your lab02 folder. OR here is the code: print (\"Welcome to CS149!\") print(\"It's fun.\") cut and paste this into a file called welcome.py and save it in the lab02 folder. 6. Run welcome.py: $ python3 welcome.py Congratulations! You've successfully executed your first Python program. Editing Files in the Terminal Normally, we will be using an Integrated Development Environment (IDE) to edit and compile Python programs. However, it can sometimes be convenient to edit a file directly in the terminal. There are many terminal-based editors. Today we'll try nano because it is easy to use for beginners. Open welcome.py using nano : $ nano welcome.py You should see something like the following: The two lines of text at the bottom show the set of actions available in the editor. The \"^\" symbol indicates the \"Ctrl\" key. For example, pressing Ctrl-O will \"WriteOut\" (save) any changes you have made to the file. Edit the file so that the welcome message says \"It's REALLY fun.\" instead of \"It's fun.\" . Save your changes and exit. Try executing your program again: $ python3 welcome.py You should see the following output Welcome to CS149! It's REALLY fun. Thonny IDE Objectives Use an IDE (Integrated Development Environment). Edit, save, compile, and run a simple Python program. Recognize and correct syntax errors in a Python program. Key Terms source file the Python program as written by the programmer syntax error mistake in the source code that prevents compilation logic error mistake in the program that causes incorrect behavior execute the process of running a program on a computer Part 1: Thonny Editor Thonny is a text editor designed to simplify the process of editing, debugging and executing Python programs. Open Thonny and click \"File \u2013> Open\" from the menu and select your welcome.py file from above. Press the Green play button on the toolbar to execute the Python file(this is the same thing as running the >>python welcome.py in the terminal. >>> %Run welcome.py Welcome to CS149! It's REALLY fun. Edit the file in Thonny to print another line that prints I have edited a file in Thonny. Save your results by pressing the Floppy disk icon then run the program again by pressing the Green play button. You have just run and edited a program using Thonny. Submission for Lab2 Via https://www.gradescope.com submit the Word of the Day in Canvas and your welcome.py file to Gradescope. Acknowledgments This activity is based on a lab developed by Nathan Sprague based on a lab originally developed by Chris Mayfield.","title":"Lab02: Python Comand Line and Thonny"},{"location":"cs149spring2024/labs/1_lab2-thonny/#lab02-python-comand-line-and-thonny","text":"","title":"Lab02: Python Comand Line and Thonny"},{"location":"cs149spring2024/labs/1_lab2-thonny/#introduction","text":"The goal for this lab is to gain experience editing, compiling and executing Python programs in the terminal and through the Thonny IDE. You may work on this lab individually or in a group of no more than three people.","title":"Introduction"},{"location":"cs149spring2024/labs/1_lab2-thonny/#executing-python-in-the-terminal","text":"Each of the steps below should be completed entirely inside the terminal : no GUI applications allowed. Refer to the Unix Tutorial for Beginners if you need to learn more about Unix commands. Create a cs149 folder on your desktop mkdir cs149 Move into the cs149 directory: cd cs149 Create a folder inside your home directory named lab02 . mkdir lab02 Move into the lab02 directory: cd lab02 Copy the file welcome.py by doing a Right-Click Save-As and saving it to your lab02 folder. OR here is the code: print (\"Welcome to CS149!\") print(\"It's fun.\") cut and paste this into a file called welcome.py and save it in the lab02 folder. 6. Run welcome.py: $ python3 welcome.py Congratulations! You've successfully executed your first Python program.","title":"Executing Python in the Terminal"},{"location":"cs149spring2024/labs/1_lab2-thonny/#editing-files-in-the-terminal","text":"Normally, we will be using an Integrated Development Environment (IDE) to edit and compile Python programs. However, it can sometimes be convenient to edit a file directly in the terminal. There are many terminal-based editors. Today we'll try nano because it is easy to use for beginners. Open welcome.py using nano : $ nano welcome.py You should see something like the following: The two lines of text at the bottom show the set of actions available in the editor. The \"^\" symbol indicates the \"Ctrl\" key. For example, pressing Ctrl-O will \"WriteOut\" (save) any changes you have made to the file. Edit the file so that the welcome message says \"It's REALLY fun.\" instead of \"It's fun.\" . Save your changes and exit. Try executing your program again: $ python3 welcome.py You should see the following output Welcome to CS149! It's REALLY fun.","title":"Editing Files in the Terminal"},{"location":"cs149spring2024/labs/1_lab2-thonny/#thonny-ide","text":"","title":"Thonny IDE"},{"location":"cs149spring2024/labs/1_lab2-thonny/#objectives","text":"Use an IDE (Integrated Development Environment). Edit, save, compile, and run a simple Python program. Recognize and correct syntax errors in a Python program.","title":"Objectives"},{"location":"cs149spring2024/labs/1_lab2-thonny/#key-terms","text":"source file the Python program as written by the programmer syntax error mistake in the source code that prevents compilation logic error mistake in the program that causes incorrect behavior execute the process of running a program on a computer","title":"Key Terms"},{"location":"cs149spring2024/labs/1_lab2-thonny/#part-1-thonny-editor","text":"Thonny is a text editor designed to simplify the process of editing, debugging and executing Python programs. Open Thonny and click \"File \u2013> Open\" from the menu and select your welcome.py file from above. Press the Green play button on the toolbar to execute the Python file(this is the same thing as running the >>python welcome.py in the terminal. >>> %Run welcome.py Welcome to CS149! It's REALLY fun. Edit the file in Thonny to print another line that prints I have edited a file in Thonny. Save your results by pressing the Floppy disk icon then run the program again by pressing the Green play button. You have just run and edited a program using Thonny.","title":"Part 1: Thonny Editor"},{"location":"cs149spring2024/labs/1_lab2-thonny/#submission-for-lab2","text":"Via https://www.gradescope.com submit the Word of the Day in Canvas and your welcome.py file to Gradescope. Acknowledgments This activity is based on a lab developed by Nathan Sprague based on a lab originally developed by Chris Mayfield.","title":"Submission for Lab2"},{"location":"cs149spring2024/labs/20_lab15-webpage-maker/","text":"Lab15 - Web Page Maker Introduction HTML is a markup language used to create web pages. The goal for today\u2019s lab is to practice working with loading info from a file then writing out an html page. A basic HTML page will start with a doctype, then html and body tags. Inside the body tag is the content of the webpage. Heading tags are used for large headings and paragraph tags are used for page content. The strong tag is used to indicate bolded text. Here is a sample HTML page: Page Title This is a Heading This is a paragraph. File Loading / Reading in the data Download the following file: tags.txt This file will contain a tag then a comma to separate the tag from the content inside the tag. Your first step is to load in the content The next step is to add functionality to bounce.py enabling it to read a file containing ball descriptions. The name of the file will be provided as a command line argument. For, example, the file three_balls.dat contains the following three lines: File contents: h1, This is a Heading p, This is a paragraph strong, This is a bolded sentence. link, http://wwww.jmu.edu/ x_position y_position radius red green blue You\u2019ll need to complete the load_game method in the BounceGame class. That method should then be called from the existing main function. In order to read the command line argument you\u2019ll need to import the sys module from the Python standard libraries: import sys After the necessary modifications, it should be possible to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat If everything is working correctly, three balls should appear on the screen with the appropriate sizes and colors. Here is another data file that you can try: many_balls.dat . ============ File Save (If Time) We also want to be able to save the state of the game so that when the program is restarted, all of the balls will appear at the same locations as they were when the game was saved. Add a save_gamemethod to BounceGame and modify the run method so that the save method will be called when the user presses s. By default, the file created should be named saved.dat. Once this is working, modify the program so that saved.dat is opened by default if no command line argument is provided. In other words, this would open three_balls.dat: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat This would open saved.dat: spragunr@l25002:~/bounce_lab$ python bounce.py There is nothing to submit for this lab.","title":"Lab15 - Web Page Maker"},{"location":"cs149spring2024/labs/20_lab15-webpage-maker/#lab15-web-page-maker","text":"","title":"Lab15 - Web Page Maker"},{"location":"cs149spring2024/labs/20_lab15-webpage-maker/#introduction","text":"HTML is a markup language used to create web pages. The goal for today\u2019s lab is to practice working with loading info from a file then writing out an html page. A basic HTML page will start with a doctype, then html and body tags. Inside the body tag is the content of the webpage. Heading tags are used for large headings and paragraph tags are used for page content. The strong tag is used to indicate bolded text. Here is a sample HTML page: Page Title","title":"Introduction"},{"location":"cs149spring2024/labs/20_lab15-webpage-maker/#file-loading-reading-in-the-data","text":"Download the following file: tags.txt This file will contain a tag then a comma to separate the tag from the content inside the tag. Your first step is to load in the content The next step is to add functionality to bounce.py enabling it to read a file containing ball descriptions. The name of the file will be provided as a command line argument. For, example, the file three_balls.dat contains the following three lines: File contents: h1, This is a Heading p, This is a paragraph strong, This is a bolded sentence. link, http://wwww.jmu.edu/ x_position y_position radius red green blue You\u2019ll need to complete the load_game method in the BounceGame class. That method should then be called from the existing main function. In order to read the command line argument you\u2019ll need to import the sys module from the Python standard libraries: import sys After the necessary modifications, it should be possible to execute bounce.py as follows: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat If everything is working correctly, three balls should appear on the screen with the appropriate sizes and colors. Here is another data file that you can try: many_balls.dat . ============","title":"File Loading / Reading in the data"},{"location":"cs149spring2024/labs/20_lab15-webpage-maker/#file-save-if-time","text":"We also want to be able to save the state of the game so that when the program is restarted, all of the balls will appear at the same locations as they were when the game was saved. Add a save_gamemethod to BounceGame and modify the run method so that the save method will be called when the user presses s. By default, the file created should be named saved.dat. Once this is working, modify the program so that saved.dat is opened by default if no command line argument is provided. In other words, this would open three_balls.dat: spragunr@l25002:~/bounce_lab$ python bounce.py three_balls.dat This would open saved.dat: spragunr@l25002:~/bounce_lab$ python bounce.py There is nothing to submit for this lab.","title":"File Save (If Time)"},{"location":"cs149spring2024/labs/2_lab3-style/","text":"Lab03: Style guide and pep8 Source: https://xkcd.com/1513/ Background PEP8 - Python Style When writing in English, readability can be impacted by the way the text is laid out on the page. We use conventions, like indenting the first sentence of a paragraph, to make it easier to understand written text. Programming languages are the same. Programs are easier to read if we agree on a set of conventions for how the code should be formatted. PEP 8 is the official document that describes the standard formatting conventions for Python code. (Here is a prettier version: https://pep8.org/ .) You don\u2019t need to read and understand the full PEP 8 document now, but you may want to look it over to get a feel for the issues that it addresses. Instructions for installing Thonny and flake8 configuration Comments When writing your programs it is helpful for us if you include the assignment name, a description of the assignment, your name, the due date and an Honor Code statement to let us know where you got help from on the assignment. These should be done in a block at the top of your program that looks like this: \"\"\" Lab 03- Style lab - fixing styles and testing online grading tool submission. Author: Alvin Chao Version: 1-26-22 Honor Code: I got help on the output statements for the lab from TA John \"\"\" Part 1 Running flake8 Through Thonny When you submit homework assignments for CS 149 they will automatically be checked against the PEP 8 formatting requirements using a tool named flake8 . You will only receive full credit if you pass all of these automated style checks. You can install flake8 in Thonny by selecting Tools -> Manage Packages\u2026 and then finding and installing flake8 as well as pep8-naming . After installation, you should be able to check your file by typing the following into the Thonny shell: >>> !flake8 payroll.py The exclamation point tells the Python interpreter the command should not be interpreted as Python code. Note that the Gradescope autograder is configured to be slightly more lenient than the default settings for flake8 . We allow line lengths up to 100 and disable checks for some errors and warnings. If you want to run flake8 with exactly the same settings as Gradescope, you can copy the following file into the same directory as your python code: setup.cfg Part 2 Example Program If you haven't already, you should create a top-level CS149 folder to organize all your labs and other assignments for the semester. Then create a lab03 folder for today's lab. (If you logged in as student today, please log out and log back in with your own account.) Download: payroll.py >>> !flake8 payroll.py You should see the following errors: payroll.py:1:27: E231 missing whitespace after ',' payroll.py:5:43: E251 unexpected spaces around keyword / parameter equals payroll.py:6:2: N816 variable 'payRate' in global scope should not be mixedCase payroll.py:7:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:9: E225 missing whitespace around operator payroll.py:11:39: W292 no newline at end of file Fix all style errors by repeatedly running flake8 and submit to Gradescope when your file checks all style issues. Submission: At the end of class today, or by 11:00 PM tomorrow if you would like more time, submit a corrected version of payroll.py via Gradescope . Your code must pass flake8 style without any warnings AND meet all the requirements outlined below. (It must also compile and run correctly; don't change the program's behavior.) If you cannot get this working in Gradescope you may upload to Canvas, but points will be deducted. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the program. It's okay if your files are similar or identical, as long as both of your names are present at the top. A. Comments # An inline comment must contain only one # and a space after it. \"\"\" *Block comments should end with the closing statement on its own line. \"\"\" B. Names All names should be descriptive and readable. ( sub_total rather than s , grade rather than grd ) Multiple-word names should use underscores to separate words. ( sub_total not subTotal ) Variable and method names should begin with a lowercase letter, and: Variable names should be nouns or noun phrases. ( student_name or sub_total ) Function names should be verbs or verb phrases. ( print_line or add_column ) Class names should begin with a capital letter and use title or CapWords case. ( HelloWorld ) Constant names should be all caps with an underscore separator. ( PI or INTEREST_RATE ) C. Declarations CENTIMETERS\\_PER\\_INCH = 2.54 centimeters = inches \\* CENTIMETERS\\_PER\\_INCH // NOT inches \\* 2.54 All constants should be named and initialized at the top of the function in which they are used. All variables should also be declared at the top of the function, directly after any constant declaraions. D. Literals Numeric literals should be of the correct type for the context in which they are used. # integer expressions should use integer literals like a a = 2 # double expressions should use double literals like b b = 2.0 average = (x + y) / 2.0 # NOT 2, which is an integer E. Indentation Subsections of code should be indented consistently with four spaces per Python requirements. Always use four space characters, not tab characters, for indentation. Statements too long for one line should be indented on subsequent lines. F. Whitespace There should be a space after commas, and #'s. Use whitespace to separate logical segments of code. There should be a blank line after variable declarations. Lines should be kept to a short length (< 80 - 100 chars). You should be able to see the full line in your text editor. Binary operators should be separated from their operands by a single space. ( sum = my_grade + your_grade ) Unary operators should not be separated by a space. ( my_grade++ )","title":"2 lab3 style"},{"location":"cs149spring2024/labs/2_lab3-style/#lab03-style-guide-and-pep8","text":"Source: https://xkcd.com/1513/","title":"Lab03: Style guide and pep8"},{"location":"cs149spring2024/labs/2_lab3-style/#background","text":"","title":"Background"},{"location":"cs149spring2024/labs/2_lab3-style/#pep8-python-style","text":"When writing in English, readability can be impacted by the way the text is laid out on the page. We use conventions, like indenting the first sentence of a paragraph, to make it easier to understand written text. Programming languages are the same. Programs are easier to read if we agree on a set of conventions for how the code should be formatted. PEP 8 is the official document that describes the standard formatting conventions for Python code. (Here is a prettier version: https://pep8.org/ .) You don\u2019t need to read and understand the full PEP 8 document now, but you may want to look it over to get a feel for the issues that it addresses. Instructions for installing Thonny and flake8 configuration","title":"PEP8 - Python Style"},{"location":"cs149spring2024/labs/2_lab3-style/#comments","text":"When writing your programs it is helpful for us if you include the assignment name, a description of the assignment, your name, the due date and an Honor Code statement to let us know where you got help from on the assignment. These should be done in a block at the top of your program that looks like this: \"\"\" Lab 03- Style lab - fixing styles and testing online grading tool submission. Author: Alvin Chao Version: 1-26-22 Honor Code: I got help on the output statements for the lab from TA John \"\"\"","title":"Comments"},{"location":"cs149spring2024/labs/2_lab3-style/#part-1","text":"","title":"Part 1"},{"location":"cs149spring2024/labs/2_lab3-style/#running-flake8-through-thonny","text":"When you submit homework assignments for CS 149 they will automatically be checked against the PEP 8 formatting requirements using a tool named flake8 . You will only receive full credit if you pass all of these automated style checks. You can install flake8 in Thonny by selecting Tools -> Manage Packages\u2026 and then finding and installing flake8 as well as pep8-naming . After installation, you should be able to check your file by typing the following into the Thonny shell: >>> !flake8 payroll.py The exclamation point tells the Python interpreter the command should not be interpreted as Python code. Note that the Gradescope autograder is configured to be slightly more lenient than the default settings for flake8 . We allow line lengths up to 100 and disable checks for some errors and warnings. If you want to run flake8 with exactly the same settings as Gradescope, you can copy the following file into the same directory as your python code: setup.cfg","title":"Running flake8 Through Thonny"},{"location":"cs149spring2024/labs/2_lab3-style/#part-2","text":"","title":"Part 2"},{"location":"cs149spring2024/labs/2_lab3-style/#example-program","text":"If you haven't already, you should create a top-level CS149 folder to organize all your labs and other assignments for the semester. Then create a lab03 folder for today's lab. (If you logged in as student today, please log out and log back in with your own account.) Download: payroll.py >>> !flake8 payroll.py You should see the following errors: payroll.py:1:27: E231 missing whitespace after ',' payroll.py:5:43: E251 unexpected spaces around keyword / parameter equals payroll.py:6:2: N816 variable 'payRate' in global scope should not be mixedCase payroll.py:7:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:9: E225 missing whitespace around operator payroll.py:11:39: W292 no newline at end of file Fix all style errors by repeatedly running flake8 and submit to Gradescope when your file checks all style issues. Submission: At the end of class today, or by 11:00 PM tomorrow if you would like more time, submit a corrected version of payroll.py via Gradescope . Your code must pass flake8 style without any warnings AND meet all the requirements outlined below. (It must also compile and run correctly; don't change the program's behavior.) If you cannot get this working in Gradescope you may upload to Canvas, but points will be deducted. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the program. It's okay if your files are similar or identical, as long as both of your names are present at the top.","title":"Example Program"},{"location":"cs149spring2024/labs/2_lab3-style/#a-comments","text":"# An inline comment must contain only one # and a space after it. \"\"\" *Block comments should end with the closing statement on its own line. \"\"\"","title":"A. Comments"},{"location":"cs149spring2024/labs/2_lab3-style/#b-names","text":"All names should be descriptive and readable. ( sub_total rather than s , grade rather than grd ) Multiple-word names should use underscores to separate words. ( sub_total not subTotal ) Variable and method names should begin with a lowercase letter, and: Variable names should be nouns or noun phrases. ( student_name or sub_total ) Function names should be verbs or verb phrases. ( print_line or add_column ) Class names should begin with a capital letter and use title or CapWords case. ( HelloWorld ) Constant names should be all caps with an underscore separator. ( PI or INTEREST_RATE )","title":"B. Names"},{"location":"cs149spring2024/labs/2_lab3-style/#c-declarations","text":"CENTIMETERS\\_PER\\_INCH = 2.54 centimeters = inches \\* CENTIMETERS\\_PER\\_INCH // NOT inches \\* 2.54 All constants should be named and initialized at the top of the function in which they are used. All variables should also be declared at the top of the function, directly after any constant declaraions.","title":"C. Declarations"},{"location":"cs149spring2024/labs/2_lab3-style/#d-literals","text":"Numeric literals should be of the correct type for the context in which they are used. # integer expressions should use integer literals like a a = 2 # double expressions should use double literals like b b = 2.0 average = (x + y) / 2.0 # NOT 2, which is an integer","title":"D. Literals"},{"location":"cs149spring2024/labs/2_lab3-style/#e-indentation","text":"Subsections of code should be indented consistently with four spaces per Python requirements. Always use four space characters, not tab characters, for indentation. Statements too long for one line should be indented on subsequent lines.","title":"E. Indentation"},{"location":"cs149spring2024/labs/2_lab3-style/#f-whitespace","text":"There should be a space after commas, and #'s. Use whitespace to separate logical segments of code. There should be a blank line after variable declarations. Lines should be kept to a short length (< 80 - 100 chars). You should be able to see the full line in your text editor. Binary operators should be separated from their operands by a single space. ( sum = my_grade + your_grade ) Unary operators should not be separated by a space. ( my_grade++ )","title":"F. Whitespace"},{"location":"cs149spring2024/labs/3-b_lab5-speed/","text":"Lab 5 - Average Speed Introduction ============ This activity will help you continue to prepare for homework this week and next week. Concepts you will practice: Converting user input to either a floating point number (float), like 3.14159, or an integer (int), like 314159. Using floating point division (/), integer division (//), and the remainder, or mod, operator (%) in the appropriate situations. ============ Average Speed Calculator For this problem you will write a program named bike_speed.py that asks the user for the length of a bike race in miles (entered as a floating point number) and their finishing time for the race in hours, minutes, and seconds and then output their average speed in both miles per hour and kilometers per hour. (1 mile = 1.60934 kilometers). When you output the speed you should show exactly 2 digits past the decimal place. Here is an example run of the program: = Bike Race Average Speed Calculator = How many miles did you race? 18.66 How much time did that take you in hours, minutes, and seconds? Hours: 0 Minutes: 43 Seconds: 49 Your speed was 25.55 mph, which is 41.12 kph. Hint 1: Figure out how to calculate it by hand on paper before you try to code anything. You can\u2019t code what you can\u2019t solve with a pen and paper. Hint 2: You\u2019ll want to get your time into one unit. Dealing with 3 separate units is not good for computation. At the end of the day, we need to do distance / time in hours to solve the problem, so what is the total time in hours and how do you calculate it? Note that 0 hours, 43 minutes, and 49 seconds is ~0.7303 hours. How do you calculate this? I calculated it by, so how can you do this for other numbers of hours, minutes, and seconds? Hint 3: Section 2.4 in the reading introduces f-strings for formatting output to a number of decimal places. If you don\u2019t remember how to do it, get it working with any number of decimal places and then fix it when you\u2019ve got the rest working. Submission: Submit this to https://canvas.jmu.edu","title":"Lab 5 - Average Speed"},{"location":"cs149spring2024/labs/3-b_lab5-speed/#lab-5-average-speed","text":"","title":"Lab 5 - Average Speed"},{"location":"cs149spring2024/labs/3-b_lab5-speed/#introduction","text":"============ This activity will help you continue to prepare for homework this week and next week. Concepts you will practice: Converting user input to either a floating point number (float), like 3.14159, or an integer (int), like 314159. Using floating point division (/), integer division (//), and the remainder, or mod, operator (%) in the appropriate situations. ============","title":"Introduction"},{"location":"cs149spring2024/labs/3-b_lab5-speed/#average-speed-calculator","text":"For this problem you will write a program named bike_speed.py that asks the user for the length of a bike race in miles (entered as a floating point number) and their finishing time for the race in hours, minutes, and seconds and then output their average speed in both miles per hour and kilometers per hour. (1 mile = 1.60934 kilometers). When you output the speed you should show exactly 2 digits past the decimal place. Here is an example run of the program: = Bike Race Average Speed Calculator = How many miles did you race? 18.66 How much time did that take you in hours, minutes, and seconds? Hours: 0 Minutes: 43 Seconds: 49 Your speed was 25.55 mph, which is 41.12 kph. Hint 1: Figure out how to calculate it by hand on paper before you try to code anything. You can\u2019t code what you can\u2019t solve with a pen and paper. Hint 2: You\u2019ll want to get your time into one unit. Dealing with 3 separate units is not good for computation. At the end of the day, we need to do distance / time in hours to solve the problem, so what is the total time in hours and how do you calculate it? Note that 0 hours, 43 minutes, and 49 seconds is ~0.7303 hours. How do you calculate this? I calculated it by, so how can you do this for other numbers of hours, minutes, and seconds? Hint 3: Section 2.4 in the reading introduces f-strings for formatting output to a number of decimal places. If you don\u2019t remember how to do it, get it working with any number of decimal places and then fix it when you\u2019ve got the rest working.","title":"Average Speed Calculator"},{"location":"cs149spring2024/labs/3-b_lab5-speed/#submission","text":"Submit this to https://canvas.jmu.edu","title":"Submission:"},{"location":"cs149spring2024/labs/3_lab4-variables/","text":"Lab 4 - Variables Introduction ============ This activity will help you practice some of the concepts from this week and prepare for the homework problems next week. Specifically you will practice: Converting user input to either a floating point number (float), like 3.14159, or an integer (int), like 314159. Using floating point division (/), integer division (//), and the remainder, or mod, operator (%) in the appropriate situations. Problem: Splitting feet into miles, furlongs, and feet. ============ For this problem you are going to write a program called feet_conversion.py to use integer division and remainders to take a total number of feet and split it into miles, furlongs, and feet. 1 mile is 5280 feet and 1 furlong is 660 feet (it\u2019s some old English measure nobody uses anymore, but let\u2019s do it anyways!). Enter a total number of feet: 12345 12345 total feet is 2 mile(s), 2 furlong(s), and 465 feet. Hint 1: Figure out how to solve the problem yourself by hand on paper. You can\u2019t code something you don\u2019t know how to solve. Hint 2: You need to use integer division // and the mod/remainder % operators. Hint 3: You probably want a variable for the remaining feet. For instance, before you\u2019ve figured out the answer above, the remaining feet is 12345. But once you figure out that there are two full miles in 12345 feet (2 full miles is 10560 feet), then the remaining feet you have to deal with in your calculation is 1785 feet. Then how many full furlongs are in 1785 feet? Well, 2 again, since 660\u00d72\\=1320. And finally after we remove those 1320 from 1785 the remaining feet is 465. Hint 4: Notice how close the words remaining and remainder are. Submission: Submit this to https://canvas.jmu.edu","title":"Lab 4 - Variables"},{"location":"cs149spring2024/labs/3_lab4-variables/#lab-4-variables","text":"","title":"Lab 4 - Variables"},{"location":"cs149spring2024/labs/3_lab4-variables/#introduction","text":"============ This activity will help you practice some of the concepts from this week and prepare for the homework problems next week. Specifically you will practice: Converting user input to either a floating point number (float), like 3.14159, or an integer (int), like 314159. Using floating point division (/), integer division (//), and the remainder, or mod, operator (%) in the appropriate situations.","title":"Introduction"},{"location":"cs149spring2024/labs/3_lab4-variables/#problem-splitting-feet-into-miles-furlongs-and-feet","text":"============ For this problem you are going to write a program called feet_conversion.py to use integer division and remainders to take a total number of feet and split it into miles, furlongs, and feet. 1 mile is 5280 feet and 1 furlong is 660 feet (it\u2019s some old English measure nobody uses anymore, but let\u2019s do it anyways!). Enter a total number of feet: 12345 12345 total feet is 2 mile(s), 2 furlong(s), and 465 feet. Hint 1: Figure out how to solve the problem yourself by hand on paper. You can\u2019t code something you don\u2019t know how to solve. Hint 2: You need to use integer division // and the mod/remainder % operators. Hint 3: You probably want a variable for the remaining feet. For instance, before you\u2019ve figured out the answer above, the remaining feet is 12345. But once you figure out that there are two full miles in 12345 feet (2 full miles is 10560 feet), then the remaining feet you have to deal with in your calculation is 1785 feet. Then how many full furlongs are in 1785 feet? Well, 2 again, since 660\u00d72\\=1320. And finally after we remove those 1320 from 1785 the remaining feet is 465. Hint 4: Notice how close the words remaining and remainder are.","title":"Problem: Splitting feet into miles, furlongs, and feet."},{"location":"cs149spring2024/labs/3_lab4-variables/#submission","text":"Submit this to https://canvas.jmu.edu","title":"Submission:"},{"location":"cs149spring2024/labs/4_lab6-if-then/","text":"Lab 6 If-then-else CSCard Lab Introduction ============ We will be expanding on the use of submissions and testing via https://gradescope.com. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the code. It's okay if your files are similar or identical, as long as both of your names are present at the top. Objectives Practice validation and if-else-if statements. More gradescope submission practice. Part 1: Understand the Problem Write a program to prepare the monthly charge account statement for a customer of CS Card International, a credit card company. The program should take as input the previous balance on the account and the total amount of additional charges during the month. It should then compute the interest for the month, the total new balance (i.e., the previous balance plus additional charges plus interest), and the minimum payment due. The interest is $0 if the previous balance was $0.00 or less. If the previous balance was greater than $0, the interest is 2% of the total owed (i.e., previous balance plus additional charges).EXAMPLE: If the previous balance is $50.00 and the additional charges are $50.00, the interest would be $2.00. But if the previous balance is $0.00, the interest is $0 no matter what. The minimum payment based on the table below: $0.00 for new balance less than $0 new balance for new balance between $0 and $49.99 (inclusive) $50.00 for new balance between $50 and $300 (inclusiive) 20% of the new balance for new balance over $300 EXAMPLE: If the new balance is $38.00 then the person must pay the whole $38.00; if the balance is $128 then the person must pay $50; if the balance is $350 the minimum payment is $70. Make sure you understand the calculations before trying to program. Write the algorithm in pseudocode on paper, and test your algorithm with some examples to see how it works. ============ Part 2: Program the Solution Much of the solution including output formatting has already been done for you. Use the variables provided and keep all output statements exactly as they are. Download a copy of credit_card.py as a starting point. Fill in the Docstring comment for credit_card.py. Get the provided code to run. Write the calculation portion and min payment portion, returning bogus values for interest and minimum payments for now. Using the variables provided, code the input statements as described in credit_card.py. You must ensure that the program will not crash if the user enters a bad value.(values must be greater than -5000 and less than 5000 or it should return a 0) Code the rest of the program as if the two calculations were finished, and then test your program. You should see that the code properly reads in a value for the balance and additional charges and outputs the values in the correct format. (The numbers should be wrong until you finish your coding.) For each calculation (interest and minimum payment), you should code the proper solution. Think about test cases. Test the program with a variety of data. Include positive balance, negative balance, and 0 balance. When you are sure that your code is working properly. Make sure the output still looks okay.","title":"Lab 6  If-then-else CSCard Lab"},{"location":"cs149spring2024/labs/4_lab6-if-then/#lab-6-if-then-else-cscard-lab","text":"","title":"Lab 6  If-then-else CSCard Lab"},{"location":"cs149spring2024/labs/4_lab6-if-then/#introduction","text":"============ We will be expanding on the use of submissions and testing via https://gradescope.com. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the code. It's okay if your files are similar or identical, as long as both of your names are present at the top.","title":"Introduction"},{"location":"cs149spring2024/labs/4_lab6-if-then/#objectives","text":"Practice validation and if-else-if statements. More gradescope submission practice.","title":"Objectives"},{"location":"cs149spring2024/labs/4_lab6-if-then/#part-1-understand-the-problem","text":"Write a program to prepare the monthly charge account statement for a customer of CS Card International, a credit card company. The program should take as input the previous balance on the account and the total amount of additional charges during the month. It should then compute the interest for the month, the total new balance (i.e., the previous balance plus additional charges plus interest), and the minimum payment due. The interest is $0 if the previous balance was $0.00 or less. If the previous balance was greater than $0, the interest is 2% of the total owed (i.e., previous balance plus additional charges).EXAMPLE: If the previous balance is $50.00 and the additional charges are $50.00, the interest would be $2.00. But if the previous balance is $0.00, the interest is $0 no matter what. The minimum payment based on the table below: $0.00 for new balance less than $0 new balance for new balance between $0 and $49.99 (inclusive) $50.00 for new balance between $50 and $300 (inclusiive) 20% of the new balance for new balance over $300 EXAMPLE: If the new balance is $38.00 then the person must pay the whole $38.00; if the balance is $128 then the person must pay $50; if the balance is $350 the minimum payment is $70. Make sure you understand the calculations before trying to program. Write the algorithm in pseudocode on paper, and test your algorithm with some examples to see how it works. ============","title":"Part 1: Understand the Problem"},{"location":"cs149spring2024/labs/4_lab6-if-then/#part-2-program-the-solution","text":"Much of the solution including output formatting has already been done for you. Use the variables provided and keep all output statements exactly as they are. Download a copy of credit_card.py as a starting point. Fill in the Docstring comment for credit_card.py. Get the provided code to run. Write the calculation portion and min payment portion, returning bogus values for interest and minimum payments for now. Using the variables provided, code the input statements as described in credit_card.py. You must ensure that the program will not crash if the user enters a bad value.(values must be greater than -5000 and less than 5000 or it should return a 0) Code the rest of the program as if the two calculations were finished, and then test your program. You should see that the code properly reads in a value for the balance and additional charges and outputs the values in the correct format. (The numbers should be wrong until you finish your coding.) For each calculation (interest and minimum payment), you should code the proper solution. Think about test cases. Test the program with a variety of data. Include positive balance, negative balance, and 0 balance. When you are sure that your code is working properly. Make sure the output still looks okay.","title":"Part 2: Program the Solution"},{"location":"cs149spring2024/labs/5_lab7-circle/","text":"Lab 7 - Circle Lab - Writing and Calling functions Introduction ============ We will be expanding on the use of submissions and testing via https://gradescope.com. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the code. It's okay if your files are similar or identical, as long as both of your names are present at the top. Objectives Create a program with only functions. Stub out so the functions can be written and tested incrementally. Become more familiar with the math module in Python. Document return types Key Terms return type The data type the function returns. return value The value that the function returns via the return statement. function stub An empty or incomplete function that returns 0, \"\", false, etc. Part 1: Creating Stubs We are going to create a small program to carry out some geometric operations. Note that Python is a loosely typed language so return value types should be specified in :return docstring comments. It will include a couple of utility functions to make input and printing easier, as well as the calculation of the area of a circle and the volume of a sphere. (Normally, you would design one program to do the geometry and another one to deal with the utility functions, but for today's lab we are putting them together in one program.) Download and open the circle_driver.py program. Do not be concerned with what it contains just yet. Create a new source file, circle_play.py. Create the top level docstring comment including your name and today's date and honor code statement. Define each of the following functions: print_greeting will simply print some lines to greet the user upon running the application. Create a function stub using the following header: def print_greeting() This header says that the function is named print_greeting, and accepts no parameters. Create function documentation. In this case you only need to describe what this function will do. enter_radius - create a function header that looks like this: def enter_radius() This header says the function is named enter_radius, and accepts no parameters. Add function documentation for this function as follows: (note the use of the :return label) \"\"\" Displays a prompt to the user, then reads in a float value that the user has entered. Returns: (float): a float value representing a radius \"\"\" Create the function block, and add in a single return statement, return -999.0 This is a \"stubbed\" return statement that returns a value of the correct type, but is not the value we will eventually need. calculate_area - This function will calculate the area of a circle with a given radius. Create a function header named calculate_area and has a single parameter, a float value representing a radius. Create the function block with a return statement to return the value -888.0. (These ar meaningless values, but if we call the function and its not done, we'll know that by the return value.) Add your documentation including a :param tag. calculate_volume - This function will calculate the volume of a sphere with a given radius. Create a function header, function block, return statement, and documentation. The stubbed return value should be -777.0. Save your work at this point, before implementing any of the functions . You should not have any errors. If you do, check to make sure that each function in circle_play is created exactly as described above. Run circle_driver from Thonny or using the command line. What output do you see? Does it make any sense? Now we will begin to fill in our stubbed functions. ============ Part 2: Creating a Void function With No Parameters Begin with print_greeting, which should print the following. (Note that < blank line > just means that you should print a newline there.) Welcome to the CS149 Circle Calculator < blank line > This application will calculate the area of a circle and/or volume of a sphere. < blank line > Create the code to print these four lines. Run it from the command line. You are currently testing the 1st function, so pass the argument 1 to the main function as follows: python3 circle_driver.py 1 Does your greeting print correctly? Make any corrections that you need before moving on. Explanation : The circle_driver is designed to let you test each of your functions separately. In this case, you have built a single function, so you are testing just that function. The function stubs enable you to run the entire program, but then just fill in the parts that you are ready to complete and test. By testing individual functions, you can focus on getting that function written correctly before moving on to the next one. Part 3: Creating a Value Returning function With No Parameters Next you'll fill in the enter_radius function. This function displays a standard prompt, \"Enter the radius: \" and then reads in the radius from the user input. Output the prompt \"Enter the radius: \". The cursor should remain on the same line, one space to the right of the colon and read the value the user enters into a radius variable. Change the return statement to return the value that the user enters. Test your program on the command line running python3 circle_driver.py 2. This time enter the number 2 as the command line argument. What happens? Part 4: Creating Value-Returning functions With Parameters Finally, you will fill in each of the calculation functions. You are going to calculate the area of a circle and the volume of a sphere. The area of a circle is defined as A = \u03c0 r 2 . The volume of a sphere is V = 4/3 \u03c0 r 3 . Use these formulas to come up with a few test cases for each function. Write down your examples on a piece of paper, so you can be sure your code works as expected. Begin with the calculate_area function. You may find that the math module is helpful for this step. First, there is a constant defined in that module called pi. Since the constant is in another module, we must use the qualified name math.pi to access it. Define the variables that you will need. Create the calculation, using math.pi for \u03c0. Instead of the stub value in your return statement, return the area that you calculate. Test your work passing the number 3 in for the command line argument. Check your area values against the ones that you calculated by hand. Work with your function until it runs correctly. Create the calculate_volume function and test as before using command line argument 4 to test your volume function. Finally, test the entire application running the application with no arguments. It should run each function in turn. Upload your completed circle_play.py program to Gradescope . To receive full credit for this assignment, all 4 functions must work correctly. You will not receive full credit for this lab unless your code passes all of the automated formatting tests. Testing Greeting Welcome to the CS149 Circle Calculator This application will calculate the area of a circle and/or volume of a sphere. Testing Input Enter the radius: 5 Enter the radius: 10 Enter the radius: 15 The values you entered were: 5.0 10.0 15.0 A circle of radius 5.0 has area of 78.53981633974483 A circle of radius 10.0 has area of 314.1592653589793 A circle of radius 15.0 has area of 706.8583470577034 A sphere of radius 5.0 has volume of 523.5987755982989 A sphere of radius 10.0 has volume of 4188.790204786391 A sphere of radius 15.0 has volume of 14137.166941154068 This lab was originally created by Nancy Harris and modified by Nathan Sprague.","title":"Lab 7 - Circle Lab - Writing and Calling functions"},{"location":"cs149spring2024/labs/5_lab7-circle/#lab-7-circle-lab-writing-and-calling-functions","text":"","title":"Lab 7 - Circle Lab - Writing and Calling functions"},{"location":"cs149spring2024/labs/5_lab7-circle/#introduction","text":"============ We will be expanding on the use of submissions and testing via https://gradescope.com. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the code. It's okay if your files are similar or identical, as long as both of your names are present at the top.","title":"Introduction"},{"location":"cs149spring2024/labs/5_lab7-circle/#objectives","text":"Create a program with only functions. Stub out so the functions can be written and tested incrementally. Become more familiar with the math module in Python. Document return types","title":"Objectives"},{"location":"cs149spring2024/labs/5_lab7-circle/#key-terms","text":"return type The data type the function returns. return value The value that the function returns via the return statement. function stub An empty or incomplete function that returns 0, \"\", false, etc.","title":"Key Terms"},{"location":"cs149spring2024/labs/5_lab7-circle/#part-1-creating-stubs","text":"We are going to create a small program to carry out some geometric operations. Note that Python is a loosely typed language so return value types should be specified in :return docstring comments. It will include a couple of utility functions to make input and printing easier, as well as the calculation of the area of a circle and the volume of a sphere. (Normally, you would design one program to do the geometry and another one to deal with the utility functions, but for today's lab we are putting them together in one program.) Download and open the circle_driver.py program. Do not be concerned with what it contains just yet. Create a new source file, circle_play.py. Create the top level docstring comment including your name and today's date and honor code statement. Define each of the following functions: print_greeting will simply print some lines to greet the user upon running the application. Create a function stub using the following header: def print_greeting() This header says that the function is named print_greeting, and accepts no parameters. Create function documentation. In this case you only need to describe what this function will do. enter_radius - create a function header that looks like this: def enter_radius() This header says the function is named enter_radius, and accepts no parameters. Add function documentation for this function as follows: (note the use of the :return label) \"\"\" Displays a prompt to the user, then reads in a float value that the user has entered. Returns: (float): a float value representing a radius \"\"\" Create the function block, and add in a single return statement, return -999.0 This is a \"stubbed\" return statement that returns a value of the correct type, but is not the value we will eventually need. calculate_area - This function will calculate the area of a circle with a given radius. Create a function header named calculate_area and has a single parameter, a float value representing a radius. Create the function block with a return statement to return the value -888.0. (These ar meaningless values, but if we call the function and its not done, we'll know that by the return value.) Add your documentation including a :param tag. calculate_volume - This function will calculate the volume of a sphere with a given radius. Create a function header, function block, return statement, and documentation. The stubbed return value should be -777.0. Save your work at this point, before implementing any of the functions . You should not have any errors. If you do, check to make sure that each function in circle_play is created exactly as described above. Run circle_driver from Thonny or using the command line. What output do you see? Does it make any sense? Now we will begin to fill in our stubbed functions. ============","title":"Part 1: Creating Stubs"},{"location":"cs149spring2024/labs/5_lab7-circle/#part-2-creating-a-void-function-with-no-parameters","text":"Begin with print_greeting, which should print the following. (Note that < blank line > just means that you should print a newline there.) Welcome to the CS149 Circle Calculator < blank line > This application will calculate the area of a circle and/or volume of a sphere. < blank line > Create the code to print these four lines. Run it from the command line. You are currently testing the 1st function, so pass the argument 1 to the main function as follows: python3 circle_driver.py 1 Does your greeting print correctly? Make any corrections that you need before moving on. Explanation : The circle_driver is designed to let you test each of your functions separately. In this case, you have built a single function, so you are testing just that function. The function stubs enable you to run the entire program, but then just fill in the parts that you are ready to complete and test. By testing individual functions, you can focus on getting that function written correctly before moving on to the next one.","title":"Part 2: Creating a Void function With No Parameters"},{"location":"cs149spring2024/labs/5_lab7-circle/#part-3-creating-a-value-returning-function-with-no-parameters","text":"Next you'll fill in the enter_radius function. This function displays a standard prompt, \"Enter the radius: \" and then reads in the radius from the user input. Output the prompt \"Enter the radius: \". The cursor should remain on the same line, one space to the right of the colon and read the value the user enters into a radius variable. Change the return statement to return the value that the user enters. Test your program on the command line running python3 circle_driver.py 2. This time enter the number 2 as the command line argument. What happens?","title":"Part 3: Creating a Value Returning function With No Parameters"},{"location":"cs149spring2024/labs/5_lab7-circle/#part-4-creating-value-returning-functions-with-parameters","text":"Finally, you will fill in each of the calculation functions. You are going to calculate the area of a circle and the volume of a sphere. The area of a circle is defined as A = \u03c0 r 2 . The volume of a sphere is V = 4/3 \u03c0 r 3 . Use these formulas to come up with a few test cases for each function. Write down your examples on a piece of paper, so you can be sure your code works as expected. Begin with the calculate_area function. You may find that the math module is helpful for this step. First, there is a constant defined in that module called pi. Since the constant is in another module, we must use the qualified name math.pi to access it. Define the variables that you will need. Create the calculation, using math.pi for \u03c0. Instead of the stub value in your return statement, return the area that you calculate. Test your work passing the number 3 in for the command line argument. Check your area values against the ones that you calculated by hand. Work with your function until it runs correctly. Create the calculate_volume function and test as before using command line argument 4 to test your volume function. Finally, test the entire application running the application with no arguments. It should run each function in turn. Upload your completed circle_play.py program to Gradescope . To receive full credit for this assignment, all 4 functions must work correctly. You will not receive full credit for this lab unless your code passes all of the automated formatting tests. Testing Greeting Welcome to the CS149 Circle Calculator This application will calculate the area of a circle and/or volume of a sphere. Testing Input Enter the radius: 5 Enter the radius: 10 Enter the radius: 15 The values you entered were: 5.0 10.0 15.0 A circle of radius 5.0 has area of 78.53981633974483 A circle of radius 10.0 has area of 314.1592653589793 A circle of radius 15.0 has area of 706.8583470577034 A sphere of radius 5.0 has volume of 523.5987755982989 A sphere of radius 10.0 has volume of 4188.790204786391 A sphere of radius 15.0 has volume of 14137.166941154068 This lab was originally created by Nancy Harris and modified by Nathan Sprague.","title":"Part 4: Creating Value-Returning functions With Parameters"},{"location":"cs149spring2024/labs/6_lab8-list-tuple/","text":"Lab 8 - List-Tuple Lab Introduction In this lab you will gain some practice with lists and tuples. Docstring Guide ============ Problem: ASCII Art Roses Long ago, before computers could display high resolution graphics on 4K monitors with 300 dpi pixel density and churn out stunning real-time 3D graphics at 60 frames per second, many people spent a lot of time making art on computers out of text using the ASCII character set. Like this: ......................................... ...####...####....###...##..##...####.... ..##.....##........##...##..##..##..##... ..##......###......##...######...#####... ..##........##.....##.......##......##... ...####..####.....####......##....###.... ......................................... You are going to write a program to output five ASCII art roses. Like this: @-->---->--- @----->->-- @----->------->-- @->->---------- @->->- Each rose starts with an @ followed by a section of dashes - before the first thorn >, followed by a second section of dashes to a second thorn, followed by a final section of dashes -. For your first pass at this algorithm, you should have five variables: rose1, rose2, rose3, rose4, and rose5. Each variable should refer to a tuple with 3 integers denoting the number of dashes ('-') in each of the rose\u2019s sections. For example, the first rose in the figure above has two dashes in the first section, four dashes in the second section, and three dashes in the final section, so its tuple representation is (2, 4, 3). Your code should use the variables rose1, rose2, rose3, rose4, and rose5 to output each rose, one per line. The roses should be aligned so that their right-hand sides line up and the longest rose has no spaces before its petals (the '@'). Any rose shorter than the longest rose should have an appropriate number of spaces before the '@'. Here is starter code: \"\"\" Rose Variables \"\"\" rose1 = ( 2 , 4 , 3 ) rose2 = ( 5 , 1 , 2 ) rose3 = ( 5 , 7 , 2 ) rose4 = ( 1 , 1 , 10 ) rose5 = ( 1 , 1 , 1 ) \"\"\" Your code here \"\"\" Hints Can you calculate the length of rose 1 using the data in rose1? Can you put the lengths of all five roses into a list? If so, can you use list functions to find the length of the longest rose? Remember that you can multiply a string by an integer to duplicate it. So \"abc\" * 3 is \"abcabcabc\". To right justify a string you can use the rjust method. Submit your roses.py file to Gradescope. This lab was originally created by Nathan Sprague.","title":"Lab 8 - List-Tuple Lab"},{"location":"cs149spring2024/labs/6_lab8-list-tuple/#lab-8-list-tuple-lab","text":"","title":"Lab 8 - List-Tuple Lab"},{"location":"cs149spring2024/labs/6_lab8-list-tuple/#introduction","text":"In this lab you will gain some practice with lists and tuples. Docstring Guide ============","title":"Introduction"},{"location":"cs149spring2024/labs/6_lab8-list-tuple/#problem-ascii-art-roses","text":"Long ago, before computers could display high resolution graphics on 4K monitors with 300 dpi pixel density and churn out stunning real-time 3D graphics at 60 frames per second, many people spent a lot of time making art on computers out of text using the ASCII character set. Like this: ......................................... ...####...####....###...##..##...####.... ..##.....##........##...##..##..##..##... ..##......###......##...######...#####... ..##........##.....##.......##......##... ...####..####.....####......##....###.... ......................................... You are going to write a program to output five ASCII art roses. Like this: @-->---->--- @----->->-- @----->------->-- @->->---------- @->->- Each rose starts with an @ followed by a section of dashes - before the first thorn >, followed by a second section of dashes to a second thorn, followed by a final section of dashes -. For your first pass at this algorithm, you should have five variables: rose1, rose2, rose3, rose4, and rose5. Each variable should refer to a tuple with 3 integers denoting the number of dashes ('-') in each of the rose\u2019s sections. For example, the first rose in the figure above has two dashes in the first section, four dashes in the second section, and three dashes in the final section, so its tuple representation is (2, 4, 3). Your code should use the variables rose1, rose2, rose3, rose4, and rose5 to output each rose, one per line. The roses should be aligned so that their right-hand sides line up and the longest rose has no spaces before its petals (the '@'). Any rose shorter than the longest rose should have an appropriate number of spaces before the '@'. Here is starter code: \"\"\" Rose Variables \"\"\" rose1 = ( 2 , 4 , 3 ) rose2 = ( 5 , 1 , 2 ) rose3 = ( 5 , 7 , 2 ) rose4 = ( 1 , 1 , 10 ) rose5 = ( 1 , 1 , 1 ) \"\"\" Your code here \"\"\"","title":"Problem: ASCII Art Roses"},{"location":"cs149spring2024/labs/6_lab8-list-tuple/#hints","text":"Can you calculate the length of rose 1 using the data in rose1? Can you put the lengths of all five roses into a list? If so, can you use list functions to find the length of the longest rose? Remember that you can multiply a string by an integer to duplicate it. So \"abc\" * 3 is \"abcabcabc\". To right justify a string you can use the rjust method. Submit your roses.py file to Gradescope. This lab was originally created by Nathan Sprague.","title":"Hints"},{"location":"cs149spring2024/labs/7_lab9-haiku-lab/","text":"Lab - Haiku lab Background Haiku's are a form of Japanese poetry. They consist of 3 lines of text. The first line of the haiku must contain 5 syllables. The second line must have 7 syllables. Finally, the third line again contains 5 syllables. Here is an example of a valid haiku: An old silent pond A frog jumps into the pond\u2014 Splash! Silence again. by Matsuo Basho ============ Objectives Practice if-else and conditionals. Practice with functions Practice using a helper function Practice with loops More practice with lists Program the Solution - First Function: Write a program called haiku_checker.py that contains two functions. The first function will be a helper function that is called check_n_syllables. This function must take input of a list of words on a line and an int number of syllables to validate. You may use the pysyllables library to make this easier https://pypi.org/project/pysyllables/](https://pypi.org/project/pysyllables/). You will need to install the pysyllables package through the Thonny package manager. Make sure you also do an import at the top of your file: from pysyllables import get_syllable_count You can then use the get_syllable_count(word) function to get the number of syllables in a word. The return value of the function should be as follows: This function should return either a -1 if the total syllables is less than the given number n to validate, 0 if the total syllables is equal to the number n, and 1 if the total syllables is greater than n. Second Function: The second function should be called validate_haiku. It will take a single parameter of a list of lists. The list will contain 3 lines for the haiku. Each line will be a sub list of the words in the line. The function will return a String value. The return values should follow these rules: It should be set to \"Valid haiku.\" if this is a valid haiku that has a first line with 5 syllables, second line with 7 syllables, and third line with 5 syllables. If it has more or less than 3 lines it should return: \"Invalid haiku, not 3 lines.\". Otherwise it will return a message with the type of error for each line. For example: if the first line has 7 syllables it would return: \"Line 1 too short. \"[note the space after the period]. If the second line has 3 syllables it would return \"Line 2 too short. \". If the third line is too long it would return: \"Line 3 too long. \". Your program should allow multiple comments, for instance 1 for each line that is wrong. The overall message should be on a single line of output. Do not return an error if a line is valid. Note: You should have a return at the end of each error message and only return one continuous String with all error messages as the final return String. Submission: Submit your program called haiku_checker.py to https://gradescope.com by tomorrow evening.","title":"Lab - Haiku lab"},{"location":"cs149spring2024/labs/7_lab9-haiku-lab/#lab-haiku-lab","text":"","title":"Lab - Haiku lab"},{"location":"cs149spring2024/labs/7_lab9-haiku-lab/#background","text":"Haiku's are a form of Japanese poetry. They consist of 3 lines of text. The first line of the haiku must contain 5 syllables. The second line must have 7 syllables. Finally, the third line again contains 5 syllables. Here is an example of a valid haiku: An old silent pond A frog jumps into the pond\u2014 Splash! Silence again. by Matsuo Basho ============","title":"Background"},{"location":"cs149spring2024/labs/7_lab9-haiku-lab/#objectives","text":"Practice if-else and conditionals. Practice with functions Practice using a helper function Practice with loops More practice with lists","title":"Objectives"},{"location":"cs149spring2024/labs/7_lab9-haiku-lab/#program-the-solution-first-function","text":"Write a program called haiku_checker.py that contains two functions. The first function will be a helper function that is called check_n_syllables. This function must take input of a list of words on a line and an int number of syllables to validate. You may use the pysyllables library to make this easier https://pypi.org/project/pysyllables/](https://pypi.org/project/pysyllables/). You will need to install the pysyllables package through the Thonny package manager. Make sure you also do an import at the top of your file: from pysyllables import get_syllable_count You can then use the get_syllable_count(word) function to get the number of syllables in a word. The return value of the function should be as follows: This function should return either a -1 if the total syllables is less than the given number n to validate, 0 if the total syllables is equal to the number n, and 1 if the total syllables is greater than n.","title":"Program the Solution - First Function:"},{"location":"cs149spring2024/labs/7_lab9-haiku-lab/#second-function","text":"The second function should be called validate_haiku. It will take a single parameter of a list of lists. The list will contain 3 lines for the haiku. Each line will be a sub list of the words in the line. The function will return a String value. The return values should follow these rules: It should be set to \"Valid haiku.\" if this is a valid haiku that has a first line with 5 syllables, second line with 7 syllables, and third line with 5 syllables. If it has more or less than 3 lines it should return: \"Invalid haiku, not 3 lines.\". Otherwise it will return a message with the type of error for each line. For example: if the first line has 7 syllables it would return: \"Line 1 too short. \"[note the space after the period]. If the second line has 3 syllables it would return \"Line 2 too short. \". If the third line is too long it would return: \"Line 3 too long. \". Your program should allow multiple comments, for instance 1 for each line that is wrong. The overall message should be on a single line of output. Do not return an error if a line is valid. Note: You should have a return at the end of each error message and only return one continuous String with all error messages as the final return String.","title":"Second Function:"},{"location":"cs149spring2024/labs/7_lab9-haiku-lab/#submission","text":"Submit your program called haiku_checker.py to https://gradescope.com by tomorrow evening.","title":"Submission:"},{"location":"cs149spring2024/labs/8_lab10-codingbat-loops/","text":"Lab9 - Coding bat practice with loops Background Part 1: Account Setup(ignore if you did this in previous coding bat lab) Go to codingbat.com and create an account (click the link on the upper right). Please use your JMU email when setting up your account. After logging in, click the \"prefs\" link (upper right) and \"share to\" your professor's JMU e-mail for example: chaoaj@jmu.edu so you will get credit. Also make sure your name is entered as shown: Last, First ============ Part 2 Problem Solving Solve as many of the List-2 problems as you can today. Solve the following: count_evens , big_diff , centered_average , sum13 . Submission Package up the 4 solutions above into a program called batlist2.py and submit it to https://gradescope.com https://gradescope.com by midnight tomorrow evening.","title":"Lab9 - Coding bat practice with loops"},{"location":"cs149spring2024/labs/8_lab10-codingbat-loops/#lab9-coding-bat-practice-with-loops","text":"","title":"Lab9 - Coding bat practice with loops"},{"location":"cs149spring2024/labs/8_lab10-codingbat-loops/#background","text":"","title":"Background"},{"location":"cs149spring2024/labs/8_lab10-codingbat-loops/#part-1-account-setupignore-if-you-did-this-in-previous-coding-bat-lab","text":"Go to codingbat.com and create an account (click the link on the upper right). Please use your JMU email when setting up your account. After logging in, click the \"prefs\" link (upper right) and \"share to\" your professor's JMU e-mail for example: chaoaj@jmu.edu so you will get credit. Also make sure your name is entered as shown: Last, First ============","title":"Part 1: Account Setup(ignore if you did this in previous coding bat lab)"},{"location":"cs149spring2024/labs/8_lab10-codingbat-loops/#part-2-problem-solving","text":"Solve as many of the List-2 problems as you can today. Solve the following: count_evens , big_diff , centered_average , sum13 .","title":"Part 2 Problem Solving"},{"location":"cs149spring2024/labs/8_lab10-codingbat-loops/#submission","text":"Package up the 4 solutions above into a program called batlist2.py and submit it to https://gradescope.com https://gradescope.com by midnight tomorrow evening.","title":"Submission"},{"location":"cs149spring2024/labs/9_lab11-8ball/","text":"Lab11 - While loops - Magic 8-Ball Background We have already worked with if statements to detect invalid input. But in some cases users will repeatedly enter the wrong value. In addition, some problems lend themselves to executing the program repeatedly. This lab will explore these uses of loops in Python. Obectives Use a loop structure for error correction. Use a loop structure for execution control. Part 1: The Magic 8-Ball The Magic 8-Ball is a toy produced by Tyco Toys (now Mattel) and consists of a ball filled with a blue fluid. Suspended in the fluid is a icosahedron (a 20-sided polyhedron with each side consisting of an equilateral triangle). Each face has an answer to a yes/no question. Download the eightball.py program then implement the required helper functions: input_yes_no(prompt) This function is simpler than the previous input functions you have written. Display the prompt (followed by \"[yes/no]: \"), read the next line of user input, and return true if it's \"y\" or \"yes\" ignoring case. get_question(prompt) This function should keep prompting the user to enter a question until they enter a valid one. Question strings must be between 1 and 60 characters, and they must end with a question mark. If the question is invalid, display the applicable error message: - \"Your question is blank\" - \"Your question is too long\" - \"Your question must end with a ?\" After completing the helper functions, be sure to test the program multiple times with different inputs. Here is an example of what it will look like: Magic 8-Ball Do you want to ask a question? [yes/no]: yes What is your question? Will I win the lottery Your question must end with a ? What is your question? Will I win the lottery? Question: Will I win the lottery? Answer: Signs point to yes. Do you want to ask a question? [yes/no]: no Goodbye! Your final version should allow you to keep asking questions until you enter the word no, and it should verify that each question is at most 60 chars ending with a question mark. ============ Submission Submit your completed eightball.py file to https://gradescope.com https://gradescope.com by tomorrow evening.","title":"Lab11 - While loops - Magic 8-Ball"},{"location":"cs149spring2024/labs/9_lab11-8ball/#lab11-while-loops-magic-8-ball","text":"","title":"Lab11 - While loops - Magic 8-Ball"},{"location":"cs149spring2024/labs/9_lab11-8ball/#background","text":"We have already worked with if statements to detect invalid input. But in some cases users will repeatedly enter the wrong value. In addition, some problems lend themselves to executing the program repeatedly. This lab will explore these uses of loops in Python.","title":"Background"},{"location":"cs149spring2024/labs/9_lab11-8ball/#obectives","text":"Use a loop structure for error correction. Use a loop structure for execution control.","title":"Obectives"},{"location":"cs149spring2024/labs/9_lab11-8ball/#part-1-the-magic-8-ball","text":"The Magic 8-Ball is a toy produced by Tyco Toys (now Mattel) and consists of a ball filled with a blue fluid. Suspended in the fluid is a icosahedron (a 20-sided polyhedron with each side consisting of an equilateral triangle). Each face has an answer to a yes/no question. Download the eightball.py program then implement the required helper functions: input_yes_no(prompt) This function is simpler than the previous input functions you have written. Display the prompt (followed by \"[yes/no]: \"), read the next line of user input, and return true if it's \"y\" or \"yes\" ignoring case. get_question(prompt) This function should keep prompting the user to enter a question until they enter a valid one. Question strings must be between 1 and 60 characters, and they must end with a question mark. If the question is invalid, display the applicable error message: - \"Your question is blank\" - \"Your question is too long\" - \"Your question must end with a ?\" After completing the helper functions, be sure to test the program multiple times with different inputs. Here is an example of what it will look like: Magic 8-Ball Do you want to ask a question? [yes/no]: yes What is your question? Will I win the lottery Your question must end with a ? What is your question? Will I win the lottery? Question: Will I win the lottery? Answer: Signs point to yes. Do you want to ask a question? [yes/no]: no Goodbye! Your final version should allow you to keep asking questions until you enter the word no, and it should verify that each question is at most 60 chars ending with a question mark. ============","title":"Part 1: The Magic 8-Ball"},{"location":"cs149spring2024/labs/9_lab11-8ball/#submission","text":"Submit your completed eightball.py file to https://gradescope.com https://gradescope.com by tomorrow evening.","title":"Submission"},{"location":"cs159fall2024/","text":"Welcome! This is the website for the Fall 2024 offering of CS159 (Advanced Programming) at James Madison University. Specifically, this is the website for sections taught by Alvin Chao Announcements: In person TA support TAs are available in King ISAT/CS room 248 for in-person support at the following times: Sunday 3 pm - 9 pm Monday/Tuesday/Thursday 5 pm - 9 in person, 9-11 pm online Wednesday 6 pm - 9 pm in person then online 9-11pm TA Hours 9 pm to 11 pm via Microsoft Teams(See Canvas for links) TAs are available for virtual online support from 9 pm to 11 pm Sunday through Thursday. Week 1 FRI 8am [CANVAS] Course Intro Survey Purchase book through Buy Book assignment link. The class meets Mondays, Wednesdays, Fridays. Class meets in person. Please visit the calendar for the week-to-week assignments. My Office Location Office hours (KING 248): M-F 3:00-4:00 M-W-F 8:00-9:00 You may schedule an appointment for other times that are not listed to visit my office(540)-568-6206 or online via Zoom. Please use the links to the left to navigate the website. Important announcements will be posted on this front page. Other course content will appear on the subpages linked above. Please check this website (especially the front page and calendar) regularly for updates. This semester, we will be using Piazza for class discussions. If you have a question that may be of general interest to your fellow students, please post it on Piazza rather than emailing me directly. This allows others to answer your question or benefit from my answer. I will check the Piazza forum regularly and respond as quickly as I can. To access Piazza, log into Canvas and click the \"Piazza\" link in the navigation bar on the left. Class grades will be accessible via Canvas , and online quizzes will be administered using Canvas as well. Other resources: Connecting to Stu.cs.jmu.edu instructions","title":"CS159 Fall 2024"},{"location":"cs159fall2024/#welcome","text":"This is the website for the Fall 2024 offering of CS159 (Advanced Programming) at James Madison University. Specifically, this is the website for sections taught by Alvin Chao","title":"Welcome!"},{"location":"cs159fall2024/#announcements","text":"In person TA support TAs are available in King ISAT/CS room 248 for in-person support at the following times: Sunday 3 pm - 9 pm Monday/Tuesday/Thursday 5 pm - 9 in person, 9-11 pm online Wednesday 6 pm - 9 pm in person then online 9-11pm TA Hours 9 pm to 11 pm via Microsoft Teams(See Canvas for links) TAs are available for virtual online support from 9 pm to 11 pm Sunday through Thursday. Week 1 FRI 8am [CANVAS] Course Intro Survey Purchase book through Buy Book assignment link. The class meets Mondays, Wednesdays, Fridays. Class meets in person. Please visit the calendar for the week-to-week assignments. My Office Location Office hours (KING 248): M-F 3:00-4:00 M-W-F 8:00-9:00 You may schedule an appointment for other times that are not listed to visit my office(540)-568-6206 or online via Zoom. Please use the links to the left to navigate the website. Important announcements will be posted on this front page. Other course content will appear on the subpages linked above. Please check this website (especially the front page and calendar) regularly for updates.","title":"Announcements:"},{"location":"cs159fall2024/calendar/","text":"CS159 Chao Calendar // <![CDATA[ dttest1 = new Date(2024,0,16); dttest2 = new Date(2024,4,24); function diff_weeks(dt2, dt1) { var diff =(dt2.getTime() - dt1.getTime()) / 1000; // diff in secs diff /= (60 * 60 * 24 * 7); // convert seconds to weeks return Math.abs(Math.round(diff)); } // Start of semester - remember JS date month is one less than current. var dt1 = new Date(2024, 7, 20); // new Date(2023, 7, 17); // January 1 = (2021, 0, 1) // document.write(\"dt1\" + dt1); var dt2 = new Date(); // document.write(\"d2\" + dt2); wk = diff_weeks(dt2,dt1); // document.write(\"Week: \" + wk); if (wk >= 16) { wk = 16; } else if (wk <= 0) { wk = 1; } document.write(\"<a href=\\\"#Week\"+wk+\"\\\">Current Week</a>\"); document.write(\"<!-- wk \" + wk + \"-->\"); // ]]> Java and Config Resources: ( Note: This schedule is tentative and is subject to change during the semester ) | Week / Topic | Reading | Tue in class | Thu in class | HW / Programming Assignment | Events | | --- | ---------- | --------- | ------- | -------------- | --------------------------- | | 1 Intro | Obtain book | - | c1 8/22 | | | | 2 Intro | Chp 1 | - | c1 8/29 | | | | 3 Intro | Chp 2 | - | c1 9/5 | | | | 4 Intro | Chp 3 | - | Practice Quiz 1 9/12 | | | | 5 Intro | Chp 4 | - | Actual Quiz 1 9/19 | | | | 6 Intro | Chp 5 | - | Practice Quiz 2 c1 9/26 | | | | 7 Intro | Chp 6 | - | Actual Quiz 2 c1 10/3 | | | | 8 Intro | Chp 7 | - | Practice Quiz 3 c1 10/10 | | | | 9 Intro | Chp 8 | Actual Quiz 3 c | c1 10/17 | | Fall Break 16-20 | | 10 Intro | Chp 9| - | Practice Quiz 4 c1 10/24 | | | | 11 Intro | Chp 10 | - | Actual Quiz 4 c1 10/31 | | | | 12 Intro | Chp 11 | - | Practice Quiz 5 c1 11/7 | | | | 13 Intro | Chp 12 | - | Actual Quiz 5 c1 11/14 | | | | 14 Intro | Chp 13 | - | Practice Quiz 6 c1 11/21 | | | | 15 Intro | Thanksgiving break | - | c1 11/28 | | Thanksgiving Break 11/25 to 11/29 | | 16 Intro | Review | - | Actual Quiz 6 c1 12/5 | | Dec 6 last day of class | | 17 Exam week | Exam Schedule | | c1 12/12 | | | --- Back to Top Back to Top // <![CDATA[ $(window).load(function(){ // using window load function instead of document ready function /* Animated scroll to top by @NickLa, Web Designer Wall (http://webdesignerwall.com/tutorials/animated-scroll-to-top) with modifications by johns2ja */ // hide #back-top first $(\"#back-top\").hide(); // fade in #back-top //$(function () { /* remove containing function to ensure it works cross-browser - johns2ja */ $(window).scroll(function () { if ($(this).scrollTop() > 100) { $('#back-top').fadeIn(); } else { $('#back-top').fadeOut(); } }); // scroll body to 0px on click $('#back-top a').click(function () { $('body,html').animate({ scrollTop: 0 }, 800); return false; }); // }); /* remove containing function to ensure it works cross-browser */ }); // ]]> <!-- #back-top { bottom: 130px; left: 5%; /* instead of margin-left - johns2ja */ position: fixed; } #back-top a { color: #bbb !important; display: block; font-size: 11px; height: 75px; text-align: center; text-decoration: none !important; text-transform: uppercase; transition: all 1s ease 0s; width: 75px; } #back-top span { background: #ddd url(\"//www.jmu.edu/jmucmsfiles/images/up-arrow.png\") no-repeat scroll center center; border-radius: 15px; display: block; height: 75px; margin-bottom: 7px; transition: all 1s ease 0s; width: 75px; } @media all and (max-width:768px){ /* RWD by johns2ja */ #back-top { bottom: 3%; left: 1%; } #back-top a { height: 32px; width: 32px; font-size: 0px; } #back-top span { width: 32px; height: 32px; background-size: 32px; } } -->","title":"CS159 Chao Calendar"},{"location":"cs159fall2024/calendar/#cs159-chao-calendar","text":"","title":"CS159 Chao Calendar"},{"location":"cs159fall2024/syllabus/","text":"Syllabus for CS159 Fall 2024 - Instructor: Chao Objectives and Expectations Official course description: Fundamental problem-solving techniques using a modern programming language. By the end of this course, you should be able to: *Explain fundamental programming concepts (e.g, variables, methods, decisions, loops, arrays, objects) using appropriate terminology. Describe basic elements of high-level programming languages, including expressions, statements, functions, modules, and libraries. Read and interpret software specifications and write source code from them. Use automated software tools and processes to test your programs thoroughly. Distinguish appropriate collaboration from cheating on assignments and exams. Evaluate your own work for compliance with requirements and style guidelines. Develop correct and efficient algorithms to solve problems using computation. Course Textbook Required Textbook Zybook: Purchase the text through the Buy Book assignment in Canvas. Grading Criteria You are responsible for all material discussed in lecture and discussion section and posted on the class web page, including announcements, deadlines, policies, etc. Your final course grade will be determined according to the following percentages: Item Percentage Zybook Readings 5% Participation/Labs 10% Homework / Programming Assignments 15% In Class Quizzes 45% Final Exam 25% Reading Quizzes, Labs, Homework / Programming Assignments This portion of your grade will be based on graded labs, reading quizzes, and homework problems assigned. I will drop a to be determined amount(probably 2-3) of reading quizzes and labs at the end of the semester to account for the 'bad day' or unforseen circumstances for missing a particular day. ** Quizzes(In Class)** Quizzes(In class) There will be 6 in-class quizzes on Thursdays. There will be practice quizzes one week then the following week will be the actual quiz for that section. Final Exam The final exam will be two hours: one for written problems, one for coding problems. If you must be absent during an exam for a legitimate reason, you must contact me at least one week beforehand to make special arrangements. Failure to make prior arrangements for a missed exam will result in a zero grade. The instructor reserves the right to give students who do not earn 60% of the points on the final exam no higher than a C for the course. Except in extraordinary situations, you will not be excused from exams. Your instructor will be the sole arbiter of whether a situation qualifies as extraordinary. Hence, you should behave as if you will not be excused from exams for any reason. Letter grades will be assigned on the scale A=90-100, B=80-89, C=70-79, D=60-69, F=0-59, with potential minor adjustments after considering the overall performance of the class and actual distribution of numeric scores. I will use \u201c+\u201d and \u201c-\u201d grades at my discretion. If you believe I have made an error while grading your work or calculating your final score, please bring it to my attention after class or during office hours. If I determine that there has been a simple mistake, I will fix it immediately and no formal request is necessary. If you believe an exam question or assignment has been graded unfairly, you must submit a verbal or written formal request for a regrade. Such requests must be submitted within one week of when the assignment in question is returned to you. Any coursework submitted for reconsideration may be regraded in its entirety, which could result in a lower score if warranted. Instructor Contact Info Please post generic questions to Piazza, where other students may answer and/or benefit from my answers. My email is chaoaj at the standard domain. My office is in ISAT 264, and my office hours are posted on the main course page . I am also sometimes available outside office hours by appointment; if you wish to make an appointment, send me an email. Course Policies Important announcements will be made in class and/or on the class website. Please make it a habit to check the web page daily. Although every effort has been made to be complete and accurate, unforeseen circumstances arising during the semester could require the adjustment of any material given here. Consequently, given due notice to students, I reserve the right to change any information on this syllabus or in other course materials. You are permitted to use course materials for your own personal use only. Course materials may not be distributed publicly or provided to others (excepting other students in the course), in any way or format unless explicitly allowed. Attendance and Participation Attendance is not mandatory, but participation will be used as a part of your lab/quiz grade portion. I strongly encourage you to attend every class session and participate fully in order to derive the maximum benefit of this course. If you believe that there is something I could change about the way I am handling the course in order to improve its effectiveness for you, please let me know via email or office hours. Please silence your cell phone while class is in session. If you have a laptop or tablet, you are encouraged to bring it to class and use it to work along with programming examples and exercises. Mute the volume to avoid unintended interruptions, and do not use any electronic devices for activities that may distract other students. Repeated violations of this policy may result in disciplinary action or a grade penalty in the course. I strongly encourage you to check the main website and the Piazza web forum regularly for important announcements (usually regarding programming projects). You may also use the Piazza forum to ask general questions of interest to the class as a whole (e.g., administrative issues or project clarification questions) as well as to offer each other general advice on class assignments. However, do not post any information that would violate the university academic integrity policy. If you are unsure about this, please email me for approval before you post. Homework Written and/or programming exercises will be assigned each week. These exercises are meant to give you a chance to practice the skills you need to develop in this course. You are welcome to discuss these assignments with your classmates and to use generative AI tools to help develop and understand solutions. Be careful! Being able to understand a friend's code, or code generated using an AI tool, is very different from being able to write code on your own. If you become over-reliant on outside assistance you won't develop the skills you need to succeed on quizzes and exams. Late Homework Policy Deadlines exist, in part, so that we can discuss solutions in class. Under normal circumstances, late work will not be accepted. Contact me if you are facing unavoidable circumstances that will prevent you from submitting an assignment on time. I will do my best to work with you to make appropriate accommodations. Please don't wait until the night before to get started! Programming Assignments(PA's) PA's must be submitted electronically following the instructions given in class and on the website. Assignments may not be submitted by any other means (e.g., do not email your projects to me unless I request that). It is your responsibility to test your program and verify that it works properly before submitting it. All assignments are due at 23:00 (11:00pm) on the day indicated on the assignment unless noted otherwise. Late assignments will not be accepted. Regardless of the any other late policy, I reserve the right to refuse to grade any programs submitted after the beginning of the second class period following the project deadline, because I may discuss the solution in class. Project extensions will not necessarily be granted due to server congestion, system problems, network problems, power outages, etc., so do not wait to submit a program until the night it is due. No consideration in grading will be made for errors made in transferring files or submitting the wrong version of your project. Having a working, non-submitted version will not count; only submitted code will be be counted. You will be responsible for developing your own techniques for testing your projects before submitting it. I will grade your assignment based on test cases not provided to you in advance. Because grading may be done automatically, you must follow the project specification exactly. Your code will be graded on a combination of correctness, completeness, documentation, and code style. Any \"hard coding\" in a project assignment will result in a score of zero for that assignment, and is considered a bad-faith effort. Hard coding refers to attempting to make a program appear as if it works correctly, when in fact it does not. One example of hard coding would be printing the desired output instead of computing it. If you have any questions as to what constitutes hard coding for a particular assignment, be sure to ask ahead of time. Academic Honesty You are expected to comply with the JMU Honor Code as stated in the Student Handbook and available from the Honor Council website on all assignments, projects, and exams. Honor Code Students who violate the Honor Code (https://www.jmu.edu/honorcode/code.shtml) will receive a reduced or failing grade in the course. Other penalties may be imposed, and all violations will be reported to the Honor Council. Representing someone else's work as your own, in any form, constitutes an honor code violation. It is also a violation of the honor code to \"render unauthorized assistance to another student by knowingly permitting him or her to see or copy all or a portion of an examination or any work to be submitted for academic credit.\" Automated tools may be used on any assignment, at any time, to detect inappropriate collaboration and the originality of submissions. Generative AI You are permitted to use AI technology in ways that support your learning. The use of AI is strictly prohibited during quizzes and exams, so make sure you can program independently. Refer to the Generative AI in Computing Education Student Guide for examples of appropriate use. Attribution A key component of academic integrity is giving credit where credit is due. If you receive assistance, either from another student, an online source, or an AI-enabled tool, you must provide a clear and explicit acknowledgment of that assistance in your submission. To that end, every homework assignment must include a statement describing your process for completing the work. Here is an example illustrating the format that I expect: \"I was able to complete questions one and two with no assistance after reading the zyBook chapter. I got stuck on question three, but TA Jamie talked me through the solution during office hours. My solution for that question is based on her advice. I had no idea how to get started on question four, so I put the prompt into ChatGPT and asked it for an annotated solution. I didn't understand the resulting code, so I talked it over with my friend Xavier. He explained how negative string indexing works, which helped me to understand the code. My final submission for that question is copied from the ChatGPT output.\" Any submission without such an acknowledgment statement will receive an automatic zero. Full credit for homework assignments is conditional on making a good-faith effort to develop the skills necessary to answer each question independently. Submissions like the following would result in a zero on the assignment. \"I was in a hurry so I just copied all of the prompts into ChatGPT and uploaded the resulting code.\" \"My friend Bill had already completed the assignment and sent me a copy of his solution. I submitted a copy of his code after reading it over and improving some variable names.\" If I find evidence of a violation of the honor code, I will bring the matter to the attention of the involved individuals via email and request a face-to-face meeting. As per section IV of the honor code, first time student offenders may agree that a violation has occurred and accept an appropriate penalty by submitting an \"Informal Resolution Agreement Form\" to the honor council. If the student is not a first-time offender or if there is disagreement about the violation or penalty, the matter will be refered to the honor council under section V of the honor code. Important Notes You must achieve a B\u2013 or better grade to continue on to CS 159. Adding and Dropping the Course Students are responsible for adding and dropping courses. Please consult the appropriate academic calendar for the exact deadlines. I will not give \"WP\" or \"WF\" grades to students requesting a drop after the deadline except in extraordinary circumstances. Disability Accommodations If you need an accommodation based on the impact of a disability, you must contact the Office of Disability Services if you have not previously done so. Disability Services will provide you with an Access Plan letter that will verify your need for services and make recommendations for accommodations to be used in the classroom. Once you have shown me this letter, we will sit down and review the course requirements, your disability characteristics, and your requested accommodations to develop an individualized plan appropriate for this course. I will not make any accommodations without the appropriate documentation, as I am not qualified to diagnose disabilities. Excused Absences Besides the policies in this syllabus, the University's policies apply during the semester. Various policies that may be relevant appear in the Undergraduate Catalog. Excused absences will be granted at my discretion and only with appropriate documentation. Please contact me as soon as possible if you wish to request an excused absence. Missing an exam for reasons such as illness, religious observance, participation in required university activities, or family or personal emergency (such as a serious automobile accident or the funeral of a close relative) all are circumstances that may qualify as an excused absence. Where possible you should attempt by all means necessary to attend and take exams at their regularly scheduled class period. Inclement Weather In case of inclement weather, we will hold class online via Zoom. A link will be available via an announcement in Canvas. Otherwise, this class will operate in accord with JMU's official cancellation policy . Catalog Description CS 149.Introduction to Programming. 3 credits. Fundamental problem-solving techniques using a modern programming language. Topics include variables, input/output, decisions, loops, functions, arrays, and objects. Students learn about algorithm development, testing strategies, and software tools. Students may not receive credit for both CS 139 and CS 149 .","title":"Syllabus for CS159 Fall 2024 - Instructor: Chao"},{"location":"cs159fall2024/syllabus/#syllabus-for-cs159-fall-2024-instructor-chao","text":"","title":"Syllabus for CS159 Fall 2024 - Instructor: Chao"},{"location":"cs159fall2024/syllabus/#objectives-and-expectations","text":"Official course description: Fundamental problem-solving techniques using a modern programming language. By the end of this course, you should be able to: *Explain fundamental programming concepts (e.g, variables, methods, decisions, loops, arrays, objects) using appropriate terminology. Describe basic elements of high-level programming languages, including expressions, statements, functions, modules, and libraries. Read and interpret software specifications and write source code from them. Use automated software tools and processes to test your programs thoroughly. Distinguish appropriate collaboration from cheating on assignments and exams. Evaluate your own work for compliance with requirements and style guidelines. Develop correct and efficient algorithms to solve problems using computation.","title":"Objectives and Expectations"},{"location":"cs159fall2024/syllabus/#course-textbook","text":"Required Textbook","title":"Course Textbook"},{"location":"cs159fall2024/syllabus/#zybook","text":"Purchase the text through the Buy Book assignment in Canvas.","title":"Zybook:"},{"location":"cs159fall2024/syllabus/#grading-criteria","text":"You are responsible for all material discussed in lecture and discussion section and posted on the class web page, including announcements, deadlines, policies, etc. Your final course grade will be determined according to the following percentages: Item Percentage Zybook Readings 5% Participation/Labs 10% Homework / Programming Assignments 15% In Class Quizzes 45% Final Exam 25% Reading Quizzes, Labs, Homework / Programming Assignments This portion of your grade will be based on graded labs, reading quizzes, and homework problems assigned. I will drop a to be determined amount(probably 2-3) of reading quizzes and labs at the end of the semester to account for the 'bad day' or unforseen circumstances for missing a particular day. ** Quizzes(In Class)** Quizzes(In class) There will be 6 in-class quizzes on Thursdays. There will be practice quizzes one week then the following week will be the actual quiz for that section. Final Exam The final exam will be two hours: one for written problems, one for coding problems. If you must be absent during an exam for a legitimate reason, you must contact me at least one week beforehand to make special arrangements. Failure to make prior arrangements for a missed exam will result in a zero grade. The instructor reserves the right to give students who do not earn 60% of the points on the final exam no higher than a C for the course. Except in extraordinary situations, you will not be excused from exams. Your instructor will be the sole arbiter of whether a situation qualifies as extraordinary. Hence, you should behave as if you will not be excused from exams for any reason. Letter grades will be assigned on the scale A=90-100, B=80-89, C=70-79, D=60-69, F=0-59, with potential minor adjustments after considering the overall performance of the class and actual distribution of numeric scores. I will use \u201c+\u201d and \u201c-\u201d grades at my discretion. If you believe I have made an error while grading your work or calculating your final score, please bring it to my attention after class or during office hours. If I determine that there has been a simple mistake, I will fix it immediately and no formal request is necessary. If you believe an exam question or assignment has been graded unfairly, you must submit a verbal or written formal request for a regrade. Such requests must be submitted within one week of when the assignment in question is returned to you. Any coursework submitted for reconsideration may be regraded in its entirety, which could result in a lower score if warranted.","title":"Grading Criteria"},{"location":"cs159fall2024/syllabus/#instructor-contact-info","text":"Please post generic questions to Piazza, where other students may answer and/or benefit from my answers. My email is chaoaj at the standard domain. My office is in ISAT 264, and my office hours are posted on the main course page . I am also sometimes available outside office hours by appointment; if you wish to make an appointment, send me an email.","title":"Instructor Contact Info"},{"location":"cs159fall2024/syllabus/#course-policies","text":"Important announcements will be made in class and/or on the class website. Please make it a habit to check the web page daily. Although every effort has been made to be complete and accurate, unforeseen circumstances arising during the semester could require the adjustment of any material given here. Consequently, given due notice to students, I reserve the right to change any information on this syllabus or in other course materials. You are permitted to use course materials for your own personal use only. Course materials may not be distributed publicly or provided to others (excepting other students in the course), in any way or format unless explicitly allowed.","title":"Course Policies"},{"location":"cs159fall2024/syllabus/#attendance-and-participation","text":"Attendance is not mandatory, but participation will be used as a part of your lab/quiz grade portion. I strongly encourage you to attend every class session and participate fully in order to derive the maximum benefit of this course. If you believe that there is something I could change about the way I am handling the course in order to improve its effectiveness for you, please let me know via email or office hours. Please silence your cell phone while class is in session. If you have a laptop or tablet, you are encouraged to bring it to class and use it to work along with programming examples and exercises. Mute the volume to avoid unintended interruptions, and do not use any electronic devices for activities that may distract other students. Repeated violations of this policy may result in disciplinary action or a grade penalty in the course. I strongly encourage you to check the main website and the Piazza web forum regularly for important announcements (usually regarding programming projects). You may also use the Piazza forum to ask general questions of interest to the class as a whole (e.g., administrative issues or project clarification questions) as well as to offer each other general advice on class assignments. However, do not post any information that would violate the university academic integrity policy. If you are unsure about this, please email me for approval before you post.","title":"Attendance and Participation"},{"location":"cs159fall2024/syllabus/#homework","text":"Written and/or programming exercises will be assigned each week. These exercises are meant to give you a chance to practice the skills you need to develop in this course. You are welcome to discuss these assignments with your classmates and to use generative AI tools to help develop and understand solutions. Be careful! Being able to understand a friend's code, or code generated using an AI tool, is very different from being able to write code on your own. If you become over-reliant on outside assistance you won't develop the skills you need to succeed on quizzes and exams. Late Homework Policy Deadlines exist, in part, so that we can discuss solutions in class. Under normal circumstances, late work will not be accepted. Contact me if you are facing unavoidable circumstances that will prevent you from submitting an assignment on time. I will do my best to work with you to make appropriate accommodations. Please don't wait until the night before to get started!","title":"Homework"},{"location":"cs159fall2024/syllabus/#programming-assignmentspas","text":"PA's must be submitted electronically following the instructions given in class and on the website. Assignments may not be submitted by any other means (e.g., do not email your projects to me unless I request that). It is your responsibility to test your program and verify that it works properly before submitting it. All assignments are due at 23:00 (11:00pm) on the day indicated on the assignment unless noted otherwise. Late assignments will not be accepted. Regardless of the any other late policy, I reserve the right to refuse to grade any programs submitted after the beginning of the second class period following the project deadline, because I may discuss the solution in class. Project extensions will not necessarily be granted due to server congestion, system problems, network problems, power outages, etc., so do not wait to submit a program until the night it is due. No consideration in grading will be made for errors made in transferring files or submitting the wrong version of your project. Having a working, non-submitted version will not count; only submitted code will be be counted. You will be responsible for developing your own techniques for testing your projects before submitting it. I will grade your assignment based on test cases not provided to you in advance. Because grading may be done automatically, you must follow the project specification exactly. Your code will be graded on a combination of correctness, completeness, documentation, and code style. Any \"hard coding\" in a project assignment will result in a score of zero for that assignment, and is considered a bad-faith effort. Hard coding refers to attempting to make a program appear as if it works correctly, when in fact it does not. One example of hard coding would be printing the desired output instead of computing it. If you have any questions as to what constitutes hard coding for a particular assignment, be sure to ask ahead of time.","title":"Programming Assignments(PA's)"},{"location":"cs159fall2024/syllabus/#academic-honesty","text":"You are expected to comply with the JMU Honor Code as stated in the Student Handbook and available from the Honor Council website on all assignments, projects, and exams.","title":"Academic Honesty"},{"location":"cs159fall2024/syllabus/#honor-code","text":"Students who violate the Honor Code (https://www.jmu.edu/honorcode/code.shtml) will receive a reduced or failing grade in the course. Other penalties may be imposed, and all violations will be reported to the Honor Council. Representing someone else's work as your own, in any form, constitutes an honor code violation. It is also a violation of the honor code to \"render unauthorized assistance to another student by knowingly permitting him or her to see or copy all or a portion of an examination or any work to be submitted for academic credit.\" Automated tools may be used on any assignment, at any time, to detect inappropriate collaboration and the originality of submissions.","title":"Honor Code"},{"location":"cs159fall2024/syllabus/#generative-ai","text":"You are permitted to use AI technology in ways that support your learning. The use of AI is strictly prohibited during quizzes and exams, so make sure you can program independently. Refer to the Generative AI in Computing Education Student Guide for examples of appropriate use.","title":"Generative AI"},{"location":"cs159fall2024/syllabus/#attribution","text":"A key component of academic integrity is giving credit where credit is due. If you receive assistance, either from another student, an online source, or an AI-enabled tool, you must provide a clear and explicit acknowledgment of that assistance in your submission. To that end, every homework assignment must include a statement describing your process for completing the work. Here is an example illustrating the format that I expect: \"I was able to complete questions one and two with no assistance after reading the zyBook chapter. I got stuck on question three, but TA Jamie talked me through the solution during office hours. My solution for that question is based on her advice. I had no idea how to get started on question four, so I put the prompt into ChatGPT and asked it for an annotated solution. I didn't understand the resulting code, so I talked it over with my friend Xavier. He explained how negative string indexing works, which helped me to understand the code. My final submission for that question is copied from the ChatGPT output.\" Any submission without such an acknowledgment statement will receive an automatic zero. Full credit for homework assignments is conditional on making a good-faith effort to develop the skills necessary to answer each question independently. Submissions like the following would result in a zero on the assignment. \"I was in a hurry so I just copied all of the prompts into ChatGPT and uploaded the resulting code.\" \"My friend Bill had already completed the assignment and sent me a copy of his solution. I submitted a copy of his code after reading it over and improving some variable names.\" If I find evidence of a violation of the honor code, I will bring the matter to the attention of the involved individuals via email and request a face-to-face meeting. As per section IV of the honor code, first time student offenders may agree that a violation has occurred and accept an appropriate penalty by submitting an \"Informal Resolution Agreement Form\" to the honor council. If the student is not a first-time offender or if there is disagreement about the violation or penalty, the matter will be refered to the honor council under section V of the honor code. Important Notes You must achieve a B\u2013 or better grade to continue on to CS 159. Adding and Dropping the Course Students are responsible for adding and dropping courses. Please consult the appropriate academic calendar for the exact deadlines. I will not give \"WP\" or \"WF\" grades to students requesting a drop after the deadline except in extraordinary circumstances.","title":"Attribution"},{"location":"cs159fall2024/syllabus/#disability-accommodations","text":"If you need an accommodation based on the impact of a disability, you must contact the Office of Disability Services if you have not previously done so. Disability Services will provide you with an Access Plan letter that will verify your need for services and make recommendations for accommodations to be used in the classroom. Once you have shown me this letter, we will sit down and review the course requirements, your disability characteristics, and your requested accommodations to develop an individualized plan appropriate for this course. I will not make any accommodations without the appropriate documentation, as I am not qualified to diagnose disabilities.","title":"Disability Accommodations"},{"location":"cs159fall2024/syllabus/#excused-absences","text":"Besides the policies in this syllabus, the University's policies apply during the semester. Various policies that may be relevant appear in the Undergraduate Catalog. Excused absences will be granted at my discretion and only with appropriate documentation. Please contact me as soon as possible if you wish to request an excused absence. Missing an exam for reasons such as illness, religious observance, participation in required university activities, or family or personal emergency (such as a serious automobile accident or the funeral of a close relative) all are circumstances that may qualify as an excused absence. Where possible you should attempt by all means necessary to attend and take exams at their regularly scheduled class period.","title":"Excused Absences"},{"location":"cs159fall2024/syllabus/#inclement-weather","text":"In case of inclement weather, we will hold class online via Zoom. A link will be available via an announcement in Canvas. Otherwise, this class will operate in accord with JMU's official cancellation policy .","title":"Inclement Weather"},{"location":"cs159fall2024/syllabus/#catalog-description","text":"CS 149.Introduction to Programming. 3 credits. Fundamental problem-solving techniques using a modern programming language. Topics include variables, input/output, decisions, loops, functions, arrays, and objects. Students learn about algorithm development, testing strategies, and software tools. Students may not receive credit for both CS 139 and CS 149 .","title":"Catalog Description"},{"location":"cs159fall2024/labs/1_lab2-thonny/","text":"Lab02: Python Comand Line and Thonny Introduction The goal for this lab is to gain experience editing, compiling and executing Python programs in the terminal and through the Thonny IDE. You may work on this lab individually or in a group of no more than three people. Executing Python in the Terminal Each of the steps below should be completed entirely inside the terminal : no GUI applications allowed. Refer to the Unix Tutorial for Beginners if you need to learn more about Unix commands. Create a cs149 folder on your desktop mkdir cs149 Move into the cs149 directory: cd cs149 Create a folder inside your home directory named lab02 . mkdir lab02 Move into the lab02 directory: cd lab02 Copy the file welcome.py by doing a Right-Click Save-As and saving it to your lab02 folder. OR here is the code: print (\"Welcome to CS149!\") print(\"It's fun.\") cut and paste this into a file called welcome.py and save it in the lab02 folder. 6. Run welcome.py: $ python3 welcome.py Congratulations! You've successfully executed your first Python program. Editing Files in the Terminal Normally, we will be using an Integrated Development Environment (IDE) to edit and compile Python programs. However, it can sometimes be convenient to edit a file directly in the terminal. There are many terminal-based editors. Today we'll try nano because it is easy to use for beginners. Open welcome.py using nano : $ nano welcome.py You should see something like the following: The two lines of text at the bottom show the set of actions available in the editor. The \"^\" symbol indicates the \"Ctrl\" key. For example, pressing Ctrl-O will \"WriteOut\" (save) any changes you have made to the file. Edit the file so that the welcome message says \"It's REALLY fun.\" instead of \"It's fun.\" . Save your changes and exit. Try executing your program again: $ python3 welcome.py You should see the following output Welcome to CS149! It's REALLY fun. Thonny IDE Objectives Use an IDE (Integrated Development Environment). Edit, save, compile, and run a simple Python program. Recognize and correct syntax errors in a Python program. Key Terms source file the Python program as written by the programmer syntax error mistake in the source code that prevents compilation logic error mistake in the program that causes incorrect behavior execute the process of running a program on a computer Part 1: Thonny Editor Thonny is a text editor designed to simplify the process of editing, debugging and executing Python programs. Open Thonny and click \"File \u2013> Open\" from the menu and select your welcome.py file from above. Press the Green play button on the toolbar to execute the Python file(this is the same thing as running the >>python welcome.py in the terminal. >>> %Run welcome.py Welcome to CS149! It's REALLY fun. Edit the file in Thonny to print another line that prints I have edited a file in Thonny. Save your results by pressing the Floppy disk icon then run the program again by pressing the Green play button. You have just run and edited a program using Thonny. Submission for Lab2 Via https://www.gradescope.com submit the Word of the Day in Canvas and your welcome.py file to Gradescope. Acknowledgments This activity is based on a lab developed by Nathan Sprague based on a lab originally developed by Chris Mayfield.","title":"Lab02: Python Comand Line and Thonny"},{"location":"cs159fall2024/labs/1_lab2-thonny/#lab02-python-comand-line-and-thonny","text":"","title":"Lab02: Python Comand Line and Thonny"},{"location":"cs159fall2024/labs/1_lab2-thonny/#introduction","text":"The goal for this lab is to gain experience editing, compiling and executing Python programs in the terminal and through the Thonny IDE. You may work on this lab individually or in a group of no more than three people.","title":"Introduction"},{"location":"cs159fall2024/labs/1_lab2-thonny/#executing-python-in-the-terminal","text":"Each of the steps below should be completed entirely inside the terminal : no GUI applications allowed. Refer to the Unix Tutorial for Beginners if you need to learn more about Unix commands. Create a cs149 folder on your desktop mkdir cs149 Move into the cs149 directory: cd cs149 Create a folder inside your home directory named lab02 . mkdir lab02 Move into the lab02 directory: cd lab02 Copy the file welcome.py by doing a Right-Click Save-As and saving it to your lab02 folder. OR here is the code: print (\"Welcome to CS149!\") print(\"It's fun.\") cut and paste this into a file called welcome.py and save it in the lab02 folder. 6. Run welcome.py: $ python3 welcome.py Congratulations! You've successfully executed your first Python program.","title":"Executing Python in the Terminal"},{"location":"cs159fall2024/labs/1_lab2-thonny/#editing-files-in-the-terminal","text":"Normally, we will be using an Integrated Development Environment (IDE) to edit and compile Python programs. However, it can sometimes be convenient to edit a file directly in the terminal. There are many terminal-based editors. Today we'll try nano because it is easy to use for beginners. Open welcome.py using nano : $ nano welcome.py You should see something like the following: The two lines of text at the bottom show the set of actions available in the editor. The \"^\" symbol indicates the \"Ctrl\" key. For example, pressing Ctrl-O will \"WriteOut\" (save) any changes you have made to the file. Edit the file so that the welcome message says \"It's REALLY fun.\" instead of \"It's fun.\" . Save your changes and exit. Try executing your program again: $ python3 welcome.py You should see the following output Welcome to CS149! It's REALLY fun.","title":"Editing Files in the Terminal"},{"location":"cs159fall2024/labs/1_lab2-thonny/#thonny-ide","text":"","title":"Thonny IDE"},{"location":"cs159fall2024/labs/1_lab2-thonny/#objectives","text":"Use an IDE (Integrated Development Environment). Edit, save, compile, and run a simple Python program. Recognize and correct syntax errors in a Python program.","title":"Objectives"},{"location":"cs159fall2024/labs/1_lab2-thonny/#key-terms","text":"source file the Python program as written by the programmer syntax error mistake in the source code that prevents compilation logic error mistake in the program that causes incorrect behavior execute the process of running a program on a computer","title":"Key Terms"},{"location":"cs159fall2024/labs/1_lab2-thonny/#part-1-thonny-editor","text":"Thonny is a text editor designed to simplify the process of editing, debugging and executing Python programs. Open Thonny and click \"File \u2013> Open\" from the menu and select your welcome.py file from above. Press the Green play button on the toolbar to execute the Python file(this is the same thing as running the >>python welcome.py in the terminal. >>> %Run welcome.py Welcome to CS149! It's REALLY fun. Edit the file in Thonny to print another line that prints I have edited a file in Thonny. Save your results by pressing the Floppy disk icon then run the program again by pressing the Green play button. You have just run and edited a program using Thonny.","title":"Part 1: Thonny Editor"},{"location":"cs159fall2024/labs/1_lab2-thonny/#submission-for-lab2","text":"Via https://www.gradescope.com submit the Word of the Day in Canvas and your welcome.py file to Gradescope. Acknowledgments This activity is based on a lab developed by Nathan Sprague based on a lab originally developed by Chris Mayfield.","title":"Submission for Lab2"},{"location":"cs159fall2024/labs/2_lab3-style/","text":"Lab03: Style guide and pep8 Source: https://xkcd.com/1513/ Background PEP8 - Python Style When writing in English, readability can be impacted by the way the text is laid out on the page. We use conventions, like indenting the first sentence of a paragraph, to make it easier to understand written text. Programming languages are the same. Programs are easier to read if we agree on a set of conventions for how the code should be formatted. PEP 8 is the official document that describes the standard formatting conventions for Python code. (Here is a prettier version: https://pep8.org/ .) You don\u2019t need to read and understand the full PEP 8 document now, but you may want to look it over to get a feel for the issues that it addresses. Instructions for installing Thonny and flake8 configuration Comments When writing your programs it is helpful for us if you include the assignment name, a description of the assignment, your name, the due date and an Honor Code statement to let us know where you got help from on the assignment. These should be done in a block at the top of your program that looks like this: \"\"\" Lab 03- Style lab - fixing styles and testing online grading tool submission. Author: Alvin Chao Version: 1-26-22 Honor Code: I got help on the output statements for the lab from TA John \"\"\" Part 1 Running flake8 Through Thonny When you submit homework assignments for CS 149 they will automatically be checked against the PEP 8 formatting requirements using a tool named flake8 . You will only receive full credit if you pass all of these automated style checks. You can install flake8 in Thonny by selecting Tools -> Manage Packages\u2026 and then finding and installing flake8 as well as pep8-naming . After installation, you should be able to check your file by typing the following into the Thonny shell: >>> !flake8 payroll.py The exclamation point tells the Python interpreter the command should not be interpreted as Python code. Note that the Gradescope autograder is configured to be slightly more lenient than the default settings for flake8 . We allow line lengths up to 100 and disable checks for some errors and warnings. If you want to run flake8 with exactly the same settings as Gradescope, you can copy the following file into the same directory as your python code: setup.cfg Part 2 Example Program If you haven't already, you should create a top-level CS149 folder to organize all your labs and other assignments for the semester. Then create a lab03 folder for today's lab. (If you logged in as student today, please log out and log back in with your own account.) Download: payroll.py >>> !flake8 payroll.py You should see the following errors: payroll.py:1:27: E231 missing whitespace after ',' payroll.py:5:43: E251 unexpected spaces around keyword / parameter equals payroll.py:6:2: N816 variable 'payRate' in global scope should not be mixedCase payroll.py:7:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:9: E225 missing whitespace around operator payroll.py:11:39: W292 no newline at end of file Fix all style errors by repeatedly running flake8 and submit to Gradescope when your file checks all style issues. Submission: At the end of class today, or by 11:00 PM tomorrow if you would like more time, submit a corrected version of payroll.py via Gradescope . Your code must pass flake8 style without any warnings AND meet all the requirements outlined below. (It must also compile and run correctly; don't change the program's behavior.) If you cannot get this working in Gradescope you may upload to Canvas, but points will be deducted. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the program. It's okay if your files are similar or identical, as long as both of your names are present at the top. A. Comments # An inline comment must contain only one # and a space after it. \"\"\" *Block comments should end with the closing statement on its own line. \"\"\" B. Names All names should be descriptive and readable. ( sub_total rather than s , grade rather than grd ) Multiple-word names should use underscores to separate words. ( sub_total not subTotal ) Variable and method names should begin with a lowercase letter, and: Variable names should be nouns or noun phrases. ( student_name or sub_total ) Function names should be verbs or verb phrases. ( print_line or add_column ) Class names should begin with a capital letter and use title or CapWords case. ( HelloWorld ) Constant names should be all caps with an underscore separator. ( PI or INTEREST_RATE ) C. Declarations CENTIMETERS\\_PER\\_INCH = 2.54 centimeters = inches \\* CENTIMETERS\\_PER\\_INCH // NOT inches \\* 2.54 All constants should be named and initialized at the top of the function in which they are used. All variables should also be declared at the top of the function, directly after any constant declaraions. D. Literals Numeric literals should be of the correct type for the context in which they are used. # integer expressions should use integer literals like a a = 2 # double expressions should use double literals like b b = 2.0 average = (x + y) / 2.0 # NOT 2, which is an integer E. Indentation Subsections of code should be indented consistently with four spaces per Python requirements. Always use four space characters, not tab characters, for indentation. Statements too long for one line should be indented on subsequent lines. F. Whitespace There should be a space after commas, and #'s. Use whitespace to separate logical segments of code. There should be a blank line after variable declarations. Lines should be kept to a short length (< 80 - 100 chars). You should be able to see the full line in your text editor. Binary operators should be separated from their operands by a single space. ( sum = my_grade + your_grade ) Unary operators should not be separated by a space. ( my_grade++ )","title":"2 lab3 style"},{"location":"cs159fall2024/labs/2_lab3-style/#lab03-style-guide-and-pep8","text":"Source: https://xkcd.com/1513/","title":"Lab03: Style guide and pep8"},{"location":"cs159fall2024/labs/2_lab3-style/#background","text":"","title":"Background"},{"location":"cs159fall2024/labs/2_lab3-style/#pep8-python-style","text":"When writing in English, readability can be impacted by the way the text is laid out on the page. We use conventions, like indenting the first sentence of a paragraph, to make it easier to understand written text. Programming languages are the same. Programs are easier to read if we agree on a set of conventions for how the code should be formatted. PEP 8 is the official document that describes the standard formatting conventions for Python code. (Here is a prettier version: https://pep8.org/ .) You don\u2019t need to read and understand the full PEP 8 document now, but you may want to look it over to get a feel for the issues that it addresses. Instructions for installing Thonny and flake8 configuration","title":"PEP8 - Python Style"},{"location":"cs159fall2024/labs/2_lab3-style/#comments","text":"When writing your programs it is helpful for us if you include the assignment name, a description of the assignment, your name, the due date and an Honor Code statement to let us know where you got help from on the assignment. These should be done in a block at the top of your program that looks like this: \"\"\" Lab 03- Style lab - fixing styles and testing online grading tool submission. Author: Alvin Chao Version: 1-26-22 Honor Code: I got help on the output statements for the lab from TA John \"\"\"","title":"Comments"},{"location":"cs159fall2024/labs/2_lab3-style/#part-1","text":"","title":"Part 1"},{"location":"cs159fall2024/labs/2_lab3-style/#running-flake8-through-thonny","text":"When you submit homework assignments for CS 149 they will automatically be checked against the PEP 8 formatting requirements using a tool named flake8 . You will only receive full credit if you pass all of these automated style checks. You can install flake8 in Thonny by selecting Tools -> Manage Packages\u2026 and then finding and installing flake8 as well as pep8-naming . After installation, you should be able to check your file by typing the following into the Thonny shell: >>> !flake8 payroll.py The exclamation point tells the Python interpreter the command should not be interpreted as Python code. Note that the Gradescope autograder is configured to be slightly more lenient than the default settings for flake8 . We allow line lengths up to 100 and disable checks for some errors and warnings. If you want to run flake8 with exactly the same settings as Gradescope, you can copy the following file into the same directory as your python code: setup.cfg","title":"Running flake8 Through Thonny"},{"location":"cs159fall2024/labs/2_lab3-style/#part-2","text":"","title":"Part 2"},{"location":"cs159fall2024/labs/2_lab3-style/#example-program","text":"If you haven't already, you should create a top-level CS149 folder to organize all your labs and other assignments for the semester. Then create a lab03 folder for today's lab. (If you logged in as student today, please log out and log back in with your own account.) Download: payroll.py >>> !flake8 payroll.py You should see the following errors: payroll.py:1:27: E231 missing whitespace after ',' payroll.py:5:43: E251 unexpected spaces around keyword / parameter equals payroll.py:6:2: N816 variable 'payRate' in global scope should not be mixedCase payroll.py:7:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:2: N816 variable 'grossPay' in global scope should not be mixedCase payroll.py:9:9: E225 missing whitespace around operator payroll.py:11:39: W292 no newline at end of file Fix all style errors by repeatedly running flake8 and submit to Gradescope when your file checks all style issues. Submission: At the end of class today, or by 11:00 PM tomorrow if you would like more time, submit a corrected version of payroll.py via Gradescope . Your code must pass flake8 style without any warnings AND meet all the requirements outlined below. (It must also compile and run correctly; don't change the program's behavior.) If you cannot get this working in Gradescope you may upload to Canvas, but points will be deducted. Collaboration: You are encouraged to work with another student to complete this lab. Each of you should submit your own copy of the program. It's okay if your files are similar or identical, as long as both of your names are present at the top.","title":"Example Program"},{"location":"cs159fall2024/labs/2_lab3-style/#a-comments","text":"# An inline comment must contain only one # and a space after it. \"\"\" *Block comments should end with the closing statement on its own line. \"\"\"","title":"A. Comments"},{"location":"cs159fall2024/labs/2_lab3-style/#b-names","text":"All names should be descriptive and readable. ( sub_total rather than s , grade rather than grd ) Multiple-word names should use underscores to separate words. ( sub_total not subTotal ) Variable and method names should begin with a lowercase letter, and: Variable names should be nouns or noun phrases. ( student_name or sub_total ) Function names should be verbs or verb phrases. ( print_line or add_column ) Class names should begin with a capital letter and use title or CapWords case. ( HelloWorld ) Constant names should be all caps with an underscore separator. ( PI or INTEREST_RATE )","title":"B. Names"},{"location":"cs159fall2024/labs/2_lab3-style/#c-declarations","text":"CENTIMETERS\\_PER\\_INCH = 2.54 centimeters = inches \\* CENTIMETERS\\_PER\\_INCH // NOT inches \\* 2.54 All constants should be named and initialized at the top of the function in which they are used. All variables should also be declared at the top of the function, directly after any constant declaraions.","title":"C. Declarations"},{"location":"cs159fall2024/labs/2_lab3-style/#d-literals","text":"Numeric literals should be of the correct type for the context in which they are used. # integer expressions should use integer literals like a a = 2 # double expressions should use double literals like b b = 2.0 average = (x + y) / 2.0 # NOT 2, which is an integer","title":"D. Literals"},{"location":"cs159fall2024/labs/2_lab3-style/#e-indentation","text":"Subsections of code should be indented consistently with four spaces per Python requirements. Always use four space characters, not tab characters, for indentation. Statements too long for one line should be indented on subsequent lines.","title":"E. Indentation"},{"location":"cs159fall2024/labs/2_lab3-style/#f-whitespace","text":"There should be a space after commas, and #'s. Use whitespace to separate logical segments of code. There should be a blank line after variable declarations. Lines should be kept to a short length (< 80 - 100 chars). You should be able to see the full line in your text editor. Binary operators should be separated from their operands by a single space. ( sum = my_grade + your_grade ) Unary operators should not be separated by a space. ( my_grade++ )","title":"F. Whitespace"}]}